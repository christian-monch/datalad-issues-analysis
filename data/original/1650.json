{"url": "https://api.github.com/repos/datalad/datalad/issues/1650", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/1650/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/1650/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/1650/events", "html_url": "https://github.com/datalad/datalad/issues/1650", "id": 244762237, "node_id": "MDU6SXNzdWUyNDQ3NjIyMzc=", "number": 1650, "title": "[wishlist] run/rerun tandem", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778592, "node_id": "MDU6TGFiZWw2Mzc3ODU5Mg==", "url": "https://api.github.com/repos/datalad/datalad/labels/enhancement", "name": "enhancement", "color": "0052cc", "default": true, "description": ""}, {"id": 374318336, "node_id": "MDU6TGFiZWwzNzQzMTgzMzY=", "url": "https://api.github.com/repos/datalad/datalad/labels/conference%20agenda%20item", "name": "conference agenda item", "color": "fbca04", "default": false, "description": "Scheduled to be discussed in a developer meeting"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2017-07-21T19:29:31Z", "updated_at": "2017-10-08T06:35:18Z", "closed_at": "2017-10-08T06:35:18Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Just discovered https://dataversioncontrol.com/ from the blog post https://medium.com/towards-data-science/how-to-version-control-your-machine-learning-task-cad74dce44c4  and thought that it is a nice feature to have indeed and should be very easy to implement!\r\n\r\n1. `run cmd args` would \r\n   - verify that we are in a clean state\r\n   - go through args and check if any point to file under annex control, and if that one is not present locally -- download it\r\n   - execute the `cmd args`\r\n   - `datalad -m \"RUN <cmd> <args>\" save` all changes\r\n\r\n2. `rerun` (repro in DVC) probably with options for either to\r\n\r\n - `--steps=[all,N]` to rerun all commands or just last N,\r\n- `--use-current-state` -- to use current state (thus using recent code version, I think it is what DVC does) or by default checkout previous states to check  if external changes impact our results\r\n\r\nand with that it would\r\n\r\n  - traverse git history (so we do not need to store anything else) to establish which files were output (thus changed) in any 'RUN' commit, and which were input, so we could build DAG on the fly, collect commands needed to be reran\r\n  - execute commands, while either checking out those commits in case of no `--use-current-state` or just replacing input files with symlinks to their keys as discovered by traversing the history\r\n\r\nEven without `rerun` I think it could be quite neat!  paired with the power of `git reset [--hard]` and `git commit --amend` I think I might use it pretty much for anything I would run in that repository ;) And then rerun could come handy as well.  There could be additional options\r\n\r\n- `--branch=name` to rerun in a specific branch, may be even cherry picking (or even rerunning?) commits which do not have anything to do with this file.  This way we could later compare, similar to testkraut, at which step diversion happened etc while reproducing a full history\r\n\r\n", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/1650/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/1650/timeline", "performed_via_github_app": null}