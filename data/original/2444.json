{"url": "https://api.github.com/repos/datalad/datalad/issues/2444", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/2444/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/2444/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/2444/events", "html_url": "https://github.com/datalad/datalad/issues/2444", "id": 317616610, "node_id": "MDU6SXNzdWUzMTc2MTY2MTA=", "number": 2444, "title": "str(x) should be avoided: a case in metadata", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-04-25T12:57:38Z", "updated_at": "2018-04-25T12:57:38Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "#### What is the problem?\r\n\r\nThrough out the code we have plenty of use of `str(...)` but typically it is not depicting actual intended semantic since it differs critically between python 2 and 3: in python 2 it would return a `str` which is a \"byte string\" and in 3 - a string which is `unicode`.  Typically we use `str` for a wild/automagic conversion of anything to some kind of a string, and I guess  typically intending to get a unicode string.  A \"typical\" failure prone use-case then would be to `str(a_unicode_string)` in Python 2, which would try to encode that unicode into a byte string.  Here is e.g. a fresh failure while trying to aggregate meta-data\r\n\r\n```\r\n  File \"/home/yoh/proj/datalad/datalad-neuroimaging/venvs/dev/local/lib/python2.7/site-packages/datalad/metadata/metadata.py\", line 559, in _get_metadata\r\n    for k, v in unique_cm.items()\r\n  File \"/home/yoh/proj/datalad/datalad-neuroimaging/venvs/dev/local/lib/python2.7/site-packages/datalad/metadata/metadata.py\", line 565, in <dictcomp>\r\n    if v is None or (v and not v == {''})}\r\n  File \"/home/yoh/proj/datalad/datalad-neuroimaging/venvs/dev/local/lib/python2.7/site-packages/datalad/metadata/metadata.py\", line 586, in _unique_value_key\r\n    return str(x)\r\nUnicodeEncodeError: 'ascii' codec can't encode character u'\\u2019' in position 2356: ordinal not in range(128)\r\n()\r\n> /home/yoh/proj/datalad/datalad-neuroimaging/venvs/dev/local/lib/python2.7/site-packages/datalad/metadata/metadata.py(586)_unique_value_key()\r\n-> return str(x)\r\n(Pdb) p x\r\nu'Behavioral participants... staircase\\u2019s starti...'\r\n```\r\n\r\nI think we should hunt those uses and replace them with something like what we have in `search` atm:\r\n```python\r\nif PY3:\r\n    unicode_srctypes = string_types + (bytes,)\r\n    str_contructor = str\r\nelse:\r\n    unicode_srctypes = string_types\r\n    str_contructor = unicode\r\n\r\n\r\ndef _any2unicode(val):\r\n    if val is None:\r\n        return u''\r\n    return str_contructor(val) \\\r\n        if isinstance(val, (int, float, tuple, list, dict)) \\\r\n        else assure_unicode(val)\r\n```\r\nwhich imho might be generalized to not just cover a list of types but deal explicitly with `binary_type` (apply `assure_unicode`), do not do anything to `text_type` and apply `str_constructor` to anything else.  Will implement that for the fix of the above current crash", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/2444/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/2444/timeline", "performed_via_github_app": null}