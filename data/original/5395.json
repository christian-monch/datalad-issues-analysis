{"url": "https://api.github.com/repos/datalad/datalad/issues/5395", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/5395/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/5395/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/5395/events", "html_url": "https://github.com/datalad/datalad/issues/5395", "id": 797717175, "node_id": "MDU6SXNzdWU3OTc3MTcxNzU=", "number": 5395, "title": "Thoughts on scalable computing bottleneck", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 385404347, "node_id": "MDU6TGFiZWwzODU0MDQzNDc=", "url": "https://api.github.com/repos/datalad/datalad/labels/for%20our%20information", "name": "for our information", "color": "fbca04", "default": false, "description": "Announcement-type issues (possibly inconsequential)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-01-31T13:56:11Z", "updated_at": "2021-08-19T07:44:03Z", "closed_at": "2021-08-19T07:44:03Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The computing setup that eventually led to #5393 made me think about bootlenecks and ways to avoid them. Here is a brief summary of that setup:\r\n\r\n- there is a RIA store with a (single) dataset that will receive the output of each of 40k compute jobs\r\n- all compute jobs are in-principle independent of each other (each consumes different data and writes different output files than any other job\r\n- a job does\r\n  1) clone from RIA store\r\n  2) create job-specific branch\r\n  3) pull inputs from subdataset\r\n  4) compute via `containers-run` and capture outputs\r\n  5) push results (new branch, and git-annex) back to `origin` in the RIA store, and push file content to an ORA special remote (pointing to the same store)\r\n\r\nProblem\r\n\r\n- steps 1 and 5 operate on a single git repo (in the RIA store), and must be protected by a global lock (across all jobs)\r\n- due to #5393 (and possibly other effects) step 1 takes longer and longer with an increasing number of job results pushed back to `origin` in the RIA store (started at 5s, approached 3min after 30k jobs, with daily `git gc` runs at origin)\r\n- because of the global lock, job start and completion quickly consume more time that the net compute time of a job (steps 2-4, ~1h)\r\n\r\nPossible alternative\r\n\r\nThings should be much faster when jobs do not produce output that needs to be sync'ed across jobs (which needs to happen in step 5 with the git-annex branch, it always implies a merge of the latest state, and as #5393 illustrates there is useful and not useful information accumulating in that branch with each job).\r\n\r\nSo maybe it could go like this -- only changing step 5:\r\n\r\nInstead of pushing file content to the store, and two branches (job output branch and git-annex), we only\r\n\r\n- push the file content (no need to sync/lock across jobs as there are no concurrency problems)\r\n- push the job output branch only (to capture which annex keys belong to the output)\r\n\r\nWe do not push (hence also avoid syncing with `origin`'s `git-annex` branch). This will prevent adequate file availability records accumulating at `origin`. However, that accumulation is the problem. And we can easily create uptodate records by running a `git annex fsck -f ora-remote-in-store --fast` at the very end of computation.\r\n\r\nNow we can do one more change and should maximize speed. We can have two store locations:\r\n\r\n- one for the starting point of the computation -- each job clones from here\r\n- one for the output, where the job specific output branches accumulate\r\n\r\nWith this setup, the same (tiny) starting state is cloned (<2s), and there is no cumulative slowdown with increasing number of output branches. NB: We cannot use optimizations such as `--singlebranch`, because they will not give us functional datasets (see #5286). The initial clone likely still needs a global lock, but it can be different than the one for pushing results.\r\n\r\nPushing results will not need a global lock for the file content transfer, only the branch push needs to go through a lock. But as there is nothing to merge and each job pushes a unique branch, it should work even without any prior fetch (just configure a remote), hence should be quick (in my concrete case <1s).\r\n\r\nSo there is hope that this change would increase parallelization from an effective 50x to a >1800x (assuming the initial global clone lock is the limiter with 2s) for ~1h jobs.\r\n", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/5395/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/5395/timeline", "performed_via_github_app": null}