{"url": "https://api.github.com/repos/datalad/datalad/issues/3264", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/3264/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/3264/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/3264/events", "html_url": "https://github.com/datalad/datalad/issues/3264", "id": 424484575, "node_id": "MDU6SXNzdWU0MjQ0ODQ1NzU=", "number": 3264, "title": "Command hooks", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 526935563, "node_id": "MDU6TGFiZWw1MjY5MzU1NjM=", "url": "https://api.github.com/repos/datalad/datalad/labels/feedback-desired", "name": "feedback-desired", "color": "fbca04", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 12, "created_at": "2019-03-23T10:04:56Z", "updated_at": "2019-12-21T13:45:32Z", "closed_at": "2019-12-21T13:45:32Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "There is a dilemma between the desire to have a compact API and some customizability of command behavior. Example: `rev-create` does not have  `--text-no-annex`, but it can come handy to be able to get such a setup conveniently.\r\n\r\nI believe a \"hook\" mechanism is one way to have this. Here is an example how a command invocation could look like that could be supported to run a dedicated configuration procedure\r\nafter a dataset got created:\r\n\r\n  `datalad -c datalad.hooks.create-done=cfg_text2git rev-create`\r\n\r\nThis uses our tooling to have a temporary config setting, but of course such a setting could also become part of a dataset/user/system configuration.\r\n\r\nUsing this mechanism would be nice, because we already have a need to improve config override handling for better control of Git/Git-annex behavior within low-level commands (#3246, and various failed attempts along the lines of #3204, #2851, #2818, #905). There we face the exact same issue: desire to fine-tune, without the willingness or ability to explode the API to be able to pass through tons of special-purpose options.\r\n\r\nTODOs if we want to move forward with this:\r\n\r\n- agree on a nomenclature of such config keys. Proposal: as above, with last key segment being `command`-`custom slot name` (where each command describes its slots in its docs)\r\n- agree on a syntax of such config values (plain procedure names, or stringified Python list of  arguments for run-procedure, or ...\r\n\r\nATM we do have `--proc-pre`, `--proc-post` arguments at the cmdline API level, but those do not scale and are hard to use for a specific customization within a larger command. I think they should be removed.\r\n\r\nEventually, we should have the ability to define criteria to detect specific results that pass through our main \"event-loop\", and to trigger specific actions/hooks. However, until we have that, I see no problem in implementing the execution of an initial set of hooks (like the example above) within individual command implementations. Importantly, those should merely define the position of a hook within the processing flow of a command, but not the nature of an intervention. So in the above example we simply have a loop over `ds.config.get('datalad.hooks.create-done')` where `run-procedure` is called for each value.\r\n\r\nPossible use-cases to inform development\r\n- populate git-annex metadata for added files (e.g. annotate with `distribution-restrictions` key=value pairs).  ATM [there is no way AFAIK](http://git-annex.branchable.com/git-annex-metadata/#comment-fde59930f108af0fff842f5e25351e93) to do so via `.gitattributes`", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/3264/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/3264/timeline", "performed_via_github_app": null}