{"url": "https://api.github.com/repos/datalad/datalad/issues/3789", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/3789/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/3789/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/3789/events", "html_url": "https://github.com/datalad/datalad/issues/3789", "id": 506798409, "node_id": "MDU6SXNzdWU1MDY3OTg0MDk=", "number": 3789, "title": "Adding return-type-based methods to GitRepo", "user": {"login": "kyleam", "id": 1297788, "node_id": "MDQ6VXNlcjEyOTc3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyleam", "html_url": "https://github.com/kyleam", "followers_url": "https://api.github.com/users/kyleam/followers", "following_url": "https://api.github.com/users/kyleam/following{/other_user}", "gists_url": "https://api.github.com/users/kyleam/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyleam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyleam/subscriptions", "organizations_url": "https://api.github.com/users/kyleam/orgs", "repos_url": "https://api.github.com/users/kyleam/repos", "events_url": "https://api.github.com/users/kyleam/events{/privacy}", "received_events_url": "https://api.github.com/users/kyleam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2019-10-14T18:05:48Z", "updated_at": "2019-10-19T06:50:22Z", "closed_at": "2019-10-19T06:50:22Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This is bringing up a topic that I mentioned on the call where we were talking about how we should handle changes to the GitRepo class (and is essentially elaborating on [this old comment of mine][0]).  I think trying to provide lots of methods that wrap different Git subcommands is a painful approach.  It leads to us adding a one-off methods that do the bare minimum for the use case we have at that time.  That is a good thing if the code is meant to be used internally because there's no point in trying to support and test knobs we don't need (and git commands sure do have lots of knobs).  But it doesn't make for a nice external interface, and it leads to churn and incompatibilities when we later need to extend the method for another use case.\r\n\r\nMy preference instead would be to move towards having a restricted set of methods where our wrapping is really adding something to the plain git calls (`get_content_info` and friends are perhaps the nicest examples of this).  For many other things, I don't think we need a dedicated method for the subcommand.  Instead we can have a few methods that wrap specific kinds of calls.  Here are some examples, ignore some arguments like `expect_stderr` that we'd probably need.  (I didn't give the names much thought, so just consider them placeholders; they mostly follow magit, which has a nice set of functions like this.)\r\n\r\n  * `.call_git(args, files=None)` => None\r\n\r\n    Call git for side effects, letting the CommandError through if it's raised.\r\n\r\n    Example:\r\n    `.tag(\"name\", message=\"msg\")` => `.call_git([\"tag\", \"-m\", \"msg\", \"name\"])`\r\n\r\n\r\n  * `.git_success(args, files=None)` => boolean\r\n\r\n    Call git for the exit code.  Return False for non-zero exits.\r\n\r\n    Example:\r\n    `is_ancestor(\"a\", \"b\")` => `.git_success([\"merge-base\", \"--is-ancestor\", \"a\", \"b\"])`\r\n\r\n  * `.git_lines(args, files=None)` => list of str\r\n\r\n     Call git for newline-separated output, letting the CommandError through if it's raised.\r\n\r\n  * `.git_str(args, files=None)` => str\r\n\r\n     Call git for a single line of output, letting the CommandError through if it's raised.  Raise an error if output is more than a single line.\r\n\r\n  * `.git_items(args, files=None)` => list of str\r\n\r\n     Call git for null-separated output, letting the CommandError through if it's raised.\r\n\r\nI think introducing these would have the following benefits:\r\n\r\n  * It is a set of commands that we can offer to third-party callers if they need a command that we don't have but still want to call git through us.\r\n\r\n  * Likewise, it is a set of commands we can use to avoid adding one-off methods.\r\n\r\n  * We already use `_git_custom_command` in many spots outside of gitrepo.py to avoid adding more methods to GitRepo.  These new methods would simplify these calls.\r\n\r\n  * If we decide to deprecate a method or change it in an incompatible way, we can point to these methods as an alternative.\r\n\r\nI'm not suggesting that we rip out the old methods that we already have.  I'm suggesting that, by adding this return-value based methods, we could avoid needlessly adding methods in the future.  When we have a new case that calls for a method (e.g., we need special error handling or processing of the results), we should of course still add the method.\r\n\r\nThoughts?\r\n\r\n[0]: https://github.com/datalad/datalad/issues/2879#issuecomment-426759137\r\n", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/3789/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/3789/timeline", "performed_via_github_app": null}