{"url": "https://api.github.com/repos/datalad/datalad/issues/5181", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/5181/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/5181/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/5181/events", "html_url": "https://github.com/datalad/datalad/issues/5181", "id": 747768590, "node_id": "MDU6SXNzdWU3NDc3Njg1OTA=", "number": 5181, "title": "install.py: implement more flexible/modular but also easy on user parsing schema", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jwodder", "id": 98207, "node_id": "MDQ6VXNlcjk4MjA3", "avatar_url": "https://avatars.githubusercontent.com/u/98207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwodder", "html_url": "https://github.com/jwodder", "followers_url": "https://api.github.com/users/jwodder/followers", "following_url": "https://api.github.com/users/jwodder/following{/other_user}", "gists_url": "https://api.github.com/users/jwodder/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwodder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwodder/subscriptions", "organizations_url": "https://api.github.com/users/jwodder/orgs", "repos_url": "https://api.github.com/users/jwodder/repos", "events_url": "https://api.github.com/users/jwodder/events{/privacy}", "received_events_url": "https://api.github.com/users/jwodder/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jwodder", "id": 98207, "node_id": "MDQ6VXNlcjk4MjA3", "avatar_url": "https://avatars.githubusercontent.com/u/98207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwodder", "html_url": "https://github.com/jwodder", "followers_url": "https://api.github.com/users/jwodder/followers", "following_url": "https://api.github.com/users/jwodder/following{/other_user}", "gists_url": "https://api.github.com/users/jwodder/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwodder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwodder/subscriptions", "organizations_url": "https://api.github.com/users/jwodder/orgs", "repos_url": "https://api.github.com/users/jwodder/repos", "events_url": "https://api.github.com/users/jwodder/events{/privacy}", "received_events_url": "https://api.github.com/users/jwodder/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 9, "created_at": "2020-11-20T20:18:35Z", "updated_at": "2020-12-11T01:30:58Z", "closed_at": "2020-12-11T01:30:57Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "initial `install.py` (and shell prototype it was based on) was targeting 1 component (git-annex) and then miniconda was added as an individual component but overall parsing was not yet refactored, and now looks like\r\n\r\n```\r\nschema:\r\n  Type of git-annex installation (default \"conda-forge\")\r\n\r\n  {autobuild,brew,conda-forge,conda-forge-last,datalad-extensions-build,deb-url,neurodebian,neurodebian-devel,snapshot,miniconda}\r\n```\r\n\r\nIt think we are at a good point to RF it along the lines proposed in https://github.com/datalad/datalad/issues/5078 (and somewhat inspired by neurodocker , check it out)\r\n\r\n``` [--options-applied-to-all] COMPONENT1[=version] [--options] COMPONENT2[=version] [--options] ...```\r\n\r\nor more specifically\r\n\r\n``` [--options-applied-to-all] COMPONENT1[=version] [--options] [--schema X] [--schemaoptions] COMPONENT2[=version]...```\r\n\r\nwhere current target components should be (adding `venv`, I think it is time -- could come handy for testing PRs etc)\r\n\r\n- miniconda\r\n- venv\r\n- git-annex\r\n- datalad\r\n\r\namong `--options`, both datalad and git-annex should get `--schema` option (thus I listed it explicitly above), which would be \"auto\" by default, and otherwise allow for following \"schemas\":\r\n\r\n- datalad\r\n  - apt\r\n  - conda\r\n  - deb-url\r\n  - neurodebian\r\n  - neurodebian-devel\r\n  - pip\r\n- git-annex\r\n  - apt\r\n  - autobuild\r\n  - brew\r\n  - conda\r\n  - ~~conda-last  # or let's drop it as not used ATM anyways and not to be sourced?~~\r\n  - datalad/annex  # from datalad-extensions-build since we moved\r\n  - deb-url\r\n  - neurodebian\r\n  - neurodebian-devel\r\n  - snapshot\r\n\r\nsome of those (conda-forge, pip, apt) should use specific `[=VERSION]` if specified, the others should raise some exception.\r\n\r\nwe can decouple installation of git-annex from installation of miniconda, i.e. if it is `install.py git-annex --schema conda-forge` and prior `miniconda` component which would install miniconda and make `conda` available, and there is no `conda` in the PATH  -- it is ok to just exit with an exception if conda is not available.  Ideally it should be a dedicated common exception like `IncompatibleEnvrionmentError(ValueError) ` (similar exception for e.g trying neurodebian install on OSX etc). \r\n\r\nInstallation of a component could lead to \r\n- tune up of PATH (or other env vars) so whenever we get to the next one, it might be operating in the environment reflecting prior actions. Implementation -- may be there could/should be a persistent shell session or otherwise could use approach I coded in reproman (I can point to if we see it needed), or do some other way (composite command which would first `source` some env vars file produced by `install` to accumulate those chages)\r\n- some components (miniconda ATM, later may be `venv`) would prepend to the \"auto_schema\" internal list (which is initiated with \"native\")\r\n\r\nas a result, after `miniconda` component installation, `PATH` in subsequent invocations should have corresponding conda environment in there, and `auto_schema` should become `['conda', 'native']`\r\n\r\nif `schema == \"auto\"` when considering a COMPONENT, it should consults auto_schema in that order.  If 'native' -- check for the first known to that component order from user to system level conda/apt/neurodebian/brew/standalone and for which there is no `IncompatibleEnvironmentError` raised.\r\n\r\n`conda` schema should probably just pass all `--schemaoptions`  (all subsequent with start with `-` until it hits something without `-`) to underlying `conda install -c conda-forge ... COMPONENT` call, so I could just add `--only-deps`, `--update-all,` or alike.\r\n\r\nAn additional COMPONENT (was thinking to make it an option for miniconda, but would make it not flexible):\r\n- `conda-env` with `-n|--name NAME` and `-p|--package_spec SPEC` so it would create a conda environment as well (providing package_specs to `conda create -n NAME` ), and adjust env etc, so all subsequent installations would just be done in that environment (i do not see when we might need git-annex and datalad installed in different, so not worth per package), or could be a separate component.\r\n\r\nSo a few ultimate examples\r\n- `install.py datalad` (or git-annex) on my laptop whenever I am not in any venv conda should just end up running `sudo apt-get install datalad` (or git-annex), and it would install it in `conda` if I am in conda, or using `brew` if I am on OSX with brew, \r\n\r\n- `install.py miniconda --path-miniconda /tmp/mini conda-env -n datalad-dev datalad` - would install datalad (and thus git-annex and what not) in a new miniconda within datalad-dev environment\r\n\r\n- `install.py miniconda -p python=3.9 datalad --only-dep` - would install datalad dependencies only (and thus git-annex and what not) in a new miniconda with python 3.9 for which it would tell me the PATH, so I could enter that env and do `pip install -e .` on the code base\r\n\r\n- `install.py venv datalad=0.13.2` - create a new temp venv with pip installed old datalad\r\n\r\nWDYT, sounds sensible or too complicated? ;-)", "closed_by": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/5181/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/5181/timeline", "performed_via_github_app": null}