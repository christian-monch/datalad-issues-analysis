{"url": "https://api.github.com/repos/datalad/datalad/issues/6024", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/6024/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/6024/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/6024/events", "html_url": "https://github.com/datalad/datalad/issues/6024", "id": 1012008037, "node_id": "I_kwDOANZqws48UgRl", "number": 6024, "title": "Test failures regarding version and user (heaps of fixture errors, more in text)", "user": {"login": "TheChymera", "id": 950524, "node_id": "MDQ6VXNlcjk1MDUyNA==", "avatar_url": "https://avatars.githubusercontent.com/u/950524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheChymera", "html_url": "https://github.com/TheChymera", "followers_url": "https://api.github.com/users/TheChymera/followers", "following_url": "https://api.github.com/users/TheChymera/following{/other_user}", "gists_url": "https://api.github.com/users/TheChymera/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheChymera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheChymera/subscriptions", "organizations_url": "https://api.github.com/users/TheChymera/orgs", "repos_url": "https://api.github.com/users/TheChymera/repos", "events_url": "https://api.github.com/users/TheChymera/events{/privacy}", "received_events_url": "https://api.github.com/users/TheChymera/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2021-09-30T10:33:31Z", "updated_at": "2021-10-02T21:27:38Z", "closed_at": "2021-10-01T09:25:46Z", "author_association": "CONTRIBUTOR", "active_lock_reason": null, "body": "The test suite (full log) is down to 3 failures, which seem mostly cosmetic:\r\n\r\n```\r\n=================================== FAILURES ===================================\r\n______________________________ test_script_shims _______________________________\r\n\r\n    def test_script_shims():\r\n        runner = Runner()\r\n        for script in [\r\n            'datalad',\r\n            'git-annex-remote-datalad-archives',\r\n            'git-annex-remote-datalad']:\r\n            if not on_windows:\r\n                # those must be available for execution, and should not contain\r\n                which = runner.run(['which', script], protocol=StdOutErrCapture)['stdout']\r\n                # test if there is no easy install shim in there\r\n                with open(which.rstrip()) as f:\r\n                    content = f.read()\r\n            else:\r\n                from distutils.spawn import find_executable\r\n                content = find_executable(script)\r\n\r\n            # and let's check that it is our script\r\n            out = runner.run([script, '--version'], protocol=StdOutErrCapture)\r\n            version = out['stdout'].rstrip()\r\n            mod, version = version.split(' ', 1)\r\n            assert_equal(mod, 'datalad')\r\n            # we can get git and non git .dev version... so for now\r\n            # relax\r\n            get_numeric_portion = lambda v: [x for x in re.split('[+.]', v) if x.isdigit()]\r\n            # extract numeric portion\r\n            assert get_numeric_portion(version), f\"Got no numeric portion from {version}\"\r\n>           assert_equal(get_numeric_portion(__version__),\r\n                         get_numeric_portion(version))\r\n\r\ndatalad/cmdline/tests/test_main.py:227:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/usr/lib/python3.9/unittest/case.py:829: in assertEqual\r\n    assertion_func(first, second, msg=msg)\r\n/usr/lib/python3.9/unittest/case.py:1035: in assertListEqual\r\n    self.assertSequenceEqual(list1, list2, msg, seq_type=list)\r\n/usr/lib/python3.9/unittest/case.py:1017: in assertSequenceEqual\r\n    self.fail(msg)\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <nose.tools.trivial.Dummy testMethod=nop>\r\nmsg = \"Lists differ: ['0', '2', '2', '11708'] != ['0', '15', '0']\\n\\nFirst differing element 1:\\n'2'\\n'15'\\n\\nFirst list contains 1 additional elements.\\nFirst extra element 3:\\n'11708'\\n\\n- ['0', '2', '2', '11708']\\n+ ['0', '15', '0']\"\r\n\r\n    def fail(self, msg=None):\r\n        \"\"\"Fail immediately, with the given message.\"\"\"\r\n>       raise self.failureException(msg)\r\nE       AssertionError: Lists differ: ['0', '2', '2', '11708'] != ['0', '15', '0']\r\nE\r\nE       First differing element 1:\r\nE       '2'\r\nE       '15'\r\nE\r\nE       First list contains 1 additional elements.\r\nE       First extra element 3:\r\nE       '11708'\r\nE\r\nE       - ['0', '2', '2', '11708']\r\nE       + ['0', '15', '0']\r\n\r\n/usr/lib/python3.9/unittest/case.py:668: AssertionError\r\n______________________________ test_global_config ______________________________\r\n\r\n    def test_global_config():\r\n\r\n        # from within tests, global config should be read from faked $HOME (see\r\n        # setup_package)\r\n        glb_cfg_file = Path(os.path.expanduser('~')) / '.gitconfig'\r\n        assert any(glb_cfg_file.samefile(Path(p)) for p in dl_cfg._stores['git']['files'])\r\n>       assert_equal(dl_cfg.get(\"user.name\"), \"DataLad Tester\")\r\n\r\ndatalad/tests/test_config.py:612:\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n/usr/lib/python3.9/unittest/case.py:829: in assertEqual\r\n    assertion_func(first, second, msg=msg)\r\n/usr/lib/python3.9/unittest/case.py:1209: in assertMultiLineEqual\r\n    self.fail(self._formatMessage(msg, standardMsg))\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\r\n\r\nself = <nose.tools.trivial.Dummy testMethod=nop>\r\nmsg = \"'Horea Christian' != 'DataLad Tester'\\n- Horea Christian\\n+ DataLad Tester\\n\"\r\n\r\n    def fail(self, msg=None):\r\n        \"\"\"Fail immediately, with the given message.\"\"\"\r\n>       raise self.failureException(msg)\r\nE       AssertionError: 'Horea Christian' != 'DataLad Tester'\r\nE       - Horea Christian\r\nE       + DataLad Tester\r\n\r\n/usr/lib/python3.9/unittest/case.py:668: AssertionError\r\n\r\n_______________________________ test__version__ ________________________________\r\n\r\n    def test__version__():\r\n        # in released stage, version in the last CHANGELOG entry\r\n        # should correspond to the one in datalad\r\n        CHANGELOG_filename = op.join(\r\n            op.dirname(__file__), op.pardir, op.pardir, 'CHANGELOG.md')\r\n        if not op.exists(CHANGELOG_filename):\r\n            raise SkipTest(\"no %s found\" % CHANGELOG_filename)\r\n        regex = re.compile(r'^# '\r\n                           r'(?P<version>[0-9]+\\.[0-9.abcrc~]+)\\s+'\r\n                           r'\\((?P<date>.*)\\)'\r\n                           )\r\n        with open(CHANGELOG_filename, 'rb') as f:\r\n            for line in f:\r\n                line = line.rstrip()\r\n                if not line.startswith(b'# '):\r\n                    # The first section header we hit, must be our changelog entry\r\n                    continue\r\n                reg = regex.match(ensure_unicode(line))\r\n                if not reg:  # first one at that level is the one\r\n                    raise AssertionError(\r\n                        \"Following line must have matched our regex: %r\" % line)\r\n                regd = reg.groupdict()\r\n                changelog_version = regd['version']\r\n                lv_changelog_version = LooseVersion(changelog_version)\r\n                # we might have a suffix - sanitize\r\n                san__version__ = __version__.rstrip('.dirty')\r\n                lv__version__ = LooseVersion(san__version__)\r\n                if '???' in regd['date'] and 'will be better than ever' in regd['codename']:\r\n                    # we only have our template\r\n                    # we can only assert that its version should be higher than\r\n                    # the one we have now\r\n                    assert_greater(lv_changelog_version, lv__version__)\r\n                else:\r\n                    # should be a \"release\" record\r\n                    assert_not_in('???', regd['date'])\r\n>                   ok_startswith(__version__, changelog_version)\r\n\r\ndatalad/tests/test_version.py:63: \r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\ndatalad/tests/utils.py:435: in ok_startswith\r\n    ok_(s.startswith(prefix),\r\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \r\n\r\nexpr = False\r\nmsg = \"String '0.2.2+11708.gb0f00c2a2' doesn't start with '0.15.0'\"\r\n\r\n    def ok_(expr, msg=None):\r\n        \"\"\"Shorthand for assert. Saves 3 whole characters!\r\n        \"\"\"\r\n        if not expr:\r\n>           raise AssertionError(msg)\r\nE           AssertionError: String '0.2.2+11708.gb0f00c2a2' doesn't start with '0.15.0'\r\n```\r\n\r\nNot sure why it gets confused about the version and tells me that `'Horea Christian' != 'DataLad Tester'`, which I clearly am :)\r\n\r\nIn addition, however, there are a few hundred errors (not failures), mainly related to fixtures. I assume it might need either the `dev-python/pytest-fixture-config` or the `dev-python/fixtures` package, but neither is listed as a dep as far as I could tell.\r\n\r\n@yarikoptic\r\nSorry for asking re deps when I could do trial and error, but the test suite takes for ever...\r\n\r\nAs far as I've gotten through the handbook, it behaves as expected fwiw.", "closed_by": {"login": "TheChymera", "id": 950524, "node_id": "MDQ6VXNlcjk1MDUyNA==", "avatar_url": "https://avatars.githubusercontent.com/u/950524?v=4", "gravatar_id": "", "url": "https://api.github.com/users/TheChymera", "html_url": "https://github.com/TheChymera", "followers_url": "https://api.github.com/users/TheChymera/followers", "following_url": "https://api.github.com/users/TheChymera/following{/other_user}", "gists_url": "https://api.github.com/users/TheChymera/gists{/gist_id}", "starred_url": "https://api.github.com/users/TheChymera/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/TheChymera/subscriptions", "organizations_url": "https://api.github.com/users/TheChymera/orgs", "repos_url": "https://api.github.com/users/TheChymera/repos", "events_url": "https://api.github.com/users/TheChymera/events{/privacy}", "received_events_url": "https://api.github.com/users/TheChymera/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/6024/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/6024/timeline", "performed_via_github_app": null}