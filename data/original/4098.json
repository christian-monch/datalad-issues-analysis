{"url": "https://api.github.com/repos/datalad/datalad/issues/4098", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/4098/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/4098/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/4098/events", "html_url": "https://github.com/datalad/datalad/issues/4098", "id": 556096547, "node_id": "MDU6SXNzdWU1NTYwOTY1NDc=", "number": 4098, "title": "Observations on inconsistent handling of relative paths across python commands", "user": {"login": "adswa", "id": 29738718, "node_id": "MDQ6VXNlcjI5NzM4NzE4", "avatar_url": "https://avatars.githubusercontent.com/u/29738718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adswa", "html_url": "https://github.com/adswa", "followers_url": "https://api.github.com/users/adswa/followers", "following_url": "https://api.github.com/users/adswa/following{/other_user}", "gists_url": "https://api.github.com/users/adswa/gists{/gist_id}", "starred_url": "https://api.github.com/users/adswa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adswa/subscriptions", "organizations_url": "https://api.github.com/users/adswa/orgs", "repos_url": "https://api.github.com/users/adswa/repos", "events_url": "https://api.github.com/users/adswa/events{/privacy}", "received_events_url": "https://api.github.com/users/adswa/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1576438293, "node_id": "MDU6TGFiZWwxNTc2NDM4Mjkz", "url": "https://api.github.com/repos/datalad/datalad/labels/relative%20paths", "name": "relative paths", "color": "f990a0", "default": false, "description": "Issue related to the treatment of relative path specifications"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-01-28T09:54:38Z", "updated_at": "2020-03-11T14:46:44Z", "closed_at": "2020-03-11T14:46:44Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "When I updated command examples to consistently include ``dataset=`` for the Python API following https://github.com/datalad/datalad/pull/4091#discussion_r371304348, I noticed inconsistent interpretations of ``path=<some/path/>`` between Python functions. Some interpret it as relative to ``dataset=<some/path>``, and some not.\r\n\r\nI'm aware it is a known issue, but I wanted to write down  which commands treat paths in which way when the dataset specification is a path (and not a dataset instance).\r\n\r\n\r\nI had an ipython instance in ``/tmp`` and used the Python API to work with a dataset `/tmp/super`, created like this in ``/tmp``:\r\n```\r\nfrom datalad.api import create, Dataset\r\n# create dataset (with path)\r\ncreate(path=\"super\")\r\n# also have a Dataset instance for it\r\nds = Dataset('super') \r\n```\r\nI checked the commands `create`,`save`,`unlock`,`download_url`, `get`, `clone`, `run`, `rerun`, `uninstall`, `diff`,`run-procedure`, `remove`, `drop`, `publish`, `siblings` (the latter four are the odd ones out)\r\n\r\n\r\n#### Behavior when dataset is a path (not dataset instance)\r\n\r\nPaths are **not** interpreted as relative to the dataset root in the following commands :\r\n- ``create`` (i.e., subdataset creation fails here: ``create(dataset='super', path='sub')``)\r\n- ``save`` (i.e., saving a file `file1` in ``super`` fails here: ``save(dataset='super', path='file1'``)\r\n- ``unlock`` (i.e, unlocking a file `file1` in `super` fails here: ``unlock(dataset='super', path='file1')``\r\n- ``download_url`` (i.e, downloading a file and saving it as `downloadfile` in `super` fails here: ``download_url(dataset='super', urls='https://raw.githubusercontent.com/datalad/datalad.org/7e8e39b1f08d0a54ab521586f27ee918b4441d69/content/asciicast/seamless_nested_repos.sh', message=\"did yx\", path='downloadfile')``\r\n- ``get`` (i.e., reobtaining a downloaded file ``downloadfile`` from `super` fails here: ``get(dataset='super', path='downloadfile')``\r\n- ``clone``, (i.e., installing a subdataset `podcasts` into super fails here: ``clone(dataset='super', source='https://github.com/datalad-datasets/longnow-podcasts.git', path='podcasts')``\r\n- ``run``, (i.e, running `mv file1 file_1` fails here: `run(dataset='super', cmd='mv file1 file_1', outputs='file1')`\r\n- ``rerun`` simply says ``No lines in history match specification`` after `rerun(dataset='super')` (see details at the end of this issue)\r\n- `uninstall` (i.e., uninstalling ``podcasts`` fails here: ``uninstall(dataset='super', path='podcasts')``)\r\n- ``diff`` (i.e., getting the diff on ``anotherfile`` in ``super`` fails here: `diff(dataset='super', path='anotherfile')`\r\n\r\n- a bit unrelated, but ``run-procedure`` works regardless of how I specify the dataset: ``run_procedure(dataset='super', spec='cfg_text2git')``\r\n\r\nPaths are interpreted as **relative** to the dataset root (specified as a string with ``dataset=``) in following commands:\r\n- ``remove`` (i.e., removing a subdataset `podcasts` from `super` works here: ``remove(dataset='super', path='podcasts')``\r\n- ``drop`` (i.e., dropping a file ``downloadfile`` from `super` works here: ``drop(dataset='super', path='downloadfile')``)\r\n- ``siblings``. I created ``/tmp/super_sibling`` (my dataset is ``/tmp/super``, ipython runs in ``/tmp``). Adding a sibling with a relative path works here: \r\n```\r\nsiblings(action='add', dataset='super', name='sibling-local', url='../super_sibling')                                                                     \r\n.: sibling-local(+) [../super_sibling (git)]\r\nOut[95]: \r\n[{'action': 'add-sibling',\r\n  'path': '/tmp/super',\r\n  'type': 'sibling',\r\n  'name': 'sibling-local',\r\n  'url': '../super_sibling',\r\n  'fetch': '+refs/heads/*:refs/remotes/sibling-local/*',\r\n  'annex-uuid': '172fb4d5-9b59-4f9e-ac05-66d65d161ce2',\r\n  'annex-ignore': 'false',\r\n  'annex-description': 'sibling-local',\r\n  'status': 'ok',\r\n  'refds': '/tmp/super'}]\r\n\r\n```\r\nIf I add a sibling with a path relative to the location my ipython instance runs from, it gets it wrong (sibling is wrongly under `super/super_sibling2` after this):\r\n```\r\nsiblings(action='add', dataset='super', name='sibling-local2', url='super_sibling2')                                                                      \r\n[INFO   ] Failed to enable annex remote sibling-local2, could be a pure git or not accessible \r\n[WARNING] Failed to determine if sibling-local2 carries annex. \r\n.: sibling-local2(-) [super_sibling2 (git)]\r\nOut[97]: \r\n[{'action': 'add-sibling',\r\n  'path': '/tmp/super',\r\n  'type': 'sibling',\r\n  'name': 'sibling-local2',\r\n  'url': 'super_sibling2',\r\n  'fetch': '+refs/heads/*:refs/remotes/sibling-local2/*',\r\n  'annex-ignore': True,\r\n  'status': 'ok',\r\n  'refds': '/tmp/super'}]\r\n\r\n```\r\n- ``publish`` (i.e., this works: ``publish(dataset='super', path='file_1', to='sibling-local')``\r\n\r\n________________________________________________________\r\n\r\n<details><summary>Just for completeness: if dataset= gets a dataset instance or if the command is used as a dataset method, paths are interpreted as relative</summary>\r\n_______________________________________________________\r\n\r\n#### Behavior when dataset is dataset instance\r\n\r\nPaths are interpreted as **relative** to the dataset root (specified as a dataset instance with ``dataset=``) in all commands I have tried:\r\n- ``create(dataset=ds, path='sub')``\r\n- ``save(dataset=ds, path='file1')``\r\n- ``unlock(dataset=ds, path='file1')``\r\n- ``download_url(dataset=ds, urls='https://raw.githubusercontent.com/datalad/datalad.org/7e8e39b1f08d0a54ab521586f27ee918b4441d69/content/asciicast/seamless_nested_repos.sh', message=\"did yx\", path='downloadfile')``\r\n- ``clone(dataset=ds, source='https://github.com/datalad-datasets/longnow-podcasts.git', path='podcasts')``\r\n-  ``drop(dataset=ds, path='downloadfile')``\r\n- ``remove(dataset=ds, path='sub')`` \r\n- ``get(dataset=ds, path='downloadfile')``\r\n-`` run(dataset=ds, cmd='mv file1 file_1', outputs='file1') ``\r\n- ``rerun`` simply says ``No lines in history match specification`` after `rerun(dataset=ds)` (see details at the end of this issue)\r\n- ``uninstall(dataset=ds, path='podcasts')``\r\n- ``siblings(action='add', dataset=ds, name='sibling-local', url='../super_sibling')``\r\n- ``publish(dataset=ds', path='file_1', to='sibling-local')``\r\n- `diff(dataset=ds, path='anotherfile') `\r\n\r\n_______________________________________________________\r\n#### Behavior when using a dataset method instead of function\r\n\r\nPaths are interpreted as **relative** to the dataset root when used as a dataset method in all commands I have tried:\r\n- ``ds.create(path='sub')``\r\n- ``ds.save(path='file1')``\r\n- ``ds.unlock(path='file1')``\r\n- ``ds.download_url(urls='https://raw.githubusercontent.com/datalad/datalad.org/7e8e39b1f08d0a54ab521586f27ee918b4441d69/content/asciicast/seamless_nested_repos.sh', message=\"did yx\", path='downloadfile')``\r\n- ``drop(dataset=ds, path='downloadfile')``\r\n- ``ds.clone(source='https://github.com/datalad-datasets/longnow-podcasts.git', path='podcasts')``\r\n- `ds.remove(path='sub')`\r\n- ``ds.get(path='downloadfile')``\r\n- ``ds.run(cmd='mv file1 file_1', outputs='file1')``\r\n- ``ds.siblings(action='add', name='sibling-local', url='../super_sibling')``\r\n- ``ds.publish(path='file_1', to='sibling-local')``\r\n- ``ds.diff(path='anotherfile') ``\r\n\r\n\r\na bit unrelated, but ``run-procedure`` works regardless of how I specify the dataset: ``run_procedure(dataset=ds, spec='cfg_text2git')`` / ``ds.run_procedure(spec='cfg_text2git')``\r\n \r\n</details>\r\n\r\n________________________________________________________\r\n\r\nI think I found an unrelated bug when I wanted to rerun a previous ``run`` command. It does not work when I pass the dataset as a string or -- interestingly -- also a dataset instance, but works if I use the command as a dataset method. When it \"fails\", the it just returns  ``No lines in history match specification`` instead of (what I think should be) complaining about a non-existent dataset.\r\n\r\n<details>\r\n\r\nThis \"fails\" with what I find a misleading message:\r\n```\r\nIn [69]: rerun(dataset='super')                                                       \r\nNo lines in history match specification\r\n\r\nIn [70]: rerun(dataset=ds)                                                            \r\nNo lines in history match specification\r\n```\r\n\r\nworks as dataset method:\r\n\r\n```\r\nds.rerun()                                                                   \r\n[INFO   ] == Command start (output follows) ===== \r\n[...]\r\n```\r\n\r\n</details>\r\nLet me know whether this is a feature or if I should open a new issue about it.", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/4098/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/4098/timeline", "performed_via_github_app": null}