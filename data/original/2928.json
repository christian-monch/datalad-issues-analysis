{"url": "https://api.github.com/repos/datalad/datalad/issues/2928", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/2928/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/2928/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/2928/events", "html_url": "https://github.com/datalad/datalad/issues/2928", "id": 370971536, "node_id": "MDU6SXNzdWUzNzA5NzE1MzY=", "number": 2928, "title": "Need help re symlink handling concept", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778594, "node_id": "MDU6TGFiZWw2Mzc3ODU5NA==", "url": "https://api.github.com/repos/datalad/datalad/labels/question", "name": "question", "color": "fbca04", "default": true, "description": "Issue asks a question rather than reporting a problem"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 15, "created_at": "2018-10-17T09:07:46Z", "updated_at": "2018-10-28T16:59:05Z", "closed_at": "2018-10-28T16:59:05Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I am confused, and the datalad code base seems to share some of that confusion.\r\n\r\nExample:\r\n```\r\nds/\r\n  symlink/ -> subds/dir1/dir2\r\n  subds/\r\n    dir1/\r\n      dir2/\r\n        file\r\n```\r\n\r\nTwo paths to `file` are possible:\r\n- `<pathto_ds>/symlink/file`\r\n- `<pathto_ds>/subds/dir1/dir2/file`\r\n\r\nIf I want to figure out what dataset `file` is in (e.g. to find the dataset to commit it too, or `get_dataset_root()` I always want to find `subds`. Given the above paths, this is only possible when symlinks get resolved. No biggie so far.\r\n\r\nNow what happens, if `pathto_ds` itself contains a symlink, e.g.\r\n- `PWD` is a dir that involves a symlink (we have `dlabspath()` to somewhat deal with this situation, but it doesn't seem to be used consistently)\r\n- `pathto_ds` is an abspath that involves one or more symlinks\r\n\r\nI both cases the symlink resolution above might cause the path to `subds` no longer share a common prefix with the path to `ds`, or with the original query path (at which point a substantial amount of logic in datalad falls apart). Of course, `symlink` could also point completely outside `ds`, in which case this would be \"fine\" and we would want to error in a meaningful way.\r\n\r\nNote, however, that in case of initial path resolution it is unknown whether there is a `ds` or `subds` at all, hence much of the relevant context for specific decision  making isn't yet available and only becomes clear much further down the road, when paths are resolved already and now need to be interpreted.\r\n\r\nBut things might be worse in some cases. While we are not causing this situation ourselves, a repo might be a submodule that has its `.git` in the standard location underneath the `.git` of the parent repo. If we resolve *any* symlink that belongs to an annexed file, it would resolve into another dataset entirely... and leave me in tears.\r\n\r\nSo it looks to me as if:\r\n- we always want to resolve paths with symlinks that point to directories (not the entire path, but any symlink that is a component in that path)\r\n- we never want to resolve paths with symlinks that point to files (same constraint as above)\r\n\r\nTwo further aspects that make things even more complicated:\r\n\r\n1. We are dealing with path requests to things that do not (yet) exist on the file system on a regular basis. In such cases we cannot apply the above decision rules (in full), until the situation can be inspected on in the FS\r\n2. So far we are trying to report result paths in the same reference frame as the input path, e.g. when a dataset is known (instance was created with a path that contains symlinks), symlinks are not resolved.\r\n    This works when a dataset is explicitly given, or if dataset discovery upwards of a path does not hit any symlinks on the way to the first dataset root, but in the general case it does not work (as shown above).\r\n\r\nAs far as I am aware this summaries the root cause of all issues with symlinks in paths that we have. We have a bunch of places that wrangle such paths, and we should condense them to a single one -- but ATM I have no concept of how we should deal with this in general.\r\n\r\nPlease let me know what you think.\r\n\r\nSpecifically:\r\n\r\n- in which cases should we maintain symlinks in reported paths?\r\n- what is a sane symlink resolution logic for an arbitrary input path (when no dataset reference is known yet, i.e. look for the containing dataset as in the initial example), for both absolute and relative paths -- that latter is even trickier IMHO\r\n\r\n### Use of normpath()\r\n\r\nWe are using this approach heavily to simplify paths for \"in-dataset?\" comparisons. But I think this is dangerous (and it least I am not aware of a centralized protection again abuse in datalad). Demo:\r\n\r\n```\r\n% tree\r\n.\r\n\u251c\u2500\u2500 dir1\r\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 dir2\r\n\u2502\u00a0\u00a0     \u2514\u2500\u2500 file\r\n\u2514\u2500\u2500 link -> dir1/dir2\r\n```\r\n\r\nRegardless of whether using absolute paths or relative ones the outcome is always wrong:\r\n\r\n```\r\nIn [2]: op.normpath('link/../dir2/file')\r\nOut[2]: 'dir2/file'\r\n\r\nIn [3]: op.normpath('/tmp/this/link/../dir2/file')\r\nOut[3]: '/tmp/this/dir2/file'\r\n```\r\n\r\nAnd again, in any situation were those paths are not yet available (e.g. if `dir2` is an uninstalled subdataset, we have no chance of detecting such error of judgement).\r\n\r\nI think any use of normpath() is evil when there is any chance that symlinks are involved.\r\n", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/2928/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/2928/timeline", "performed_via_github_app": null}