{"url": "https://api.github.com/repos/datalad/datalad/issues/3010", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/3010/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/3010/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/3010/events", "html_url": "https://github.com/datalad/datalad/issues/3010", "id": 383991265, "node_id": "MDU6SXNzdWUzODM5OTEyNjU=", "number": 3010, "title": "(Config) option to skip/augment metadata (re)extraction if some content is not present etc", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 700886055, "node_id": "MDU6TGFiZWw3MDA4ODYwNTU=", "url": "https://api.github.com/repos/datalad/datalad/labels/metadata", "name": "metadata", "color": "0052cc", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2018-11-24T13:52:12Z", "updated_at": "2019-04-08T06:22:22Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "For many datasets we provide from http://datasets.datalad.org we do keep original data locally so I could simply re-extract/aggregate when extractors change.  But for many we do not keep all the data since it is impossible/expensive.  Ideally it is desired to be able to say\r\n- **skip** (re)extraction if some files are missing content locally. Aggregation could remain to the generic logic thus possibly sticking to the \"old\" state of metadata\r\n- **`get`** the data first and then run extraction. (Optionally?) `drop` the data after done\r\n- reextract using only extractors (well, annex only ATM) which do not need content, which we mark with `NEEDS_CONTENT`. It should only be in effect when it is reextraction, i.e. when metadata for that state was already extracted before.  Since ATM it is of use only for `annex` extractor, not sure how useful it would be in general .\r\n- a bit relaxed above, may be we could allow for reextraction only for a **specified list of extractors**? (e.g. if I want to extract only `annex` extractor metadata)\r\n- **incremental-extraction** . Currently the \"repository state\" includes all the dates in annex metadata into its estimation. Not sure if that is more of a hurdle than of a benefit since now any change in annex metadata state (which wouldn't need content to extract) would demand other extractors to get data to be able to reextract/aggregate metadata without breaking consistency.  In principle though, we could become smart and analyze the `diff` between previous/current states and skip extractors if only the files for which they had no metadata at all were modified/removed.  Could be yet another mode of operation I guess (or built in into default logic)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/3010/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/3010/timeline", "performed_via_github_app": null}