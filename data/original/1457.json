{"url": "https://api.github.com/repos/datalad/datalad/issues/1457", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/1457/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/1457/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/1457/events", "html_url": "https://github.com/datalad/datalad/issues/1457", "id": 220240810, "node_id": "MDU6SXNzdWUyMjAyNDA4MTA=", "number": 1457, "title": "an example of a \"complete\" rfc822 meta data file", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-07T15:03:40Z", "updated_at": "2018-02-10T13:39:04Z", "closed_at": "2018-02-10T13:39:03Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Hi @mih ,\r\n\r\ncontinuing on our brief discussion -- I could try to come up with some `metadata-edit` command which could be used to help to enter/change dataset-level metadata, but I would really appreciate if you (as the visioner/author of rfc822 and all of the metadatas) could provide me with a good example.  Also, if we go with rfc822 as our default metadata format, we would need to decide on actual details of fields specification (e.g. adhere to format of terms used by some other format(s)?) or not to care about them at all, which would limit its usability.  E.g. for rfc822 I envision smth like\r\n\r\n```yaml\r\n## Enter or modify meta data for the dataset by modifying this file.\r\n## Lines which start with ## are considered to be internal copies and removed\r\n## when file actually gets saved.\r\n## Many fields could have short value on the same line as the field name\r\n## followed by more text in the lines which follow it, but indented.  Multiple\r\n## paragraphs could be separated with a line containing a single dot (.)\r\n##\r\n## A short one \"word\" descriptive name of the dataset, e.g.\r\n## Name:  fingertapping\r\nName: \r\n## A one line description of the dataset, e.g.\r\n## Title: Neuroimaging (fMRI) study of basic motor responses invoked by moving tentacles of the upper limbs\r\nTitle:\r\n## Year(s) and the owner (ideally with contact information) the copyright of this work\r\n## (if/when copyright applies).  Multiple entries could be provided in multiple lines, e.g.\r\n## Copyright: 2015-2017, DataLad Team <team@datalad.org>\r\n##                    2016, Sharktopus <sharktopus@example.com>\r\nCopyright:\r\n## License for the dataset, with brief name in the first line and if needed detailed text\r\n## in the following paragraph, e.g.\r\n## License: ODC-PDDL-1.0\r\n##     ODC Public Domain Dedication and License.  You are free to share, create and adapt.\r\n##    .\r\n##     Full text of the license: http://opendatacommons.org/licenses/pddl/\r\nLicense:\r\n\r\n```\r\nand so on.\r\nquestion/concern (as I was typing it):  \r\n- how to enter multiple licenses (as you know -- could happen quite easily, e.g. consider having data and code within the same dataset), i.e. should we allow for the same field to be repeated (I don't think rfc822 allows for that) and take that into account when aggregating (which I am not fluent in yet even without touching any file-level based metadata ;))?\r\n- is there any \"standard\" syntax highlighter for common editors (e.g. vim, emacs) for this data format?\r\n- yet to figure out the easiest/most efficient way to auto-format it in Python happen I have a dictionary...  I know that rfc822 is what used by mail clients but not sure if we are talking about pure 822 with e.g. '.' for paragraph separation as was adopted for debian/control which I do not think even part of rfc822... so somewhere we should formalize all of that ", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/1457/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/1457/timeline", "performed_via_github_app": null}