{"url": "https://api.github.com/repos/datalad/datalad/issues/2086", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/2086/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/2086/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/2086/events", "html_url": "https://github.com/datalad/datalad/issues/2086", "id": 289746996, "node_id": "MDU6SXNzdWUyODk3NDY5OTY=", "number": 2086, "title": "RFC: \"Aggregate\" original metadata representations up the hierarchy", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 374318336, "node_id": "MDU6TGFiZWwzNzQzMTgzMzY=", "url": "https://api.github.com/repos/datalad/datalad/labels/conference%20agenda%20item", "name": "conference agenda item", "color": "fbca04", "default": false, "description": "Scheduled to be discussed in a developer meeting"}, {"id": 440544386, "node_id": "MDU6TGFiZWw0NDA1NDQzODY=", "url": "https://api.github.com/repos/datalad/datalad/labels/fix-implemented", "name": "fix-implemented", "color": "0e8a16", "default": false, "description": "A fix is available, but has not been merged or released, yet."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-01-18T19:25:12Z", "updated_at": "2018-02-10T09:24:01Z", "closed_at": "2018-02-10T09:24:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "#### What is the problem?\r\n\r\nThere is no problem ;)  Just an idea which came up from discussion the NIDM folks and possibly useful to discuss/keep in mind:\r\n\r\n- datalad metadata parsing ATM concentrates on extraction and aggregation (across datasets) key/value metadata pairs\r\n- ATM we are using whoosh, but as reiterated recently in https://github.com/datalad/datalad/issues/2082#issuecomment-358249883, there could be other applications built on top of aggregated metadata, e.g. a full SPARQL query engine\r\n- PROV/NIDM provides *richer* metadata beyond key-value pairs.  \r\n\r\nSo, to facilitate the best utility for the aggregated metadata to be used by various applications, either our parsers/aggregation should be as expressive as any possible metadata representation, and then possibly just duplicate what is provided in the original (to be parsed) `.json` file, or may be we could just \"aggregate\" and propagate them \"as-is\" all the way up, so they could be used (or ignored) by the application (while constructing the index).\r\n\r\nFrom other perspective, all our metadata parsers now harmonize metadata found in the dataset into jsonld for `ds-` and a list of key/value pairs for each file within `cn-` as the \"metadata of the dataset\".  Then whoosh index is aware of how to build search index from it.  Parsers are nohow participate in construction of the index.  But we could also just propagate other possible metadata descriptors (e.g., `nidm-` file with NIDM metadata representation) and extend parsers' API to implement \"software specific\" handling during index construction.  Then for whoosh it would extract key value pairs from `nidm-` portion.  for sparql engine, just return already consumable by it representation.\r\n\r\nCC @satra @jbpoline @dbkeator @gkiar", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/2086/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/2086/timeline", "performed_via_github_app": null}