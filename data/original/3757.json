{"url": "https://api.github.com/repos/datalad/datalad/issues/3757", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/3757/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/3757/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/3757/events", "html_url": "https://github.com/datalad/datalad/issues/3757", "id": 503959782, "node_id": "MDU6SXNzdWU1MDM5NTk3ODI=", "number": 3757, "title": "Standard layout for Examples in docstrings", "user": {"login": "adswa", "id": 29738718, "node_id": "MDQ6VXNlcjI5NzM4NzE4", "avatar_url": "https://avatars.githubusercontent.com/u/29738718?v=4", "gravatar_id": "", "url": "https://api.github.com/users/adswa", "html_url": "https://github.com/adswa", "followers_url": "https://api.github.com/users/adswa/followers", "following_url": "https://api.github.com/users/adswa/following{/other_user}", "gists_url": "https://api.github.com/users/adswa/gists{/gist_id}", "starred_url": "https://api.github.com/users/adswa/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/adswa/subscriptions", "organizations_url": "https://api.github.com/users/adswa/orgs", "repos_url": "https://api.github.com/users/adswa/repos", "events_url": "https://api.github.com/users/adswa/events{/privacy}", "received_events_url": "https://api.github.com/users/adswa/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2019-10-08T10:24:58Z", "updated_at": "2019-12-21T20:37:43Z", "closed_at": "2019-12-21T20:37:43Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I started to work towards a DataLad \"cheat sheet\" [here](https://github.com/datalad-handbook/book/pull/157). @mih stressed that this should be best done in close interaction with the actual docstrings, and @yarikoptic voiced interest in short examples for such a cheat sheet. Given that, I want to try to provide examples for commands for the docstrings. For this I would like to get some input on a standard format for examples, because whenever examples exist, their layout is quite diverse, and I assume its best to settle for a standard in advance and then stick to it & adjust those that use a different one. Below I've included examples of all different layouts I have found (I've only checked on the master branch):\r\n\r\n<details>\r\n<summary>Layout as used in save, rerun, search </summary>\r\n\r\n```\r\n    Examples:\r\n\r\n      Save any content underneath the current directory, without altering\r\n      any potential subdataset (use --recursive for that)::\r\n\r\n        % datalad save .\r\n\r\n      Save any modification of known dataset content, but leave untracked\r\n      files (e.g. temporary files) untouched::\r\n\r\n        % dataset save -u -d <path_to_dataset>\r\n\r\n      Tag the most recent saved state of a dataset::\r\n\r\n        % dataset save -d <path_to_dataset> --version-tag bestyet\r\n\r\n```\r\n</details>\r\n\r\n\r\n<details>\r\n<summary>Layout as used in drop and uninstall</summary>\r\n\r\n```\r\n    Examples:\r\n\r\n        Drop all file content in a dataset::\r\n\r\n            ~/some/dataset$ datalad drop\r\n\r\n        Drop all file content in a dataset and all its subdatasets::\r\n\r\n            ~/some/dataset$ datalad drop --recursive\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Layout as used in clean, download_url, ls, extract_metadata</summary>\r\n\r\n```\r\n    Examples:\r\n\r\n        $ datalad clean\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Layout as used in support/gitrepo.py</summary>\r\n\r\n```\r\n          Examples:\r\n          no_commit=True => --no-commit\r\n          C='/my/path'   => -C /my/path\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Layout as used in support/param.py, support/path.py, support/strings.py, tests/utils:with_testrepos, utils.py</summary>\r\n\r\n```\r\n        Examples\r\n        --------\r\n        Ensure a parameter is a float\r\n        >>> from datalad.support.param import Parameter\r\n        >>> from datalad.support.constraints import (EnsureFloat, EnsureRange,\r\n        ...                              AltConstraints, Constraints)\r\n        >>> C = Parameter(constraints=EnsureFloat())\r\n\r\n        Ensure a parameter is of type float or None:\r\n        >>> C = Parameter(constraints=AltConstraints(EnsureFloat(), None))\r\n\r\n        Ensure a parameter is None or of type float and lies in the inclusive\r\n        range (7.0,44.0):\r\n        >>> C = Parameter(\r\n        ...         AltConstraints(\r\n        ...             Constraints(EnsureFloat(),\r\n        ...                         EnsureRange(min=7.0, max=44.0)),\r\n        ...             None))\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Layout as used in support/third/nosetester.py\r\n</summary>\r\n\r\n```\r\n    Examples\r\n    --------\r\n    Adding the following::\r\n\r\n            if __name__ == \"__main__\" :\r\n                    run_module_suite(argv=sys.argv)\r\n\r\n    at the end of a test module will run the tests when that module is\r\n    called in the python interpreter.\r\n\r\n```\r\n</details>\r\n\r\n\r\n<details>\r\n<summary>Layout as used in tests/utils:with_tempfile:\r\n</summary>\r\n\r\n```\r\n    Examples\r\n    --------\r\n\r\n    ::\r\n\r\n            @with_tempfile\r\n            def test_write(tfile):\r\n                    open(tfile, 'w').write('silly test')\r\n\r\n```\r\n</details>\r\n\r\n\r\n<details>\r\n<summary>Layout as used in datalad/customremotes/archives:get_file_url\r\n</summary>\r\n\r\n```\r\n        Examples\r\n        --------\r\n\r\n        dl+archive:SHA256E-s176--69...3e.tar.gz#path=1/d2/2d&size=123\r\n                when size of file within archive was known to be 123\r\n        dl+archive:SHA256E-s176--69...3e.tar.gz#path=1/d2/2d\r\n                when size of file within archive was not provided\r\n\r\n\r\n```\r\n</details>\r\n\r\nIs there any argument against [PEP-287 (reStructuredText Docstring Format)](https://www.python.org/dev/peps/pep-0287/), i.e., \r\n\r\n```\r\n\r\n>>> print 'Python-specific usage examples; begun with \">>>\"'\r\nPython-specific usage examples; begun with \">>>\"\r\n>>> print '(cut and pasted from interactive sessions)'\r\n(cut and pasted from interactive sessions)\r\n```\r\n?\r\n\r\nAlso, I don't know which branch that would be done on best. Does anyone have an opinion on that?", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/3757/reactions", "total_count": 1, "+1": 1, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/3757/timeline", "performed_via_github_app": null}