{"url": "https://api.github.com/repos/datalad/datalad/issues/5161", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/5161/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/5161/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/5161/events", "html_url": "https://github.com/datalad/datalad/issues/5161", "id": 743520872, "node_id": "MDU6SXNzdWU3NDM1MjA4NzI=", "number": 5161, "title": "Refactor `run_annex*` API in AnnexRepo", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2020-11-16T06:33:45Z", "updated_at": "2020-12-11T06:16:34Z", "closed_at": "2020-12-11T06:16:34Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "In the context of #5003 and specifically #5152 the git-annex execution helper in `AnnexRepo` are probably the last major connection of old `Runner` functionality with the rest of the code base. There are\r\n\r\n- `_run_simple_annex_command()`\r\n- `_run_annex_command_json()`\r\n\r\nthat both sit on top of `_run_annex_command()`. The latter already has some support with witless-execution, but in particular `_run_annex_command_json` does not use it, and implements a different progress handling than `AnnexJsonProtocol`.\r\n\r\nThere are numerous ways in which these three methods are called. It is unclear to me what an RF strategy would be or should be. However, from a design perspective it would be nice to have `call_annex()` to parallel `call_git()`.\r\n\r\nIt would also make sense to me to have `call_annex_items_()` to do the work of reporting JSON records. I do not see why the fact that JSON is used to receive information from git-annex should be reflected in the API.\r\n\r\nSo roughly speaking, I could see the following analogs:\r\n\r\n- `GitRepo._call_git`: `AnnexRepo._run_annex_command` -> `AnnexRepo._call_annex`\r\n- `GitRepo.call_git`: `AnnexRepo._run_simple_annex_command` -> `AnnexRepo.call_annex`\r\n- `GitRepo.call_git_items_`: `AnnexRepo._run_annex_command_json` -> `AnnexRepo.call_annex_items_`\r\n\r\nHere is a comprehensive list of `_run_annex_command()` usage in the code base of datalad proper. First the two main wrappers:\r\n\r\n```\r\n...(*args, **kwargs) [by _run_simple_annex_command]\r\n...(command, files=files,  annex_options=annex_options, **kwargs)\r\n```\r\n\r\nwhere `args` and `kwargs` are exposed, hence could be anything, but contain legacy `log_*` options in any call via `_run_annex_command_json()`.\r\n\r\nRemaining usage:\r\n\r\n```\r\n...('addurl', annex_options=options + urls, backend=backend, log_online=True,log_stderr=False, cwd=cwd)\r\n...('adjust', annex_options=options, runner=\"gitwitless\")\r\n...('checkpresentkey',annex_options=list(annex_input),expect_fail=True,runner=\"gitwitless\")\r\n...('contentlocation',annex_options=[key],expect_fail=True,runner=\"gitwitless\")\r\n...('describe', annex_options=[name, description])\r\n...('enableremote',annex_options=[name] + ensure_list(options),runner=\"gitwitless\",env=env)\r\n...('find', files=[f],annex_options=[\"--print0\"], expect_fail=True,merge_annex_branches=False,runner=\"gitwitless\")\r\n...('find', annex_options=args, merge_annex_branches=False,  runner=\"gitwitless\")\r\n...('init', runner=\"gitwitless\", protocol=AnnexInitOutput, annex_options=opts)\r\n...('initremote', annex_options=[as_common_datasrc, 'type=git', 'location={}'.format(url), 'autoenable=true'])\r\n...('initremote', annex_options=[name] + options, runner=\"gitwitless\")\r\n...('lookupkey', files=[files], expect_fail=True,runner=\"gitwitless\")\r\n...('metadata', '.', '-g', 'lastchanged')\r\n...('migrate',annex_options=files,backend=backend,runner=\"gitwitless\")\r\n...('registerurl', annex_options=[dest_key, url])\r\n...('reinject', annex_options=[str(tmploc), str_dest])\r\n...('rmurl', files=[file_, url], runner=\"gitwitless\")\r\n...('setpresentkey', annex_options=[dest_key, dest_rid, '1'])\r\n...('sync', annex_options=args, runner=\"gitwitless\")\r\n...('unannex', annex_options=options, files=files, runner=\"gitwitless\")\r\n...('untrust', annex_options=['here'])\r\n```\r\n\r\nand in the tests:\r\n```\r\n...('dead', annex_options=['here'])\r\n...('direct' if enable_direct_mode else 'indirect', expect_stderr=True, runner=\"gitwitless\")\r\n`..(\"initremote\", annex_options=[\"special\", \"type=git\", \"autoenable=true\", \"location=\" + clone_url])\r\n...('log')\r\n...('unannex', annex_options=[op.join(lvl2relpath, 'file')])\r\n...('upgrade')\r\n```\r\n\r\nNow same for `_run_simple_annex_command()`:\r\n\r\n```\r\n...(\"group\", annex_options=[remote or '.'])\r\n...(\"groupwanted\", annex_options=[remote or '.'])\r\n...(\"required\", annex_options=[remote or '.'])\r\n...(\"wanted\", annex_options=[remote or '.'])\r\n```\r\n\r\nand for `_run_annex_command_json()`:\r\n\r\n```\r\n...('add',opts=options,files=files,backend=backend,expect_fail=True,jobs=jobs,expected_entries=expected_additions,expect_stderr=True)\r\n...('add',opts=options,files=list(files.keys()),backend=None,expect_fail=True,jobs=None,expected_entries=expected_additions,expect_stderr=True)\r\n...('addurl',opts=options + [files_opt] + [url],progress=True,expected_entries={file_: None},**kwargs)\r\n...('copy',opts=annex_options,files=files,jobs=jobs,expected_entries=expected_copys,progress=True)\r\n...('drop',opts=options + [k],jobs=jobs)\r\n...('drop',opts=options,files=files,jobs=jobs)\r\n...('dropkey', opts=options, files=keys, expect_stderr=True)\r\n...('find', opts=expr, files=files, merge_annex_branches=merge_annex_branches)\r\n...('fromkey',opts=[dest_key, str_dest, '--force'], expect_fail=True,)\r\n...('fsck',iles=paths,git_options=git_options,opts=args,expect_stderr=True,expect_fail=True,)\r\n...('get',jobs=jobs,expected_entries=expected_downloads,progress=True,**kwargs)\r\n...('info', opts=options, files=files, merge_annex_branches=False)\r\n...('info', opts=options, merge_annex_branches=merge_annex_branches)\r\n...('ls-files', opts=opts, files=files)\r\n...('ls-tree', opts=opts, files=files)\r\n...('metadata', opts=['--json'], files=files)\r\n...('metadata',args, files=files)\r\n...(\"unlock\", files=files)\r\n...('whereis', **kwargs)\r\n```\r\n\r\nand in tests:\r\n\r\n```\r\n...('add', files='gl\\\\orious BS')\r\n...('add', ['non-existing'], expect_fail=True)\r\n...('add', ['non-existing'], expect_fail=False)\r\n...(\"info\",log_stdout=log_stdout,log_stderr=log_stderr,runner=\"gitwitless\")\r\n```", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/5161/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/5161/timeline", "performed_via_github_app": null}