{"url": "https://api.github.com/repos/datalad/datalad/issues/1091", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/1091/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/1091/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/1091/events", "html_url": "https://github.com/datalad/datalad/pull/1091", "id": 187250178, "node_id": "MDExOlB1bGxSZXF1ZXN0OTIyODE3MDM=", "number": 1091, "title": "RF: Repos", "user": {"login": "bpoldrack", "id": 10498301, "node_id": "MDQ6VXNlcjEwNDk4MzAx", "avatar_url": "https://avatars.githubusercontent.com/u/10498301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpoldrack", "html_url": "https://github.com/bpoldrack", "followers_url": "https://api.github.com/users/bpoldrack/followers", "following_url": "https://api.github.com/users/bpoldrack/following{/other_user}", "gists_url": "https://api.github.com/users/bpoldrack/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpoldrack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpoldrack/subscriptions", "organizations_url": "https://api.github.com/users/bpoldrack/orgs", "repos_url": "https://api.github.com/users/bpoldrack/repos", "events_url": "https://api.github.com/users/bpoldrack/events{/privacy}", "received_events_url": "https://api.github.com/users/bpoldrack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2016-11-04T04:12:02Z", "updated_at": "2020-09-02T10:21:10Z", "closed_at": "2017-01-19T11:53:35Z", "author_association": "MEMBER", "active_lock_reason": null, "pull_request": {"url": "https://api.github.com/repos/datalad/datalad/pulls/1091", "html_url": "https://github.com/datalad/datalad/pull/1091", "diff_url": "https://github.com/datalad/datalad/pull/1091.diff", "patch_url": "https://github.com/datalad/datalad/pull/1091.patch"}, "body": "This PR provides some structural changes, especially a singleton approach for the classes `GitRepo`, `AnnexRepo` and `Dataset`.\r\nIt doesn't make full use of it or implement everything, that would now be easier, but lays the ground.\r\nBesides some fixes there are three main points:\r\n\r\n1. `GitRepo`, `AnnexRepo` and `Dataset` now consistently use `ConfigManager` to read any config item.\r\nIt removes the use of any other config reader within the repo classes. This is to achieve several things. We need to be able to read datalad config items anyway, which we can't easily do with GitPython's git config reader for example. It's now consistent how to access any config item across the entire datalad code, which is a value of its own, I think. And we thereby make sure there's no conflict when accessing files and other, possibly outdated, instances providing the same item. ATM it might be a little bit slower, since we don't have a really good strategy yet on when to reload `ConfigManager` (see #1044). But this is to be solved anyway and therefore is no reason to keep the chaos from my point of view.\r\nNote, that `ConfigManager`'s instance is bound to `GitRepo.config`, i.e. `Dataset` uses the `ConfigManager` from its underlying repo.\r\n\r\n2. `GitRepo`, `AnnexRepo` and `Dataset` are now flyweights. For the important aspects this means they are basically singletons. ;)\r\n`GitRepo` and therefore `AnnexRepo` are using their `realpath` as the key, which resolves symlinks. So, for any physical repository on the file system, there's only one instance at a time. In opposition `Dataset` uses just the canonical path of what you use to request an instance, meaning it doesn't resolve symlinks and it possibly uses relative paths. Therefore two `Dataset` instances might not be the same while both of them are pointing to the same physical repository and using the same `AnnexRepo`/`GitRepo` instance to access it.\r\nThe flyweight pattern is realized by its own metaclass `Flyweight`. See docs within `datalad/support/repo.py ` for further details.\r\nYou can use `GitRepo`, `AnnexRepo` and `Dataset` mostly in the very same way as before. What used to be a call of the constructor ( `GitRepo(whatever=option)` for example ) is turned into a call to `Flyweight.__call__` and will return an instance of the class you expect. Still this will need some more work, I think to figure out, what should happen if an instance is requested, that already exists, but with different options to the \"constructor\" call. But for now this issue is a theoretical one and it should be the topic of another PR. However, if this theoretical conflict becomes a reality, this probably simply points to something not very convincing within the code, using these classes, I think.\r\n\r\n\r\n3. Superclass\r\nThere is a superclass `Repo` now, that is supposed to be a container for methods, which should be available to both repo classes while implemented differently. This may sound strange at first, since this could be done by adding them to `GitRepo` and override them in `AnnexRepo`. But:\r\nAs @mih  pointet out in issue #1100  there is a need for things like `file_has_content` to be implemented for `GitRepo` as well, while their sheer existence requires an idea of annex. So, from my point of view it would be strange to have them defined in `GitRepo`. While it technically isn't necessary, I think it's the right thing to collect those things at a single place. `Repo` is that place.\r\n\r\n\r\nWhile this PR doesn't change much on how to use these classes, I need you guys, @mih , @yarikoptic , to have a close look at the concept and to be aware of how it works. Some tests for example used to implicitly rely on those classes NOT being singletons, reinstanciating them over and over again.\r\n\r\n\r\nFinally, I'm aware there have to be more and/or better tests, but right now, it's more important to get this into master ASAP, since it becomes more inconvenient to make use of this with every additional commit to master. We need to base the logic, we implement elsewhere, on that concept and harvest the benefit of these \"singletons\". PR with another general change to `AnnexRepo` is coming and will provide better coverage.\r\n\r\n\r\n- Closes #1028 ", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/1091/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/1091/timeline", "performed_via_github_app": null}