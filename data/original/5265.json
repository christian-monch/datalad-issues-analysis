{"url": "https://api.github.com/repos/datalad/datalad/issues/5265", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/5265/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/5265/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/5265/events", "html_url": "https://github.com/datalad/datalad/issues/5265", "id": 776494513, "node_id": "MDU6SXNzdWU3NzY0OTQ1MTM=", "number": 5265, "title": "git-annex prevents custom smudge-filter configuration in committed .gitattributes", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 385404347, "node_id": "MDU6TGFiZWwzODU0MDQzNDc=", "url": "https://api.github.com/repos/datalad/datalad/labels/for%20our%20information", "name": "for our information", "color": "fbca04", "default": false, "description": "Announcement-type issues (possibly inconsequential)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2020-12-30T14:55:11Z", "updated_at": "2021-01-18T18:52:47Z", "closed_at": "2021-01-18T18:52:47Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I needed this for a project, but discovered that git-annex configures its filter in `.git/info/attributes`, which has maximum priority and I found no other way than to also go there with my own config.\r\n\r\nI am posting the resulting dataset procedure here for posterity:\r\n\r\n```py\r\n# This dataset procedure configures a dataset for use as a KDENLIVE project\r\n# Most importantly it configures Git to not commit the absolute root path\r\n# configured in a project file into Git. Instead a placeholder is stored\r\n# that is replaced with the absolute path of the dataset root location\r\n# on checkout. This makes KDENLIVE project datasets portable.\r\n#\r\n# Moreover, it:\r\n# - expects the project file to be named 'project.kdenlive', and to be\r\n#   placed in the root of the dataset\r\n# - creates a standard directory structure\r\n# - configures Git to ignore a number of temporary working directories\r\n#   that KDENLIVE might create\r\n#\r\n# The dataset procedure is idempotent, and is save to run on\r\n# datalad-create (with -c), and must be executed once in any clone\r\n# of such a dataset to apply all necessary configuration.\r\n\r\nimport sys\r\nfrom pathlib import Path\r\nfrom datalad.api import Dataset\r\n\r\nds = Dataset(sys.argv[1])\r\n\r\ngitignore = ds.pathobj / '.gitignore'\r\ngitignore_content = gitignore.open().read().splitlines() \\\r\n    if gitignore.exists() else []\r\n\r\nto_save = set()\r\n\r\n# directories that KDEnlive will automatically create\r\n# ignore them\r\nfor wdir in ('proxy', 'thumbs', 'titles', '.backup'):\r\n    dir = ds.pathobj / wdir\r\n    if wdir not in gitignore_content:\r\n        gitignore_existed = gitignore.exists()\r\n        gitignore.open('a').write('{}{}'.format(\r\n            '\\n' if gitignore_existed else '',\r\n            wdir))\r\n        to_save.add(gitignore.name)\r\n\r\n# add a default directory for materials (video, audio, images)\r\n# that a project is comprised of. we do not distinguish\r\n# between type of material here (unlike the manual suggests),\r\n# because there are other way to organize, and it violates\r\n# the principles of modularity (one project being material\r\n# for another)\r\nresource_dir = ds.pathobj / 'materials'\r\nresource_dir.mkdir(exist_ok=True)\r\n\r\nprojectfile = 'project.kdenlive'\r\nfiltername = 'kdenlive-project-root'\r\n\r\nds_repo = ds.repo\r\n\r\n# we must configure the filter in the non-committed attributes\r\n# because git-annex does it there, and we have no chance to override\r\n# it elsewhere\r\nif ds_repo.get_gitattributes(projectfile).get(\r\n        projectfile, {}).get('filter', None) != filtername:\r\n    ds_repo.set_gitattributes(\r\n        [(projectfile, {'filter': filtername})],\r\n        attrfile=Path(ds_repo.get_git_dir(ds_repo)) / 'info' / 'attributes',\r\n        mode='a',\r\n    )\r\nif ds_repo.get_gitattributes(projectfile).get(\r\n        projectfile, {}).get('annex.largefiles', None) != 'nothing':\r\n    ds_repo.set_gitattributes(\r\n        [(projectfile, {'annex.largefiles': 'nothing'})],\r\n        attrfile='.gitattributes',\r\n        mode='a',\r\n    )\r\n    to_save.add('.gitattributes')\r\n\r\nds_repo.config.set(\r\n    'filter.{}.clean'.format(filtername),\r\n    'sed \\'0,/^<mlt/s/^\\(<mlt.*root=\"\\)\\(.*\\)\\(\".*\\)$/\\\\1{DATALADPROJECTROOT}\\\\3/\\'',\r\n    where='local',\r\n    force=True,\r\n    reload=False,\r\n)\r\nds_repo.config.set(\r\n    'filter.{}.smudge'.format(filtername),\r\n    'sed \\'0,/^<mlt/s,^\\(<mlt.*root=\"\\){DATALADPROJECTROOT}\\(\".*\\)$,\\\\1%s\\\\2,\\'' % Path.cwd(),\r\n    where='local',\r\n    force=True,\r\n    reload=False,\r\n)\r\n\r\nif to_save:\r\n    ds.save(\r\n        path=list(to_save),\r\n        message=\"Configure as a kdenlive project dataset\",\r\n    )\r\n\r\n```", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/5265/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/5265/timeline", "performed_via_github_app": null}