{"url": "https://api.github.com/repos/datalad/datalad/issues/1476", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/1476/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/1476/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/1476/events", "html_url": "https://github.com/datalad/datalad/issues/1476", "id": 223921090, "node_id": "MDU6SXNzdWUyMjM5MjEwOTA=", "number": 1476, "title": "Common logging and result report concept", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778594, "node_id": "MDU6TGFiZWw2Mzc3ODU5NA==", "url": "https://api.github.com/repos/datalad/datalad/labels/question", "name": "question", "color": "fbca04", "default": true, "description": "Issue asks a question rather than reporting a problem"}, {"id": 519289523, "node_id": "MDU6TGFiZWw1MTkyODk1MjM=", "url": "https://api.github.com/repos/datalad/datalad/labels/on%20hold%20-%20input%20required", "name": "on hold - input required", "color": "fbca04", "default": false, "description": "Work on this issue cannot proceed until critical feedback was given"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-04-24T19:07:33Z", "updated_at": "2017-05-07T07:29:02Z", "closed_at": "2017-05-07T07:29:02Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The aim is to agree on one and then to write it up in here.\r\n\r\n## Aim: minimize command-specific differences in reporting what is going on and was achieved -- and in doing so minimize/consolidate the code to do that.\r\n\r\n### Q1: When to just log vs yield a result\r\n\r\n[this is about command implementations; the situation in low-level code is different. I'd argue that low-level code should only ever trigger debug messages (maybe distinguish different levels). It generally cannot decide or know whether a low-level error is actually a problem. We see this in numerous scary messages that are not that meaningful for a user]\r\n\r\nResults can always easily be logged by including a logger in the result dict. Pure logging (without yielding a result) should only happen for progress info or decision making that may not lead to any result, e.g. a download attempt. Any result-oriented reporting (e.g. \"i couldn't do what you requested\", or \"I got this\") should happen in the form of a yielded result.\r\n\r\n### Q2: Reporting individual results vs summaries?\r\n\r\nReporting summarizes comes with the need to aggregate across mutliple results. This aggregation practically prevents the ability to immediately yield intermediate results (a function that yields can only return `None`).  Summary rendering should focus on cmdline use (where we relay result dicts to the top-level anyways, and do not need to rely on custom return values (like in the Python API).\r\n\r\nCommand summaries might be highly custom, but maybe there is a meaningful default summary implementation. Something like\r\n\r\n````\r\nPerformed actions:\r\n  install (ok: 200, notneeded: 3, error: 1)\r\n  get (impossible: 12876)\r\n````\r\n\r\n### Q3: Default format of reporting individual results?\r\n\r\nIt should be uniform across all commands. Proposal:\r\n\r\n````\r\n% datalad --output-format simple install -s ~/forrest/collection/phase2\r\ninstall(notneeded): /tmp/phase2 [dataset <Dataset path=/tmp/phase2> was already cloned from '/home/mih/forrest/collection/phase2']\r\n````\r\n\r\nmore formal: <**action label**>(<**status label**>): <**result path**> [**result annotation/message/note**]\r\n\r\nThis is semi-structured and at the same time somewhat human readable.\r\n\r\n### Q4: What individual results to report?\r\n\r\nSome commands (install/get) could make use of the principle \"ignore implicit results by default\" in order to avoid overwhelming the user. We have to keep in mind that yielded results are logged if desired, but that doesn't imply that they have to be rendered as a result at the same time. In general, it seems difficult to come up with a common principle to decide what to render and what not.\r\n", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/1476/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/1476/timeline", "performed_via_github_app": null}