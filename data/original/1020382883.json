{"url": "https://api.github.com/repos/datalad/datalad/issues/6057", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/6057/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/6057/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/6057/events", "html_url": "https://github.com/datalad/datalad/issues/6057", "id": 1020382883, "node_id": "I_kwDOANZqws480c6j", "number": 6057, "title": "CI action to annex merge corresponding remote git-annex branch", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 390153891, "node_id": "MDU6TGFiZWwzOTAxNTM4OTE=", "url": "https://api.github.com/repos/datalad/datalad/labels/UX", "name": "UX", "color": "0052cc", "default": false, "description": "user experience"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-10-07T19:25:55Z", "updated_at": "2021-10-07T19:45:44Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "# Problem\r\n\r\nPRs against datalad git-annex repos cannot contain/represent changes to git-annex branch.  So if PR for annexed files is merged, most likely the changes to git-annex branch about keys availability should be merged.\r\n\r\n# 1. Q&D solution - plain `annex merge`\r\n\r\nCI action \r\n- upon discovering a fresh merge in a branch from a PR, and either that PR has a label (e.g. `git-annex-merge`) or just automagically discovers that git-annex'ed files were added/removed, \r\n- then it discovers the remote from which PR came, \r\n- adds it as a remote, \r\n- and `git annex merge that-remote`\r\n- `git push origin git-annex` -- push that merged git-annex back into repo\r\n\r\nPros:\r\n- `git annex merge` is there and thus would be easy to implement\r\nCons:\r\n- merged changes to git-annex branch aren't specific to PR -- might leak sensitive info etc\r\n- that `annex merge` would be ran on a temporary clone done by CI, which gets its own UUID, and git-annex branch which then gets merged with PRs remote, and pushed.\r\n  - so pollutes git-annex branch history quite a bit   (well -- we could git annex forget but it would still lead to the presence of annex metadata for other unrelated keys and possibly remotes)\r\n\r\n# 2. A bit more elaborate - `annex filterbranch`\r\n\r\nI think we could and should take advantage of the recently added [`git annex filterbranch`](https://git-annex.branchable.com/todo/copy-key___40__--batch__41___to_copy__47__merge_availability_info/) which should be usable to copy git-annex metadata only for the keys of interest.\r\n\r\n- well -- steps are pretty much the same as with the `1` but should avoid `git annex merge` and be more specific\r\n- the same issue as with `1` -- need to figure out (reuse annex UUID?) how to not breed unnecessary remote UUIDs and merges in the git-annex branch\r\n\r\n# 3 1+2: a satellite PR with `annex filterbranch` changes to git-annex + `annex merge` for those changes\r\n\r\nPossibly a combination of 1 and 2: CI action creates a satellite PR with only relevant changes to git-annex branch (ie what `2` would do) so they could be reviewed etc.  Upon merge of the originating PR, CI action would `annex merge` that particular PR branch (could be fetched as the remote's `git-annex` branch and then `annex merge` is ran for that remote)", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/6057/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/6057/timeline", "performed_via_github_app": null}