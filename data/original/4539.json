{"url": "https://api.github.com/repos/datalad/datalad/issues/4539", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/4539/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/4539/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/4539/events", "html_url": "https://github.com/datalad/datalad/issues/4539", "id": 619096166, "node_id": "MDU6SXNzdWU2MTkwOTYxNjY=", "number": 4539, "title": "Introduce support for subcommand interfaces", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778592, "node_id": "MDU6TGFiZWw2Mzc3ODU5Mg==", "url": "https://api.github.com/repos/datalad/datalad/labels/enhancement", "name": "enhancement", "color": "0052cc", "default": true, "description": ""}, {"id": 390153891, "node_id": "MDU6TGFiZWwzOTAxNTM4OTE=", "url": "https://api.github.com/repos/datalad/datalad/labels/UX", "name": "UX", "color": "0052cc", "default": false, "description": "user experience"}, {"id": 545918236, "node_id": "MDU6TGFiZWw1NDU5MTgyMzY=", "url": "https://api.github.com/repos/datalad/datalad/labels/DX", "name": "DX", "color": "0052cc", "default": false, "description": "developer experience"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2020-05-15T16:27:44Z", "updated_at": "2021-07-15T20:21:58Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "#### What is the problem?\r\n\r\nThis is an old issue for which I did not find an open issue in a quick search.  Our `Interface`s API generation goes only one level -- we can define commands but not subcommands which would have possibly additional different from each other options.  That manifests itself in having no uniform API and thus at times consistent `--help` across commands to support what we desire. We ended up with\r\n\r\n- different `create-sibling*`, `export*` flavors\r\n-  `siblings [OPTIONS] [COMMAND]` so that some OPTIONS is superset across all COMMANDs\r\n- `search [--mode MODE] QUERY` with search API of specific `MODE` implementations accepting and swallowing options it does not care about, and then incorporating some `MODE` specific options within `QUERY`\r\n- `metadata`, `aggregate-metadata`, `extract-metadata`, so if command completion worked, it requires reading documentation or `--help` to figure what commands operate with metadata (unlike if it is `metadata`, `metadata aggregate`, ... to also be inline with `siblings COMMAND` etc \r\n\r\nI think that eventually we should mitigate this situation and come up with some solution for consistent API. Existing approach in `click` allows to define and nest  groups of commands: https://click.palletsprojects.com/en/7.x/commands/ . And I think we might want to do something similar.   On Python level subcommands could be just methods of the parent command e.g. `siblings.create`.\r\n\r\nMay be (but not really necessarily) while at it we could also completely RF the approach on how we are defining interfaces to avoid IMHO somewhat non-Pythonic groupping via classes with static `__call__`.\r\n\r\nI first wanted to seek opinions and feedback before possibly even trying to come up with a solution.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/4539/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/4539/timeline", "performed_via_github_app": null}