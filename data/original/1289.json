{"url": "https://api.github.com/repos/datalad/datalad/issues/1289", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/1289/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/1289/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/1289/events", "html_url": "https://github.com/datalad/datalad/issues/1289", "id": 207459118, "node_id": "MDU6SXNzdWUyMDc0NTkxMTg=", "number": 1289, "title": "we need a better concept than staged/unstaged (yet to be proven)", "user": {"login": "bpoldrack", "id": 10498301, "node_id": "MDQ6VXNlcjEwNDk4MzAx", "avatar_url": "https://avatars.githubusercontent.com/u/10498301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpoldrack", "html_url": "https://github.com/bpoldrack", "followers_url": "https://api.github.com/users/bpoldrack/followers", "following_url": "https://api.github.com/users/bpoldrack/following{/other_user}", "gists_url": "https://api.github.com/users/bpoldrack/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpoldrack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpoldrack/subscriptions", "organizations_url": "https://api.github.com/users/bpoldrack/orgs", "repos_url": "https://api.github.com/users/bpoldrack/repos", "events_url": "https://api.github.com/users/bpoldrack/events{/privacy}", "received_events_url": "https://api.github.com/users/bpoldrack/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778594, "node_id": "MDU6TGFiZWw2Mzc3ODU5NA==", "url": "https://api.github.com/repos/datalad/datalad/labels/question", "name": "question", "color": "fbca04", "default": true, "description": "Issue asks a question rather than reporting a problem"}, {"id": 526935563, "node_id": "MDU6TGFiZWw1MjY5MzU1NjM=", "url": "https://api.github.com/repos/datalad/datalad/labels/feedback-desired", "name": "feedback-desired", "color": "fbca04", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2017-02-14T09:21:25Z", "updated_at": "2018-09-14T04:24:33Z", "closed_at": "2018-09-14T04:24:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Note the problem example wrt `save_dataset` was found to not be a problem about 15 min down from here!\r\n\r\nAs discussed in last hangout, in direct mode there are no unstaged changes.\r\nIn general the fact, that we cannot distinguish staged and unstaged changes in direct mode should lead to not use this idea with annex repos at all.\r\n\r\nBut while trying to rework the Repo classes' `dirty()` methods and the `ok_clean_git` test helper in PR #1277 this is raising questions. There is at least one important place, we use this: `interface/utils.py` in `save_dataset`. There we want to commit if we have either explicitly given paths to commit or there is something staged. As of https://github.com/datalad/datalad/pull/1277/commits/d59cbd5eb4b3f678e654623899a78b6ae901fc29 I keep the current behaviour in indirect mode, therefore still allowing for the parameter `working_tree` for `dirty()` (triggers a warning instead of an exception).\r\nBy now this means kind of a correct behaviour, since `dirty(index=True, working_tree=False)` returns `True` whenever there is something staged. It's just different what is staged in direct mode and that's okay - it's direct mode, it should behave like direct mode.\r\n\r\nBUT: While the technical behaviour might be okay-ish, it's troublesome to provide it that way. We encourage the idea of distinguishing, what for an annex isn't a valid distinction. As long as we have it that way, the user of an `AnnexRepo` has to be aware of what that means in different annex modes. I don't see us (or even future contributors) having this is mind all the time.\r\n\r\nSo, I think we need a concept of how to catagorize possible changes in an annex repository in a more fitting way. The minimum would be to rename the parameters (originally coming from GitPython) from `index, working_tree` to `staged, unstaged`, which is still troublesome but at least better than talking about a working tree, that isn't there.\r\nWhat else can you think of? Perhaps consider especially the situation described in `save_dataset`. Any other conceptional approach on what kind of changes to commit than \"staged\" ones? Please note, that it has not necessarily to fit into `dirty()`. Once we have an idea, what we are looking for, we can have a dedicated method to do so, of course.", "closed_by": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/1289/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/1289/timeline", "performed_via_github_app": null}