{"url": "https://api.github.com/repos/datalad/datalad/issues/4535", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/4535/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/4535/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/4535/events", "html_url": "https://github.com/datalad/datalad/issues/4535", "id": 618570914, "node_id": "MDU6SXNzdWU2MTg1NzA5MTQ=", "number": 4535, "title": "FOI: system git vs \"bundled\" git; use conda more?", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 289240596, "node_id": "MDU6TGFiZWwyODkyNDA1OTY=", "url": "https://api.github.com/repos/datalad/datalad/labels/performance", "name": "performance", "color": "f4b2d8", "default": false, "description": "Improve performance of an existing feature"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-14T22:21:51Z", "updated_at": "2020-10-13T17:54:33Z", "closed_at": "2020-10-13T17:54:33Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "While eyeballing logging output from running test_run for #4527 I decided to check -- what is the most popular git command we ran:\r\n<details>\r\n<summary>and not surprisingly it is  ['git', 'config', '-z', '-l', '--show-origin']  or some more specific call </summary> \r\n\r\n```bash\r\n$> grep git.*config asyncioblocking.log| grep Running | sed -e 's,.*Running:,,g' | sort | uniq -c | sort -n | tail\r\n     36  ['git', 'config', '-z', '-l', '--show-origin', '--file', '/home/yoh/.tmp/datalad_temp_test_run_inputs_outputsjgakqy8c/s0/s1_0/s2/.datalad/config'] \r\n     40  ['git', 'config', '-z', '-l', '--show-origin', '--file', '/home/yoh/.tmp/datalad_temp_test_run_inputs_outputsjgakqy8c/s0/s1_1/s2/.datalad/config'] \r\n     41  ['git', 'config', '-z', '-l', '--show-origin', '--file', '/home/yoh/.tmp/datalad_temp_test_run_inputs_outputsjgakqy8c/s0/s1_0/.datalad/config'] \r\n     43  ['git', 'config', '-z', '-l', '--show-origin', '--file', '/home/yoh/.tmp/datalad_temp_test_run_inputs_outputsjgakqy8c/s0/s1_1/.datalad/config'] \r\n     68  ['git', 'config', '-z', '-l', '--file', '.gitmodules'] \r\n     89  ['git', 'config', '-z', '-l', '--show-origin', '--file', '/home/yoh/.tmp/datalad_temp_test_run_inputs_outputsjgakqy8c/sub/.datalad/config'] \r\n    126  ['git', 'config', '--local', '--add', 'annex.security.allowed-http-addresses', 'all'] \r\n    126  ['git', 'config', '--local', '--add', 'annex.security.allowed-url-schemes', 'http https file'] \r\n    159  ['git', 'config', '-z', '-l', '--show-origin', '--file', '/home/yoh/.tmp/datalad_temp_test_run_inputs_outputsjgakqy8c/s0/.datalad/config'] \r\n   1235  ['git', 'config', '-z', '-l', '--show-origin'] \r\n``` \r\n</details>\r\nso in the course of that test run we had over a thousand of calls.  Sure thing they are fast!  **BUT** then I decided to check how fast that would be and how much of overhead we get from\r\n\r\n- git-annex bundling of git\r\n- our runners\r\n\r\nbelow scripts run on the clone of our `///`.  3 times they run 100 calls to both \"versions\" of git.  Python code runs Runner and WitlessRunner (that lambda is the Witless one since I cannot specify protocol at the instance level).\r\n\r\n<details>\r\n<summary>bash script (ugly but works)</summary> \r\n\r\n```shell\r\n#!/bin/bash\r\n\r\nset -eu\r\nnrep=3\r\ncd ~/datalad\r\n\r\n(set -x; /usr/bin/git --version)\r\nfor i in `seq 1 $nrep`; do \r\n   time ( for s in {1..100}; do '/usr/bin/git' 'config' '-z' '-l' '--show-origin' > /dev/null; done); \r\ndone\r\n\r\n(set -x; /usr/lib/git-annex.linux/git --version)\r\nfor i in `seq 1 $nrep`; do \r\n   time ( for s in {1..100}; do '/usr/lib/git-annex.linux/git' 'config' '-z' '-l' '--show-origin' > /dev/null; done); \r\ndone\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>output. Summary: system git 0.16, bundled 0.9 </summary> \r\n\r\n```shell\r\n$>  ./time-git-config.sh       \r\n+ /usr/bin/git --version\r\ngit version 2.24.0\r\n\r\nreal\t0m0.170s\r\nuser\t0m0.086s\r\nsys\t0m0.089s\r\n\r\nreal\t0m0.151s\r\nuser\t0m0.093s\r\nsys\t0m0.061s\r\n\r\nreal\t0m0.175s\r\nuser\t0m0.087s\r\nsys\t0m0.093s\r\n+ /usr/lib/git-annex.linux/git --version\r\ngit version 2.24.0\r\n\r\nreal\t0m0.950s\r\nuser\t0m0.774s\r\nsys\t0m0.227s\r\n\r\nreal\t0m0.864s\r\nuser\t0m0.665s\r\nsys\t0m0.245s\r\n\r\nreal\t0m0.907s\r\nuser\t0m0.720s\r\nsys\t0m0.236s\r\n```\r\n</details>\r\n\r\n<details>\r\n<summary>Runner and WitlessRunner script (similarly pretty)</summary> \r\n\r\n```python\r\n#!/usr/bin/env python\r\nfrom datalad.cmd import Runner, WitlessRunner, NoCapture, KillOutput\r\nfrom time import time\r\n\r\nrunner = Runner(cwd=\"/home/yoh/datalad\")\r\nwrunner = WitlessRunner(cwd=\"/home/yoh/datalad\")\r\n\r\nfor r in [runner.run, lambda cmd: wrunner.run(cmd, protocol=KillOutput)]:\r\n    print(r)\r\n    for git in ['/usr/bin/git', '/usr/lib/git-annex.linux/git']:\r\n        cmd = [git, 'config', '-z', '-l', '--show-origin']\r\n        print(git)\r\n        for i in range(3):\r\n            t0 = time()\r\n            for s in range(100):\r\n                r(cmd)\r\n            dt = time() - t0\r\n            print(\"%.3f\" % dt)\r\n```\r\n</details>\r\n\r\n\r\n<details>\r\n<summary>output. Summary: runner system git 0.2; bundled 1.1; witless system 0.23; bundled 1.0</summary> \r\n\r\n```shell\r\n$>  ./time-git-config-runner.py   \r\n<bound method Runner.run of <datalad.cmd.Runner object at 0x7fcdffffdb90>>\r\n/usr/bin/git\r\n0.200\r\n0.189\r\n0.214\r\n/usr/lib/git-annex.linux/git\r\n1.332\r\n1.000\r\n0.945\r\n<function <lambda> at 0x7fcdff5a4ef0>\r\n/usr/bin/git\r\n0.224\r\n0.251\r\n0.218\r\n/usr/lib/git-annex.linux/git\r\n1.005\r\n1.076\r\n1.054\r\n\r\n```\r\n</details>\r\n\r\nOutput of running git config was just discarded, so there is no comparison between our runners in how fast they swallow the output etc.  \r\n\r\n<details>\r\n<summary>For completness here is timing with conda's git-annex and git (not bundled on conda builds, but I believe not a direct dependency so might not be installed): nice 0.17</summary> \r\n\r\n```shell\r\n$> cat time-git-config-default.sh\r\n#!/bin/bash\r\n\r\nset -eu\r\nnrep=3\r\ncd ~/datalad\r\n\r\n(set -x; which git; git --version)\r\nfor i in `seq 1 $nrep`; do \r\n   time ( for s in {1..100}; do 'git' 'config' '-z' '-l' '--show-origin' > /dev/null; done); \r\ndone\r\n\r\n$> bash time-git-config-default.sh\r\n+ which git\r\n/home/yoh/anaconda-5.2.0-2.7/envs/datalad-py3.6/bin/git\r\n+ git --version\r\ngit version 2.26.2\r\n\r\nreal\t0m0.169s\r\nuser\t0m0.094s\r\nsys\t0m0.079s\r\n\r\nreal\t0m0.184s\r\nuser\t0m0.092s\r\nsys\t0m0.096s\r\n\r\nreal\t0m0.162s\r\nuser\t0m0.087s\r\nsys\t0m0.079s\r\n\r\n```\r\n</details> \r\n\r\n## Summary\r\n\r\nWe do add some minor overhead but it is not major in either case.  Major difference here comes from system vs bundled `git`. Overall due to bundling we lost 0.8 sec on 100 invocations, so probably a bit over 10 seconds from running our `test_run` tests (alone! no other tests were ran) overall on the most popular call to git config.\r\n\r\nLooong time ago with @joeyh we had some conversation about bundling overhead, but I think that was so long ago that it was \"archived\" (can't find it).  But overall it seems it is something to keep in mind here and may be @joeyh has some ideas on how to speed up rapid git invocations in the \"bundled\" version!\r\n\r\nconda -- we might want to tune up our travis etc to use conda built git annex, although I would also dislike that since in real life I more often use neurodebian's bundled version.  I might do more timing comparisons later on.", "closed_by": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/4535/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/4535/timeline", "performed_via_github_app": null}