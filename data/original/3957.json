{"url": "https://api.github.com/repos/datalad/datalad/issues/3957", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/3957/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/3957/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/3957/events", "html_url": "https://github.com/datalad/datalad/issues/3957", "id": 541323247, "node_id": "MDU6SXNzdWU1NDEzMjMyNDc=", "number": 3957, "title": "Transition `clone()` to core.distributed", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 440544386, "node_id": "MDU6TGFiZWw0NDA1NDQzODY=", "url": "https://api.github.com/repos/datalad/datalad/labels/fix-implemented", "name": "fix-implemented", "color": "0e8a16", "default": false, "description": "A fix is available, but has not been merged or released, yet."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2019-12-21T12:45:43Z", "updated_at": "2020-03-12T13:44:24Z", "closed_at": "2020-03-12T13:44:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Following up on #3192 I want to start moving `clone()` to the core API. This is also related to the ongoing discussion on scope and behavior of `install` and `get`.\r\n\r\nAt the moment, `clone` is pretty much taking all arguments defined by `install` as-is, and implements all non-get functionality of `install`. For a transition to the core API I think it mandatory to discuss the status quo of the `clone` API and identify issues that should be addressed beforehand.\r\n\r\n### --reckless\r\nOne issue I personally have is the boolean nature of the `reckless` option. Similar to other commands, we should switch to a mode-style option with literal mode labels as expected values. This would already be useful in tailoring the \"recklessness style\" in scenarios such as throw-away clones that were mentioned in https://github.com/datalad/datalad/issues/3887 and where a related implementation is available in an extension https://github.com/datalad/git-annex-ria-remote/pull/31\r\n\r\n### --alternative-sources\r\nMoreover, I think we should discuss the need for `--alternative-sources` (`alt_sources`). This is a primarily (if not exclusively) internally used option. Its existence is probably due to me not properly reflecting on what is needed, and avoiding a larger RF.\r\n\r\nNowadays we have the `datalad.get.subdataset-source-candidate-<name>` (consider rename?) config mechanism that covers some of that in a more flexible way (templating support), and functionality such as \"also look at URL + `/.git`\" can be RF'ed to move inside `clone`.\r\n\r\n### --message\r\n\r\nImplicitly requested by https://github.com/datalad/datalad/issues/3882 and confirmed by https://github.com/datalad/datalad/issues/3896\r\n\r\n### default return value\r\n\r\nATM the Python command gives a single-item list with a result dict for the installed dataset. IMHO it would be more useful to change the defaults to:\r\n\r\n`clone(..., result_xfm='datasets', return_type='item-or-list')`\r\n\r\nsuch that a single dataset instance is returned.\r\n\r\n### behavior on clone into non-empty location\r\n\r\nATM clone would fail with\r\n\r\n```\r\n{'action': 'install',\r\n 'path': '/tmp/~/forrest/collection/phase2',\r\n 'type': 'dataset',\r\n 'status': 'error',\r\n 'message': 'target path already exists and not empty, refuse to clone into target path',\r\n ...}\r\n```\r\nI think it would be worth considering a check if the location actually contains a dataset from the source that was given, and issue a `notneeded` result in this case, instead of a failure. In combination with a change in the default return value, this would enable the same idempotent behavior that `install` is offering for already present subdatasets.\r\n\r\n### related issues with potential implications for behavior changes\r\n\r\n- configure origin of a clone *source* as a remote https://github.com/datalad/datalad/issues/3926\r\n- throw-away clones https://github.com/datalad/datalad/issues/3887\r\n\r\nWhat do you think @datalad/developers ?", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/3957/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/3957/timeline", "performed_via_github_app": null}