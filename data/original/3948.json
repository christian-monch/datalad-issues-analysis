{"url": "https://api.github.com/repos/datalad/datalad/issues/3948", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/3948/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/3948/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/3948/events", "html_url": "https://github.com/datalad/datalad/pull/3948", "id": 540035819, "node_id": "MDExOlB1bGxSZXF1ZXN0MzU0OTExOTUw", "number": 3948, "title": "NF: search - --mode pyeval which evaluates python expression on provided metadata", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 1453907298, "node_id": "MDU6TGFiZWwxNDUzOTA3Mjk4", "url": "https://api.github.com/repos/datalad/datalad/labels/stale-PR-closed-without-merge", "name": "stale-PR-closed-without-merge", "color": "ffffff", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2019-12-19T02:28:02Z", "updated_at": "2021-02-17T18:55:15Z", "closed_at": "2021-02-17T18:55:05Z", "author_association": "MEMBER", "active_lock_reason": null, "pull_request": {"url": "https://api.github.com/repos/datalad/datalad/pulls/3948", "html_url": "https://github.com/datalad/datalad/pull/3948", "diff_url": "https://github.com/datalad/datalad/pull/3948.diff", "patch_url": "https://github.com/datalad/datalad/pull/3948.patch"}, "body": "This mode is motivated by question on OpenNeuro\r\nhttps://neurostars.org/t/fast-tr-open-task-fmri-datasets/5601\r\non how to find datasets/files with sub-second TR.\r\n\r\nUnfortunately\r\n\r\n- egrep mode is too crude since relies on dealing with string\r\n  representation of values, so would be inconvenient to generate regular\r\n  expression and less efficient than simply comparing numerical values.\r\n\r\n- whoosh based implementations relying on constructing index could work if\r\n  custom index was first created. But we would need to implement\r\n  interface for specifying index, and initial invocation would be quite slow\r\n  since first it would need to establish index and then run the query.\r\n  For one time invocation might be too much.  For any complicated query it\r\n  would also require learning woosho syntax first.\r\n\r\nWith pyeval we would enable an arbitrarily complex queries which could be\r\nexpressed as a python expression.  That would even allow for use of types'\r\nmethods (e.g. .lower() or even .format() on string values) and operations\r\n(+, -, etc) making it quite flexible and versatile.  Many users (if not most)\r\nwould be able to easily construct such queries.\r\n\r\nSample invocation:\r\n\r\n```shell\r\n$> datalad -f '{path}: {metadata[bids][RepetitionTime]}' -c datalad.search.index-pyeval-documenttype=all search -d /// --mode pyeval \"(bids['type'] == 'bold') and (bids['RepetitionTime'] < 1)\"\r\n/home/yoh/datalad/dbic/QA/sourcedata/sub-emmet/ses-20180521/func/sub-emmet_ses-20180521_task-rest_acq-3mm_bold.dicom.tgz: 0.426\r\n/home/yoh/datalad/dbic/QA/sourcedata/sub-emmet/ses-20180531/func/sub-emmet_ses-20180531_task-rest_acq-3mm_bold.dicom.tgz: 0.426\r\n/home/yoh/datalad/dbic/QA/sub-emmet/ses-20180521/func/sub-emmet_ses-20180521_task-rest_acq-3mm_bold.nii.gz: 0.426\r\n/home/yoh/datalad/dbic/QA/sub-emmet/ses-20180531/func/sub-emmet_ses-20180531_task-rest_acq-3mm_bold.nii.gz: 0.426\r\n/home/yoh/datalad/dbic/QA/sub-qa/ses-20161128/func/sub-qa_ses-20161128_task-rest_acq-p2Xs4X35mm_bold.nii.gz: 0.525\r\n/home/yoh/datalad/dbic/QA/sub-qa/ses-20161205/func/sub-qa_ses-20161205_task-rest_acq-p2Xs4X35mm_bold.nii.gz: 0.525\r\n...\r\n```\r\n\r\nTODOs (here or later elsewhere):\r\n\r\n- [ ] Common base for `egrep` and `pyeval`.  This crude prototype was coded by\r\n  taking `egrep` implementation.  Both are naive search by looping through\r\n  provided to them records.  I think we might want\r\n  RF to provide a common \"looping\" and possibly generalized treatment for\r\n  keys reporting etc.  That would allow for centralized optimization (e.g.\r\n  parallel execution). etc\r\n- [x] see if there is a way to OPT that `eval` on the same expression over and over again (probably just use [compile](https://www.geeksforgeeks.org/python-compile-function/))\r\n- [ ] should we open the door to `exec` ? (multiple statements could be taken as parts of the `matcher` function body intended to return `bool`) .\r\n- [ ] RF search (at least of `egrep` and `pyeval`) so we could limit by number of hits per dataset (#2935).\r\n  - [ ] generalize to allow to \"group\" within a dataset based on some additional keys (e.g., could be a `subject` field for BIDS)\r\n  - [ ] groupping for query (\"dataset + subject\") and \"reporting\" (\"dataset\") could be different... \r\n  - [ ] flag `--report-missing`, makes sense only if groupping enabled, and would report groups where not a single match happened.  Use case: \"find datasets (or subjects within a dataset) missing some particular file type\"\r\n- [ ] with aforementioned RF to make it dataset/files nested loop - we could provide `matcher` with both metadata for the record and for the parentds (if a file), making it possible to make joint inquiry based on metadata of the dataset and the file (we do not have any other \"levels\" or \"grouppings\" such as subject ATM, but that might change ;-))\r\n- [ ] docs\r\n\r\nNotes:\r\n\r\n<details>\r\n<summary> On a prototypical run, seems to be about twice faster than egrep version</summary> \r\n\r\n```shell\r\n$> time datalad -f '{path}: {metadata[nifti1][dim]}  {metadata[bids][RepetitionTime]}' -c datalad.search.index-egrep-documenttype=all search -d ~/datalad/openneuro --mode egrep bids.type:bold 'bids.RepetitionTime:1(\\.0*)*$' 2>&1 | nl | tail -n 3\r\n   660\t/home/yoh/datalad/openneuro/ds001720/sub-238/ses-1/func/sub-238_ses-1_task-rest_acq-EPI_bold.nii.gz: [4, 90, 12, 70, 450, 1, 1, 1]  1\r\n   661\t/home/yoh/datalad/openneuro/ds001720/sub-239/ses-1/func/sub-239_ses-1_task-rest_acq-EPI_bold.nii.gz: [4, 90, 12, 70, 450, 1, 1, 1]  1\r\n   662\t/home/yoh/datalad/openneuro/ds001720/sub-240/ses-1/func/sub-240_ses-1_task-rest_acq-EPI_bold.nii.gz: [4, 90, 12, 70, 450, 1, 1, 1]  1\r\ndatalad -f '{path}: {metadata[nifti1][dim]}  {metadata[bids][RepetitionTime]}  5.86s user 0.24s system 100% cpu 6.073 total\r\nnl  0.01s user 0.00s system 0% cpu 6.073 total\r\ntail -n 3  0.00s user 0.00s system 0% cpu 6.073 total\r\n(dev3) 1 12899.....................................:Thu 19 Dec 2019 09:24:06 AM EST:.\r\nlena:/tmp\r\n$> time datalad -f '{path}: {metadata[nifti1][dim]}  {metadata[bids][RepetitionTime]}' -c datalad.search.index-pyeval-documenttype=all search -d ~/datalad/openneuro --mode pyeval \"(bids['type'] == 'bold') and (bids['RepetitionTime'] == 1)\" 2>&1 | nl | tail -n 3\r\n   660\t/home/yoh/datalad/openneuro/ds001720/sub-238/ses-1/func/sub-238_ses-1_task-rest_acq-EPI_bold.nii.gz: [4, 90, 12, 70, 450, 1, 1, 1]  1\r\n   661\t/home/yoh/datalad/openneuro/ds001720/sub-239/ses-1/func/sub-239_ses-1_task-rest_acq-EPI_bold.nii.gz: [4, 90, 12, 70, 450, 1, 1, 1]  1\r\n   662\t/home/yoh/datalad/openneuro/ds001720/sub-240/ses-1/func/sub-240_ses-1_task-rest_acq-EPI_bold.nii.gz: [4, 90, 12, 70, 450, 1, 1, 1]  1\r\ndatalad -f '{path}: {metadata[nifti1][dim]}  {metadata[bids][RepetitionTime]}  2.62s user 0.19s system 100% cpu 2.787 total\r\nnl  0.01s user 0.00s system 0% cpu 2.787 total\r\ntail -n 3  0.00s user 0.00s system 0% cpu 2.787 total\r\n```\r\n</details>\r\n\r\n", "closed_by": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/3948/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/3948/timeline", "performed_via_github_app": null}