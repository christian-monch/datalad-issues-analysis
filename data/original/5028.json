{"url": "https://api.github.com/repos/datalad/datalad/issues/5028", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/5028/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/5028/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/5028/events", "html_url": "https://github.com/datalad/datalad/issues/5028", "id": 720057074, "node_id": "MDU6SXNzdWU3MjAwNTcwNzQ=", "number": 5028, "title": "Support `git-credentials` as a credential provider ", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778592, "node_id": "MDU6TGFiZWw2Mzc3ODU5Mg==", "url": "https://api.github.com/repos/datalad/datalad/labels/enhancement", "name": "enhancement", "color": "0052cc", "default": true, "description": ""}, {"id": 2919091393, "node_id": "MDU6TGFiZWwyOTE5MDkxMzkz", "url": "https://api.github.com/repos/datalad/datalad/labels/credentials", "name": "credentials", "color": "768F68", "default": false, "description": "Issues concerning credential(-management)"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-10-13T09:37:59Z", "updated_at": "2021-07-17T10:13:02Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "It provides a nice and extensible, that is uniform across platforms.\r\n\r\n`man 7 gitcredentials`\r\n\r\nParticularly attractive are the following aspects:\r\n\r\n- a single `git` command to support (`git credential`), all others can simply comply with the API defined by `git -- this includes datalad's own credential support\r\n- separation of `fill` and `approve` functionality that allows for testing credentials before they are stored\r\n\r\nHowever, it is sufficiently different from our credential setup to make things difficult to integrate.\r\n\r\nIt can only do user/pass, which may suggest that we should only amend the `UserPassword` credential to query the git credentials.\r\n\r\nHowever, our use of the python keyring pretty much abuses it to store user/password credentials with actually two credentials that are similarly named. So it could also be seen a more capable, by providing credential pairs.\r\n\r\nSo there are pretty much two ways.\r\n\r\n1. Implement support for git credentials within `Credential` in DataLad (either as a fallback or a priority)\r\n2. Or redoing `Credential` sitting on top of `git credential` and providing the python keyring support as a git credential helper\r\n\r\nI am presently leaning towards (1).\r\n\r\nA bunch of questions need answers to determine the most sensible implementation\r\n\r\n- Can `git credential` be used to probe for the presence of a credential? If not, it cannot provide the `known()` feature of `Credential()` and we can only use it as a fallback.\r\n\r\n  It seems this is possible! Prompting can be disabled like so:\r\n  \r\n  ```\r\n  % echo url=http://example.com | GIT_ASKPASS=true git credential fill  \r\n  protocol=http\r\n  host=example.com\r\n  username=\r\n  password=\r\n  ```\r\n  This could not distinguish between an unset and a credential set to empty.\r\n\r\n- ATM we implement are own credential entry via `ui.question()`. It only works in the terminal, and has usability issues (Ctrl-C behavior is flaky). OTOH `git credential fill` supports launching credential entry helpers via all the standard setups, incl `SSH_ASKPASS`. Is this a feature worth adopting?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/5028/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/5028/timeline", "performed_via_github_app": null}