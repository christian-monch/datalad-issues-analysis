{"url": "https://api.github.com/repos/datalad/datalad/issues/5883", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/5883/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/5883/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/5883/events", "html_url": "https://github.com/datalad/datalad/pull/5883", "id": 964534828, "node_id": "MDExOlB1bGxSZXF1ZXN0NzA2OTc4MzMx", "number": 5883, "title": "RF Exception reporting - part 2", "user": {"login": "bpoldrack", "id": 10498301, "node_id": "MDQ6VXNlcjEwNDk4MzAx", "avatar_url": "https://avatars.githubusercontent.com/u/10498301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpoldrack", "html_url": "https://github.com/bpoldrack", "followers_url": "https://api.github.com/users/bpoldrack/followers", "following_url": "https://api.github.com/users/bpoldrack/following{/other_user}", "gists_url": "https://api.github.com/users/bpoldrack/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpoldrack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpoldrack/subscriptions", "organizations_url": "https://api.github.com/users/bpoldrack/orgs", "repos_url": "https://api.github.com/users/bpoldrack/repos", "events_url": "https://api.github.com/users/bpoldrack/events{/privacy}", "received_events_url": "https://api.github.com/users/bpoldrack/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 3049454381, "node_id": "MDU6TGFiZWwzMDQ5NDU0Mzgx", "url": "https://api.github.com/repos/datalad/datalad/labels/minor", "name": "minor", "color": "f1a60e", "default": false, "description": "Increment the minor version when merged"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/datalad/datalad/milestones/86", "html_url": "https://github.com/datalad/datalad/milestone/86", "labels_url": "https://api.github.com/repos/datalad/datalad/milestones/86/labels", "id": 6382960, "node_id": "MDk6TWlsZXN0b25lNjM4Mjk2MA==", "number": 86, "title": "0.15.0", "description": "", "creator": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 22, "state": "open", "created_at": "2021-02-02T14:46:01Z", "updated_at": "2021-09-10T17:50:04Z", "due_on": null, "closed_at": null}, "comments": 7, "created_at": "2021-08-10T02:24:10Z", "updated_at": "2021-09-06T10:51:52Z", "closed_at": "2021-09-06T10:51:51Z", "author_association": "MEMBER", "active_lock_reason": null, "pull_request": {"url": "https://api.github.com/repos/datalad/datalad/pulls/5883", "html_url": "https://github.com/datalad/datalad/pull/5883", "diff_url": "https://github.com/datalad/datalad/pull/5883.diff", "patch_url": "https://github.com/datalad/datalad/pull/5883.patch"}, "body": "Follow-up on #5691.\r\n\r\nThis PR introduces some enhancements to the new `CapturedException` class and goes through every invocation of `exc_str` and `exc_str_old`, replacing (and deprecating) it and trying to achieve several things with respect to our exception reporting:\r\n\r\n1. If we log an exception, do so only where an exception is catched, not where it is (re-)raised!\r\nAt some spots we still do log the same thing several times. I think the original idea was to produce some kind of a traceback leaving a log entry wherever an exception passes through. This is unnecessary and almost always just annoying double-(or multi)-reporting. The exception logging captures a full traceback including the `__context__` and `__cause__` if an exception was `raised from` and/or happened within an `except` clause. The latest spot has all the info - we only need to log it where we catch it (if only at the outermost layer) and react to it (if only by failing). That's the meaningful spot.\r\n\r\n2. When we log or report on (results, or direct user message) exceptions, we should separate a message that is potentially meaningful for a mortal and the technical info on what exactly the exception was and what its traceback is. If really necessary, the former can still contain part of the latter, but the potentially scary and confusing depiction of the exception is a separate thing.\r\nThat's what `CapturedException.log()` is for: You pass a message that's supposed to tell what's going on in datalad and that is meaningful/actionable for users. If `datalad.log.exc` is enabled, that record gets enhanced w/ a message reading \"Reason for message above:\" and the full exception log. When we ever (and I think this is a step to make that more likely) get to properly iron out user messaging and logging, I think `datalad.log.exc` should then be enabled by default for logging into logfiles and by default be disabled for terminal output.\r\nThis separation also is the reason to change the default for the `limit` of the depth of the traceback that is included in the \"technical\" message from `1` to `None` - now that this is it's own message that needs to be enabled, it can as well be as complete as possible by default.\r\n\r\n3. When we reraise with a new message (whether or not same type of exception), that message should NOT include the full exception logging. The meaningful thing is to enhance or change the message. Hence the new message may be based on the old message, but the inclusion of the old type and its traceback is wrong. Instead `NewError raise from OldError` injects a `__cause__` to `NewError` and wherever `NewError` is logged, it will have the traceback including that from `OldError`.\r\n\r\n4. For result records the same principle applies: user and \"debug\" message should be separated. @yarikoptic already introduced a modification to `get_status_dict` that, if `exception` is passed, creates an `exception_traceback` entry. I stuck with that for now, so that `message` is formed the way a default log message would be and pass the `CapturedException` object to `exception`. `get_status_dict` then adds the `exception_traceback` field. I enhanced that to actually keep the `exception` filed (Yarik didn't), so that in python (or result renderers) you have access to the `CapturedException` instance, providing several ways of \"stringifying\" that exception. Ultimately, this should not live in `get_status_dict` (which isn't used everywhere), but be matter of result renderers. However, I think this is best done with an RF'ing to make renderers actual classes (that custom ones can inherit from).\r\n\r\n---------------------------\r\n\r\nTo ease review/discussion, here come some points to look at.\r\nIt does make sense to get an idea of the current state of `CapturedException` first, of course: https://github.com/datalad/datalad/pull/5883/commits/ef6b868909e841d31e05ef91a4862ba2827f3219\r\n\r\nThere are several kinds of changes throughout all the files:\r\n\r\n- Simply separating the \"technical\" message out. Have what's usually meaningful in the message and let `datalad.log.exc` add details if required. Example: https://github.com/datalad/datalad/pull/5883/commits/511b8be688a1ab388e561f1f387e5ef21e451707#diff-35dad0480a094dee25a5777749e74e0d983b4dc742f3b9834230dba46f3f6619L357\r\n\r\n- Use `raise from` when we reraise, instead of including the original exception as text (see point 3). Example: https://github.com/datalad/datalad/pull/5883/commits/6c589c5bcc9f5cbb7b6a6752f6a5f74dc53799f9#diff-94f9b0e4cdbcfe44b244bbf4450719d1034680f27d3a1cef81393694ed7d6e08L520\r\n\r\n- For result dicts, have the respective \"default message\" in `message` and add the `CapturedException` to the `exception` field. `get_status_dict` does then add `exception_traceback`. Example: https://github.com/datalad/datalad/pull/5883/commits/13bf1626c003c1b6c0e934f5591804383e5db70b#diff-e378e274f6a8ae458d174d8e6df74ceca070cc8266670ebd1d94c46ffe9ff17eR189\r\n\r\nChange to `get_status_dict`: https://github.com/datalad/datalad/pull/5883/commits/13bf1626c003c1b6c0e934f5591804383e5db70b#diff-092358c734aa136a079bbd581698442c22878877b79687b310cd838a1bc82653L92\r\n\r\n- One of the main issues, I think, is us being to broad and unspecific, just dumping shit for the user to deal with, instead of assessing what's going on. This comes mainly in two forms: `except Exception` and `except CommandError`. I didn't change any of that, since this is not what the PR is about really, but those two tend to be similar: We actually can (often) know better, but don't do it. For the `CommandError` dumping that is: Something called a subprocess that failed. The caller knows what was called and can usually make an assessment of possible consequences or tell what kind of thing went wrong how. Ideally, say `fetch` would catch `CommandError` and reraise a `GitFetchError` or something like that and that new Exception can come with a proper message that was parsed from git's output and took into account whatever may be relevant from within the knowledge of the caller. Instead, we tend to just pass on the generic `CommandError` and higher up it may be harder to know what to look for to form a huan-digestable message. Dumping `CommandError`'s message my contain the relevant output of the subprocess, but it also contains a lot of distracting, generic stuff, since it's raised by the runner and that one isn't supposed to know a lot about each and every possible subprocess we may want to call. Anyways - that's just something to take note of and to do better. For now, however, I usually went for generating the message from the output instead of taking the entire \"message\" of `CommandError`, by `e.stderr or e.stdout or e.to_str()`. This means to look at stderr first (it's almost always git/git-annex - they do report an issue on stderr `fatal: ....`. That's the only part that usually is informative for a user when something is failing - buried under lots of irrelevant things. `or e.to_str()` makes the formerly used `exc_str` or `str` of `CommandError` still the fallback if there was no output. Example: https://github.com/datalad/datalad/pull/5883/commits/511b8be688a1ab388e561f1f387e5ef21e451707#diff-2329d131e6de4ec3957da6b6122869ee6b8e490ac65162461ed767dc0d6cef59L593\r\n\r\n\r\n- For some spots it's perfectly fine to use the standard `str(e)` in messages. That's another point: At some spots it seems that authors weren't aware what `exc_str` actually adds over just `str`. That is: A questionable magic to decide whether to show the exception's name or its message and the option to put the traceback in that string. The former is questionable, because it very much depends on the exception whether or not the exception's name carries relevant information and whether or not the message can stand on its own. And what is the case is not our under control for any exception coming from third-party code. The latter part was nice, but is something that shouldn't be in a result message for example. It's useful for logging only. So: If it's simply about the exception's message and the exception isn't logged at that spot (in which case one can use the already created `CapturedException`): `str(e)` is perfectly fine!\r\nExample: https://github.com/datalad/datalad/pull/5883/commits/6c589c5bcc9f5cbb7b6a6752f6a5f74dc53799f9#diff-37fba60e98afe87a28f73afa6b5bbc3410bad59901363e26256da5584cec265cL623\r\n\r\n\r\n- Things are a bit different for special remotes, since their messaging to annex isn't exactly \"logging\". They are also usually a bit painful to debug. Therefore, I went for always including the full detail for now, like here: https://github.com/datalad/datalad/pull/5883/files#diff-67b52fecf48cc364bc9f19345991f2d3f87c11bdbde3cfc9ea16526b422d08b5L393 This is independent of `datalad.log.exc`! Agree, @yarikoptic ? While at it I stumbled upon something else - @yarikoptic Please have a look at this comment please: https://github.com/datalad/datalad/pull/5883/files#diff-67b52fecf48cc364bc9f19345991f2d3f87c11bdbde3cfc9ea16526b422d08b5R326 If we agree, that should become an issue (or a PR ;-) )\r\n\r\n- Finally, https://github.com/datalad/datalad/pull/5883/files#diff-eec184e266c9aa336ee741b532169a76e4e2f52759f03ab4ab2dfa9a4d69ddcaR2057\r\nand https://github.com/datalad/datalad/pull/5883/files#diff-eec184e266c9aa336ee741b532169a76e4e2f52759f03ab4ab2dfa9a4d69ddcaR2235 is the same comment. @yarikoptic : Given that the `logger` parameter of those decorators isn't actually used anywhere, we could as well change to passing the logger, rather than a callable, I think. Objections?\r\n\r\nTODO:\r\n- [x] check outermost catch\r\n- [x] ~Remove~ deprecate `exc_str` + `exc_old_str`\r\n- [x]  rebase with proper commit messages\r\n- [x] Ease review by pointing out example cases and linking into the diff. Nobody will go through > 60 files.\r\n- [x] double check for other related issues than the already linked one\r\n\r\n\r\nCloses #5848\r\nCloses #5716", "closed_by": {"login": "bpoldrack", "id": 10498301, "node_id": "MDQ6VXNlcjEwNDk4MzAx", "avatar_url": "https://avatars.githubusercontent.com/u/10498301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpoldrack", "html_url": "https://github.com/bpoldrack", "followers_url": "https://api.github.com/users/bpoldrack/followers", "following_url": "https://api.github.com/users/bpoldrack/following{/other_user}", "gists_url": "https://api.github.com/users/bpoldrack/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpoldrack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpoldrack/subscriptions", "organizations_url": "https://api.github.com/users/bpoldrack/orgs", "repos_url": "https://api.github.com/users/bpoldrack/repos", "events_url": "https://api.github.com/users/bpoldrack/events{/privacy}", "received_events_url": "https://api.github.com/users/bpoldrack/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/5883/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/5883/timeline", "performed_via_github_app": null}