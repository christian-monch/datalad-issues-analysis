{"url": "https://api.github.com/repos/datalad/datalad/issues/5240", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/5240/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/5240/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/5240/events", "html_url": "https://github.com/datalad/datalad/issues/5240", "id": 761773013, "node_id": "MDU6SXNzdWU3NjE3NzMwMTM=", "number": 5240, "title": "install.py: flexible/modular and easy on user (next round)", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": {"login": "jwodder", "id": 98207, "node_id": "MDQ6VXNlcjk4MjA3", "avatar_url": "https://avatars.githubusercontent.com/u/98207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwodder", "html_url": "https://github.com/jwodder", "followers_url": "https://api.github.com/users/jwodder/followers", "following_url": "https://api.github.com/users/jwodder/following{/other_user}", "gists_url": "https://api.github.com/users/jwodder/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwodder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwodder/subscriptions", "organizations_url": "https://api.github.com/users/jwodder/orgs", "repos_url": "https://api.github.com/users/jwodder/repos", "events_url": "https://api.github.com/users/jwodder/events{/privacy}", "received_events_url": "https://api.github.com/users/jwodder/received_events", "type": "User", "site_admin": false}, "assignees": [{"login": "jwodder", "id": 98207, "node_id": "MDQ6VXNlcjk4MjA3", "avatar_url": "https://avatars.githubusercontent.com/u/98207?v=4", "gravatar_id": "", "url": "https://api.github.com/users/jwodder", "html_url": "https://github.com/jwodder", "followers_url": "https://api.github.com/users/jwodder/followers", "following_url": "https://api.github.com/users/jwodder/following{/other_user}", "gists_url": "https://api.github.com/users/jwodder/gists{/gist_id}", "starred_url": "https://api.github.com/users/jwodder/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/jwodder/subscriptions", "organizations_url": "https://api.github.com/users/jwodder/orgs", "repos_url": "https://api.github.com/users/jwodder/repos", "events_url": "https://api.github.com/users/jwodder/events{/privacy}", "received_events_url": "https://api.github.com/users/jwodder/received_events", "type": "User", "site_admin": false}], "milestone": null, "comments": 23, "created_at": "2020-12-11T01:30:10Z", "updated_at": "2021-01-05T21:31:06Z", "closed_at": "2021-01-05T21:31:06Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "# Preamble:\r\n\r\nThis is another attempt to formalize idea, previously done in https://github.com/datalad/datalad/issues/5181 but it already grew too long. With #5181 in mind:\r\n\r\n- I felt \"schema\" is \"off\" in its meaning, so I will use \"method\"\r\n- if we are not to use argparse, then reflecting on your [analysis above](https://github.com/datalad/datalad/issues/5181#issuecomment-732344347) I think the easiest/least confusing setup would be `-e|--extra-args \"--opt1 --opt2 val ...\"`, so consider `[-e \"...\"]` below to correspond to it.  Every method would pass them into underlying \"main\" command.\r\n\r\n## Note about possible implementation/future extensions\r\n\r\nMy thinking (might be not without flaws, please voice your concerns): make \"methods\"s generic (with those methods specific options listed below), so overall setup at large could be just a \"specification\" which would be fed into methods.  All the components, in particular it is obvious with  `git-annex` and `datalad` components, are just \"packages\" which could be installed through the same underlying commands for a given methods (well - distribution), and often matching the name in the methods/distribution to the component  (not always the case, thus in datalad-extensions we similarly allow for mapping of pip/github names, see https://github.com/datalad/datalad-extensions/blob/master/extensions.yaml).\r\n\r\nSo each method \"handler\" would have signature `def methodsname(component, option1=somedefault, ... extra_args=None)` where those `option*`s are specific for each method (per description above), defaults are provided in the spec (see below), and `extra_args` would be the extra arguments which are passed  from cmdline directly into underlying command  as is (having `conda-env` case in mind, but applies also to ). Data structure (below) would provide defaults for `parameters` . `methodsname` could match above methods (just having `-` replaced with `_`).\r\n\r\nMany methods are OS-specific so should not be considered if current OS is not \"matching\" (so may be 'methods' should be a class to bind relevant aspects/parameters together).\r\n\r\nDefine a data structure which would provide parameters per component for various methods, and then corresponding \"methods handlers\" would just use those parameters and options provided on cmdline to install them.  Later we will add other similar components (`datalad-neuroimaging`, `datalad-container`, ...) and this approach should generalize to them as well. So it could be something like below, where empty dict (`{}`) just means that no overrides of defaults, but that method is supported.\r\n```\r\n{\r\n 'datalad' : {\r\n   'apt': {},\r\n   'conda': {\r\n     'channel': 'conda-forge'\r\n   },\r\n   'deb-url': {},\r\n   ...\r\n   'pip': {\r\n     'git': \"https://github.com/datalad/datalad\",\r\n   }\r\n },\r\n 'miniconda': {\r\n   'miniconda-installer': {}\r\n },\r\n 'venv': {\r\n   'venv-python': {}\r\n },\r\n 'git-annex': {\r\n   ...\r\n },\r\n}\r\n```\r\n\r\nThis way there could be a nice an concise specification, which we could easily extend with additional components.\r\n\r\n# Specifics/answers:\r\n\r\n> @yarikoptic To start, I am going to need a list of the following desired features:\r\n> \r\n> * all of the global options\r\n\r\n```\r\n  -h, --help\r\n  -v, --version\r\n  -l LEVEL, --log-level LEVEL\r\n      Log level # (similar to what we have in datalad, dandi etc)\r\n  -E ENV_WRITE_FILE, --env-write-file ENV_WRITE_FILE\r\n      Append shell instructions to modify environment to the file (could be specified multiple times and be ~/.bashrc)\r\n```\r\n\r\nso it should not just write in it `export PATH=path2add:path1:path2...` but rather `export PATH=path2add:$PATH`, and could be specified multiple times, so we could do `-E new.env -E ~/.bashrc` and thus get file for immediate `source`'ing and also persistent for next sessions.  While adding to an existing file, should verify that there is a trailing newline and we do not just append to the end of the last line.\r\n\r\n> * all of the components\r\n\r\nfrom top description:\r\n\r\n- miniconda\r\n- venv\r\n- conda-env\r\n- git-annex\r\n- datalad\r\n\r\nbut see below -- we can get more after\r\n\r\n> * which components take versions\r\n\r\nI see only\r\n\r\n- git-annex\r\n- datalad\r\n\r\nbut may be it is better to not bother with `=version` sugaring (at least for now, unless you just do it), and just add `--version` for methods which support version specification.\r\n\r\n> * all of the per-component options\r\n\r\nTo simplify I decided to move them into \"method\" options, see below\r\n\r\n> * all of the schemata allowed for each component\r\n\r\nI think overall definition of cmdline invocation could be simplified to the following:\r\n\r\n```\r\n[--global-options] COMPONENT1 [-m|--method=auto] [--opt1 ... [-e \"...\"]] [--] COMPONENT2 ...\r\n```\r\n\r\nwith `--` allowed to be used explicitly where necessary.\r\n\r\nI find \"schema\" a \"bit off\".  Since we are not talking about \r\n\r\n> * all of the schema-specific options\r\n\r\nFor all I added explicit \"auto\" and those `miniconda-installer` (for miniconda) and `venv-python` for `venv` for consistency so there is a consistent \"component : method\" relationship, even when there is only one method.  Some methods will be \"component-aware\" (like `installer` and `python`), but others (e.g. `apt`) - generic as described in prior section.\r\n\r\n- miniconda\r\n  - auto\r\n  - miniconda-installer: `[--path PATH] [--batch] [--spec SPEC] [-e \"...\"]`\r\n     - if there is a `--spec SPEC` -- runs `conda install ... SPEC_SPLIT` in the base new miniconda environment\r\n     - since [conda allows for no-spaces spec](https://docs.conda.io/projects/conda-build/en/latest/resources/package-spec.html) we can split `SPEC` on spaces and thus allow for composite `--spec \"datalad==0.13.5 rclone<1.53 datalad-neuroimaging\"`\r\n- venv\r\n  - auto\r\n  - venv-python: `--path PATH [-e \"...\"]`\r\n- conda-env\r\n  - auto\r\n  - conda-env: `-n NAME [--spec SPEC] [-e \"...\"]`\r\n- git-annex\r\n  - auto\r\n  - apt: [--version VERSION] [--build-dep] [-e \"...\"]\r\n    - for `--build-dep` run `apt build-dep` instead of `apt install`.  That requires `deb-src` lines present in `/etc/apt/sources.list{,.d/*list}` but let's assume it is out of the scope here, may be will assist later\r\n  - autobuild\r\n  - brew (OSX only): [ --version VERSION] [-e \"...\"]\r\n  - conda:  [ --version VERSION] [-e \"...\"]  # extra_args passed to `conda install`\r\n  - datalad/annex\r\n  - deb-url (Debian-based only)\r\n  - neurodebian (Debian-based only): [-e \"...\"]  # same as apt, just with pre-setup\r\n  - neurodebian-devel (Debian-based only):  [-e \"...\"]  # same as apt, just with pre-setup\r\n  - snapshot\r\n- datalad  # to be assumed a default component if none specified\r\n  - auto\r\n  - apt:  # same as for git-annex\r\n  - conda: # same as for git-annex\r\n  - deb-url: # same as for git-annex\r\n  - neurodebian: # same as for git-annex\r\n  - neurodebian-devel: # same as for git-annex\r\n  - pip: [--devel] [--version VERSION] [-E|--extras EXTRAS] [-e \"...\"]  # passed to `pip install`\r\n      - `--devel` would install straight from github\r\n      - `VERSION` could be a path or committish in case of `--devel`.\r\n         - takes url from `git` option and runs `pip install url[@version]`\r\n      - `EXTRAS` is for `pip install [extra_opts] COMPONENT[extras]` (in devel or not)\r\n\r\n# Examples\r\n\r\nSo a few ultimate examples from the initial description adjusted for above\r\n\r\n- `install.py [datalad]` (or `install.py git-annex`) on my laptop whenever I am not in any venv conda should just end up running `sudo apt-get install datalad` (or git-annex), and it would install it in conda if I am in conda, or using brew if I am on OSX with brew.  So it is the most frequent (but should become most \"flexible\" based on the environment method)\r\n\r\n- `install.py miniconda --path /tmp/mini conda-env -n datalad-dev datalad` - would install datalad (and thus git-annex and what not) in a new miniconda within datalad-dev environment\r\n\r\n- `install.py miniconda --spec python=3.9 datalad -e --only-dep` - would install datalad dependencies only (and thus git-annex and what not) in a new miniconda (in the base env) with python 3.9 for which it would tell me the PATH, so I can just `pip install -e .[devel]` to develop/debug\r\n\r\n- `install.py miniconda datalad --devel [--version maint]` - would install master (or `maint`) straight from github -- a command to give users if they need to try fixed datalad:\r\n   - we could instruct users `--version refs/pull/5239/merge` to e.g. try current state of\r\n     the https://github.com/datalad/datalad/pull/5239 in a new miniconda environment, so they would not effect their current one!\r\n\r\n- `install.py venv datalad --version=0.13.2` - create a new (in a temp dir) venv with pip installed old datalad\r\n\r\n## Extra notes\r\n\r\n- all temporary \"randomly named\" directories should carry some meaningful prefix, which would start with `dl-` but expanded with corresponding component, e.g. `dl-miniconda-` or `dl-venv-` (we already use `dl-` and `datalad-` prefixes)", "closed_by": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/5240/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/5240/timeline", "performed_via_github_app": null}