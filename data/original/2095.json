{"url": "https://api.github.com/repos/datalad/datalad/issues/2095", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/2095/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/2095/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/2095/events", "html_url": "https://github.com/datalad/datalad/pull/2095", "id": 291273453, "node_id": "MDExOlB1bGxSZXF1ZXN0MTY1NTYxMzgx", "number": 2095, "title": "Change representation of aggregated metadata", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 374318336, "node_id": "MDU6TGFiZWwzNzQzMTgzMzY=", "url": "https://api.github.com/repos/datalad/datalad/labels/conference%20agenda%20item", "name": "conference agenda item", "color": "fbca04", "default": false, "description": "Scheduled to be discussed in a developer meeting"}, {"id": 449733138, "node_id": "MDU6TGFiZWw0NDk3MzMxMzg=", "url": "https://api.github.com/repos/datalad/datalad/labels/WIP", "name": "WIP", "color": "fbca04", "default": false, "description": "work in progress"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-01-24T16:29:44Z", "updated_at": "2018-02-11T18:01:03Z", "closed_at": "2018-01-29T07:15:59Z", "author_association": "MEMBER", "active_lock_reason": null, "pull_request": {"url": "https://api.github.com/repos/datalad/datalad/pulls/2095", "html_url": "https://github.com/datalad/datalad/pull/2095", "diff_url": "https://github.com/datalad/datalad/pull/2095.diff", "patch_url": "https://github.com/datalad/datalad/pull/2095.patch"}, "body": "#### What is the problem?\r\n\r\nThere is a sudden interest in metadata that could change the pace of development and we better get the Datalad internal metadata representation right now.... Here is a dump of a brain storming with @bpoldrack \r\n\r\nThere are a bunch of issues with the current state in master, examples:\r\n- #2086 handling of individual metadata sources as \"blobs\"\r\n- #2087 using git-annex capabilities is least common denominator\r\n- #2088 factoring out the parser logic\r\n- ...\r\n\r\nWe want our internal representation to be as agnostic as possible, while maintaining the integrity of aggregated metadata sources as much as possible. ATM we \"merge\" metadata from multiple sources into a single set. We support multiple strategies, but overall the handling is rather clumsy. Merging actually causes order issues and could have unforeseen implications when we start using many metadata sources with partially overlapping term.\r\n\r\nThat being said, in reality one parser produces mostly keys with a common prefix and merges only affect the most basic common keys (name, author, ...).\r\n\r\nProposal:\r\n\r\n- we stop merging during aggregation, but instead aggregate per metadata source (a NIDM metadata set stays as-is, we are still handling it as part of the general metadata structure, not as a dedicated file)\r\n- we generate unique values also per metadata source (for dataset discovery)\r\n- we store metadata from a single source under its own key in a dedicated dictionary, hence something like this becomes the standard (keys are names of metadata sources)\r\n```\r\nmetadata = {\r\n  'bids': {...},\r\n  'nifti': {...},\r\n  'nidm': {...}\r\n}\r\n```\r\n- keys (and also values) produced by a metadata source will not be modified in any way (no prefixing of any kind)\r\n- appropriate flattening of the metadata structures (now done by an incremental merging strategy during aggregation), becomes a responsibility of a search/query application _using_ the aggregated metadata. It will be its responsibility to select desired metadata sources, flatten/prefix keys for a tabular search index, ...\r\n   - at this layer we can also support mappings between terms that may be developed by efforts like interlex, e.g. if somebody tells us that `bids:resolution` is the same as `nifti:resolution`, or maybe tells us how to transform one to become the other (units, ....)\r\n- now that metadata sources stay independent, they can each have their own \"context\" (in JSON-LD speak), i.e. a (separate) set of term definitions. We probably want to create a dedicated space in the dataset's global metadata to store a uniform context/definition set per metadata source. But ultimately it is up to the metadata sources to use/define this -- datalad just provides the technical means.\r\n- keeping metadata sources separate will also enable straightforward incremental aggregation of individual metadata sources\r\n- we likely want to implement a layer that allows for amending/fixing aggregated metadata to enable modification without having to change the actual dataset content, but that is an orthogonal issue to this one\r\n- git-annex will become just-another-metadata-source, instead of being the top-layer #2087 \r\n\r\n#### What version of DataLad are you using (run `datalad --version`)? On what operating system (consider running `datalad plugin wtf`)?\r\n`datalad from_the_future`\r\n\r\n@yarikoptic @jbpoline @dbkeator @gkiar", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/2095/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/2095/timeline", "performed_via_github_app": null}