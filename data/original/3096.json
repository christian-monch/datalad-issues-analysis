{"url": "https://api.github.com/repos/datalad/datalad/issues/3096", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/3096/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/3096/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/3096/events", "html_url": "https://github.com/datalad/datalad/issues/3096", "id": 393643678, "node_id": "MDU6SXNzdWUzOTM2NDM2Nzg=", "number": 3096, "title": "Unifying \"run\" record to also generalize over to record procedures, addurl etc. runs", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2767259861, "node_id": "MDU6TGFiZWwyNzY3MjU5ODYx", "url": "https://api.github.com/repos/datalad/datalad/labels/cmd-run/rerun", "name": "cmd-run/rerun", "color": "FEF2C0", "default": false, "description": "Issues about the favorite command of ReproPeople"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2018-12-22T05:01:29Z", "updated_at": "2021-02-24T00:00:24Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "I feel that we have multiple \"activities\" going on in the datalad which could benefit from having the nice run record to be able to tell later on how we came about those commits.\r\n\r\n### Procedures\r\nInitial question about adding \"run records\" to the procedure runs was raised in #2947 . Some procedures might not want a run record since they internally would call `datalad run`. And not in all cases we might want to make a run record for a procedure run (examples?). But even if procedure calls `datalad run` inside, and there is nothing left to \"record\", then there would be no \"datalad run\" record since nothing to commit, although it would not leave that nice trace that these commit(s) were created actually by invoking a procedure, and not separate steps.\r\n\r\n### addurls\r\nAddurls already adds information about its invocation, e.g.\r\n```\r\ncommit 51037c36d2e3fca762c0a892c3d92b44d0a510bf\r\nAuthor: rciric <rc042010@mymail.pomona.edu>\r\nDate:   Sat Dec 15 05:14:35 2018 -0800\r\n\r\n    [DATALAD] add files from URLs\r\n    \r\n    url_file='/tmp/tpl-NKI.csv'\r\n    url_format='{url}'\r\n    filename_format='{path}'\r\n```\r\n(there is actually a question either that record is complete or [may be missing depiction of options to be ran with such as `--fast`](https://github.com/templateflow/tpl-NKI/issues/1#issuecomment-449543916)).\r\nAs such, this record is useful but not entirely \"reproducible\", which it could have been if a complete record describing how it was invoked was created.\r\n\r\n### crawler\r\n\r\nI even wondered if crawler invocations could/should gain the powers of the \"run records\".  Crawler though in many cases more clearly presents a feature we might want/need to add while e.g. adding \"run records\" to run-procedure records -- many commits with run records (or currently without any) might be a part of the larger single \"run\".  E.g. ATM there is no indication what commits were part of a single \"run\" of the \"datalad crawl\", or (as noted above), procedure might have multiple \"datalad run\"s inside, without a clear record in the history that the sequence of those \"runs\" was caused actually by a procedure.\r\n\r\nATM \"crawl\" commits also add useful summary within commit message such as\r\n\r\n```\r\n    Added files from extracted archives\r\n    \r\n    Files processed: 5954\r\n     +git: 1\r\n     +annex: 5952\r\n    Branches merged: incoming->incoming-processed\r\n```\r\n\r\n```\r\n    Updated git/annex from a remote location\r\n    \r\n    URLs processed: 7\r\n     downloaded: 7\r\n     size: 7.2 MB\r\n    Files processed: 7\r\n     +annex: 7\r\n```\r\nand I wondered (well, I think we briefly discussed at some point) if we could/should allow to include some \r\nsimilar metrics (e.g. wall time, max memory utilization, etc) allowing for underlying functions provide additional ones (such as in above amount and number of downloads etc).  I found such records very informative quite a few times. Even if wall time is really box etc dependent, it allows to see the ballpark of how long a given command takes.\r\n\r\n## Possible extensions to run record to consider\r\n\r\nAltogether, I see two major extensions to the  \"ultimate\" run record, which should allow to\r\n1. point to python function / method (of a dataset) which was invoked (currently we record only external command)\r\n  - for such invocation we would need to record options to the call (currently we record options inlined within the cmdline invocation)\r\n2. depict that the commit is a part of the \"super\" run.\r\n   - could be just a single field referencing some the \"super run\" UUID (`super-run-id`). We cannot use \"super run\" commit hexsha because we would not yet have it since it would be recorded later at the end of the `run`.\r\n   - the \"super run\" record might end up being an empty commit with only the commit message with the run record (`run-id`) with that UUID and all the details of the actual run (e.g. describing the procedure which resulted in those other commits with full \"datalad run\" records now including also `super-run-id`, or just slim record with the `super-run-id` if it was some other commit not through \"datalad run\").  \r\n   - That final \"datalad run\" record with the `run-id` could even gain a field listing all the commits which have that UUID mentioned (`commits`), so no git history exploration to search for them would be needed at a small cost of duplicating those UUIDs and commits hexshas in the \"super\" run record.\r\n   - such \"super\" run could actually be a part of another run, so could in turn have `super-run-id` field which would point to its super run.\r\n  - an alternative could be that the first commit within \"super\" run creates a sidecar file under .datalad/runs/UUID with details on invocation, and individual commits (and `run` records) would point to it.\r\n\r\n### rerun\r\n`rerun` then would be able to rerun the entire procedure of pointed to the super run record.  If a range of commits requested to be reran, then it would not rerun individual commits which have `super-run-id` records.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/3096/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/3096/timeline", "performed_via_github_app": null}