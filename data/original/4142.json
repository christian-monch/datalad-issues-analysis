{"url": "https://api.github.com/repos/datalad/datalad/issues/4142", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/4142/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/4142/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/4142/events", "html_url": "https://github.com/datalad/datalad/issues/4142", "id": 564499136, "node_id": "MDU6SXNzdWU1NjQ0OTkxMzY=", "number": 4142, "title": "clone --reckless=thin", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778592, "node_id": "MDU6TGFiZWw2Mzc3ODU5Mg==", "url": "https://api.github.com/repos/datalad/datalad/labels/enhancement", "name": "enhancement", "color": "0052cc", "default": true, "description": ""}, {"id": 2767220334, "node_id": "MDU6TGFiZWwyNzY3MjIwMzM0", "url": "https://api.github.com/repos/datalad/datalad/labels/cmd-clone", "name": "cmd-clone", "color": "FEF2C0", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-02-13T07:45:48Z", "updated_at": "2021-07-29T05:59:11Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "A use case that came up many times is how to get a clone/checkout of a dataset that is easy on the filesystem, even when data security suffers -- with the main purpose of such a clone being the (quick) consumption of data (e.g. by means of a subdataset data-dependency). One way to approach this is to symlink the annex of the clone source (https://github.com/datalad/datalad/pull/4099), but this only works across the local filesystem -- and it is also fooling git-annex to some degree. A different approach would be to use the git-annex native \"thin mode\". Here is a demo:\r\n\r\n```\r\n% datalad clone example.com:/demo\r\ninstall(ok): /tmp/demo (dataset)  \r\n% find demo | wc -l\r\n739\r\n% datalad -C demo get .\r\naction summary:\r\n  get (ok: 533)\r\n% find demo | wc -l\r\n4577\r\ngit -C demo_thin gc --aggressive --keep-largest-pack\r\n% find demo | wc -l\r\n2753\r\n```\r\n\r\n```\r\n% datalad clone example.com:/demo demo_thin\r\ninstall(ok): /tmp/demo_thin (dataset)  \r\n% git -C demo_thin config annex.thin true\r\n# this next bit is surprisingly slow (20s on my laptop)\r\n% git -C demo_thin annex adjust --unlock\r\nadjust \r\nUpdating files: 100% (562/562), done.\r\nSwitched to branch 'adjusted/master(unlocked)'\r\n% find demo_thin | wc -l\r\n1609\r\n% datalad -C demo_thin get .\r\naction summary:\r\n  get (ok: 533)\r\n% git -C demo_thin gc --aggressive --keep-largest-pack\r\n% find demo_thin |wc -l\r\n2760\r\n```\r\n\r\nat this point git-annex considers it done, but still keeps:\r\n\r\n```\r\n% find demo_thin/.git/annex/objects |wc -l\r\n2016\r\n```\r\n\r\nwhile the hardlinks used with thin mode make the file duplication a non-issue, we still have\r\n\r\n```\r\n% find demo_thin/.git/annex/objects -type d |wc -l\r\n1483\r\n```\r\n\r\nDataLad could go and delete the actual annex objects and their protective dirs after a `get` in thin mode (with the understanding that this is reckless). If we do that, we should also declare `git annex dead here`, and (optionally) we need to make a subsequent `get` inspect the worktree and not rely on git-annex to test for availability -- it would inspect the objects, and see them gone, and redownload. I consider the latter point optional, and a redownload a some kind of sanitizing fall-back though. So simply delete-object-on-arrival would be enough of a strategy. And yield:\r\n\r\n```\r\n% find demo_thin |wc -l\r\n758\r\n```\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/4142/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/4142/timeline", "performed_via_github_app": null}