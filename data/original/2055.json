{"url": "https://api.github.com/repos/datalad/datalad/issues/2055", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/2055/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/2055/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/2055/events", "html_url": "https://github.com/datalad/datalad/issues/2055", "id": 284099107, "node_id": "MDU6SXNzdWUyODQwOTkxMDc=", "number": 2055, "title": "Rename/replace `AnnexRepo.file_has_content()`", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778590, "node_id": "MDU6TGFiZWw2Mzc3ODU5MA==", "url": "https://api.github.com/repos/datalad/datalad/labels/severity-normal", "name": "severity-normal", "color": "ff8888", "default": false, "description": "standard severity"}, {"id": 227904225, "node_id": "MDU6TGFiZWwyMjc5MDQyMjU=", "url": "https://api.github.com/repos/datalad/datalad/labels/documentation", "name": "documentation", "color": "cfd3d7", "default": true, "description": "Changes only affect the documentation"}, {"id": 533730441, "node_id": "MDU6TGFiZWw1MzM3MzA0NDE=", "url": "https://api.github.com/repos/datalad/datalad/labels/:woman_facepalming:", "name": ":woman_facepalming:", "color": "ffffff", "default": false, "description": "facepalm"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-12-22T08:08:18Z", "updated_at": "2018-04-06T18:48:02Z", "closed_at": "2018-04-06T18:48:02Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I have been tripping over this function so often that it reached my threshold to severely dislike it. I always assume that this function tests whether a \"file has content\" -- which is not what it does. It checks whether a file is symlinked into an annex. It returns False for any file in git and also returns false for files (with content) in direct mode. This function is rarely used outside the tests:\r\n\r\n```\r\n% git grep '\\.file_has_content' |grep -v test\r\ndatalad/auto.py:        if (under_annex or under_annex is None) and not annex.file_has_content(filepath):\r\ndatalad/crawler/nodes/annex.py:        #         if self.repo.file_has_content(fpath):\r\ndatalad/interface/add_archive_content.py:                # if annex.file_has_content(target_path):\r\ndatalad/interface/ls.py:                    if self.repo.file_has_content(self._path) \\\r\ndatalad/interface/unlock.py:                    ds.repo.file_has_content(files)):\r\ndatalad/metadata/metadata.py:        content_info = zip(paths, ds.repo.file_has_content(paths))\r\ndatalad/plugin/export_archive.py:            has_content = repo.file_has_content(\r\ndatalad/support/annexrepo.py:            return [f for f in files if self.file_has_content(f)]\r\n```\r\n\r\nUse of this function needs to be wrapped in complex additional tests, when not done it is likely a bug (e.g. quick glance makes me think use in `export_archive` is wrong for direct mode).\r\n\r\nIn summary, we don't need what this function does. if it is needed in the tests (and it is heavily used there) it should become a test helper.\r\n\r\nI propose to have a function called `AnnexRepo.has_content()` that returns True whenever the file has content present -- regardless of its mood.\r\n\r\nDemo of my struggle:\r\n\r\n```\r\n(Pdb) fname\r\nu'/tmp/datalad_temp_test_niftiDP0rbx/nifti1.nii.gz'\r\n(Pdb) import nibabel as nb\r\n(Pdb) nb.load(fname).shape\r\n(91, 109, 91, 2)\r\n(Pdb) ds.repo.file_has_content(fname)\r\nFalse\r\n(Pdb) ds.repo.file_has_content(fname, allow_quick=False)\r\nFalse\r\n(Pdb) ds.repo\r\n<AnnexRepo path=/tmp/datalad_temp_test_niftiDP0rbx (<class 'datalad.support.annexrepo.AnnexRepo'>)>\r\n(Pdb) ds.repo.is_under_annex(fname)\r\nFalse\r\n```", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/2055/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/2055/timeline", "performed_via_github_app": null}