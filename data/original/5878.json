{"url": "https://api.github.com/repos/datalad/datalad/issues/5878", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/5878/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/5878/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/5878/events", "html_url": "https://github.com/datalad/datalad/issues/5878", "id": 963045204, "node_id": "MDU6SXNzdWU5NjMwNDUyMDQ=", "number": 5878, "title": "http_auto authenticator to follow HTTP Authentication standard", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-08-06T21:05:26Z", "updated_at": "2021-08-06T21:05:26Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "ATM, following the usage patterns of requests library, we have dedicated and explicit authenticators for different types of the authentication, as to be provided to `Session`. As brought up in https://github.com/datalad/datalad/issues/5846#issuecomment-894345728 discussion with @MattF-NSIDC it might be suboptimal since can allow for malicious sites to collect Auth information, and [soon simply might stop working](https://github.com/datalad/datalad/issues/5846#issuecomment-894345728) for authentication to NSIDC.\r\n\r\nAlso we have various ad-hoc authenticators for some websites which (at least in the past) relied not on http return codes but rather on kicking back some HTML login form (well earthdata also [still does it for some, e.g. empty User-Agents](https://github.com/datalad/datalad/issues/5846#issuecomment-892977859)), which complicates automated handling/detection of failed authentication attempts on such websites. We do have provisions for their support such as regexes for content to look for as indicative of the need to login - but those need to be first provided, so we would not be able to \"auto deduce\" that website needs authentication and a \"provider\" configuration should be established.\r\n\r\nBut going back to \"standards-loving\" sites, for any http-standard compliant interaction we should have a singular \"authenticator\" , codename `http_auto` which would do the right thing:\r\n\r\n- [ ] do not pre-emptively authenticate, and just proceed anonymously until it gets 401  \r\n  - or hits content it knows to be a login page - good old #661 if we add support for ad-hoc setups such as NITRC\r\n  - that seems to be the main purpose of `http_auth`  - to just allow to pre-authenticate to some other authentication url (known to provider) first ... then I  in a rush \"overfit\" to address #5846 to add an extra step if authentication attempt did request authentication elsewhere via www-authenticate.\r\n- [ ] take into account (and possibly display to the user) realm for the site #2714\r\n- [ ] parse www-authenticate and choose the right authenticator (Basic, Digest, Bearer token, etc), and authenticate into the session\r\n      - apparently a \"proper\" parsing isn't trivial on its own according to the findings linked in https://github.com/datalad/datalad/issues/5846#issuecomment-890221053  \r\n      - this would ameliorate need for `HTTPAnonBearerTokenAuthenticator` which pretty much implemented the logic above, but supported only the provided a workaround for the case whenever bearer token is just provided without extra details needed from the user.  `http_auto` should handle it \"natively\"\r\n - [ ] yet to see how this all would relate to OAuth methods of authentication. We do needed dance for github outside of the downloaders context. There is https://requests-oauthlib.readthedocs.io/ \"to provide an easy-to-use Python interface for building OAuth1 and OAuth2 clients.\"\r\n\r\nThis would be the authenticator to suggest (instead of a more specific `http_basic` etc) whenever we are handling a URL without any provider and receive 401 (not sure if should be done upon 403 -- may be only if www-authenticate is provided in the response, although AFAIK it shouldn't be there for 403).\r\n\r\n### may be just \"fix\" `http_auth`?\r\n\r\nAlthough I said that it should be named `http_auto`, I think it might be just the case that we just need to \"fix\" our `HTTPAuthAuthenticator` which ATM corresponds to `http_auth` type of the authenticator, and initial purpose for it was `Authenticate via Basic authentication to some other post url`, and reusing the same url if no dedicated url for authentication was known to the provider. known use cases where NITRC and HCP DB. More analysis is needed to see if we can just extend here, or RF to delegate to `http_auto`: to address #5846 I added/duplicated there basic http authentication procedure as in reaction to being provided www-authenticate header. \r\n\r\n### an existing implementation?\r\n\r\nAs I have mentioned in https://github.com/datalad/datalad/issues/5846#issuecomment-890221053   requests library seems to be lacking desired logic to auto-choose needed authentication method, but stock urllib seems to have some.\r\n\r\nWe already do something like that whenever we receive 401 (well anything between 400 and 500 but with www-authenticate) during our interactions in `check_response_status` (actual choosing of authenticator is in `process_www_authenticate`). But that one is not used during authentication itself.  We should harmonize handling of the response_status.  **Note:** `check_response_status` is provided `response` object, but uses only codes + header, and does not analyze the content (e.g. for the \"login form\") upon 200.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/5878/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/5878/timeline", "performed_via_github_app": null}