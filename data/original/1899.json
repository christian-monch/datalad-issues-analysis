{"url": "https://api.github.com/repos/datalad/datalad/issues/1899", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/1899/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/1899/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/1899/events", "html_url": "https://github.com/datalad/datalad/pull/1899", "id": 265259748, "node_id": "MDExOlB1bGxSZXF1ZXN0MTQ2NDM1OTg5", "number": 1899, "title": "WIP: DON'T MERGE: Ultimate test setup", "user": {"login": "bpoldrack", "id": 10498301, "node_id": "MDQ6VXNlcjEwNDk4MzAx", "avatar_url": "https://avatars.githubusercontent.com/u/10498301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpoldrack", "html_url": "https://github.com/bpoldrack", "followers_url": "https://api.github.com/users/bpoldrack/followers", "following_url": "https://api.github.com/users/bpoldrack/following{/other_user}", "gists_url": "https://api.github.com/users/bpoldrack/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpoldrack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpoldrack/subscriptions", "organizations_url": "https://api.github.com/users/bpoldrack/orgs", "repos_url": "https://api.github.com/users/bpoldrack/repos", "events_url": "https://api.github.com/users/bpoldrack/events{/privacy}", "received_events_url": "https://api.github.com/users/bpoldrack/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-10-13T11:39:46Z", "updated_at": "2020-03-02T16:35:00Z", "closed_at": "2019-07-16T13:08:49Z", "author_association": "MEMBER", "active_lock_reason": null, "pull_request": {"url": "https://api.github.com/repos/datalad/datalad/pulls/1899", "html_url": "https://github.com/datalad/datalad/pull/1899", "diff_url": "https://github.com/datalad/datalad/pull/1899.diff", "patch_url": "https://github.com/datalad/datalad/pull/1899.patch"}, "body": "You may look, but don't touch!\r\n\r\n- [x] Closes #1826\r\n- [ ] find solution for #1890 \r\n- [x] Implement `TestRepo` base class\r\n- [x] Implement basic `Item` subclasses\r\n- [ ] Implement `TestRepo`'s, `ItemRepo`'s and `ItemFile`'s `assert_intact` method (mostly done)\r\n- [ ] resemble all existing testrepos (basically done) by defining corresponding subclasses \r\n- [ ] Implement new `with_testrepos`\r\n- [ ] Implement transition helper to let tests use new repos without adapting them\r\n- [x] Have an extensive check on definitions of subclasses of `TestRepo` with meaningful messages to ease doing so for everybody\r\n- [ ] Provide new test helpers to easily use new powers within tests (see \"TODO: - use the power!\" in `testrepos.utils.py`\r\n- [ ] Fully adapt at least some actual tests (probably `GitRepo`/`AnnexRepo`) to show off\r\n- [x] delay implementation of probably required `ItemCommand`s and some properties until they are actually required. Do this while adapting tests and creating additional `TestRepos`. It's important to make use of what's already available ASAP.\r\n- [x] Lazy creation (currently we pre-create ALL of them although the test might need just a single one of them)\r\n\r\nProvide new concept for running unit tests in different setups.\r\n\r\n**short overview of the goals**\r\nNew `TestRepo` subclasses are capable of setting up pretty much everything you can think of, including untracked files, independent repos (or even an entire forrest of hierarchies at once), staged and unstaged modifications, ... everything. This used to be not possible, since we relied on them being cloneable repositories.\r\nThey are delivered by `with_testrepos` as an object that contains all information about the SHOULD-BE state of the entire setup. Tests now can base their assertions on properties of the `TestRepo`. Thereby it's easy to write tests that can actually run on anything being thrown at them. They don't need (hard-)coded assumptions about the tesrepos that were known to the developer when writing the test. And they also don't need to read properties from FS, which basically means to make the IS state the SHOULD-BE state.\r\nThey provide full automatic integrity testing. No need for a test developer to each time think about, what could possibly have changed and come up with a complete set of assertions to make sure nothing has changed.\r\nThis also means there's now the possibility to just define intended changes and automatically run a full set of assertions making sure that those changes and those changes ONLY actually happened. Again: No need by the developer to always come up with the necessary assertions to make that sure.\r\nIf used via new `with_testrepos`decorator it is ensured that testrepos can't be left messed up by tests and still being used by other tests, too. However, if the test requests a \"read-only\" instance of a `TestRepo` they will get a persistent one, that isn't always recreated and used by others, too. Those persistent ones will check themselves after such a test (and raise of course if check failed) and will be automatically recreated from scratch for the next test that wants to use them.\r\nFinally, the definition of new test setups is pretty easy, I think. To help with that even further there are supposed to be extensive checks on the definitions, generating pretty precise messages, that are telling what's wrong with the definition.\r\n\r\nImplicit feature: There is basically no need for additional unit tests on `TestRepo` and the subclasses of `Item`. They implicitly test themselves as soon as they are used in a subclass of `TestRepo`. This subclass just needs to be instantiated. The \"object consistency\" part of `assert_intact` (which is autmatically and recursively called for all item of a `TestRepo`) does that. Whatever unit test you can come up with that actually contains assertions that are not tested anyway, implies that either those assertions should be added in a general way in the appropriate `assert_intact` method or it's about a not yet tested setup, meaning you should simply define a new `TestRepo` instead. The latter will automatically test the code in `testrepo` module against that situation and furthermore this also leads to us testing DATALAD against that untested situation!", "closed_by": {"login": "bpoldrack", "id": 10498301, "node_id": "MDQ6VXNlcjEwNDk4MzAx", "avatar_url": "https://avatars.githubusercontent.com/u/10498301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpoldrack", "html_url": "https://github.com/bpoldrack", "followers_url": "https://api.github.com/users/bpoldrack/followers", "following_url": "https://api.github.com/users/bpoldrack/following{/other_user}", "gists_url": "https://api.github.com/users/bpoldrack/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpoldrack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpoldrack/subscriptions", "organizations_url": "https://api.github.com/users/bpoldrack/orgs", "repos_url": "https://api.github.com/users/bpoldrack/repos", "events_url": "https://api.github.com/users/bpoldrack/events{/privacy}", "received_events_url": "https://api.github.com/users/bpoldrack/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/1899/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/1899/timeline", "performed_via_github_app": null}