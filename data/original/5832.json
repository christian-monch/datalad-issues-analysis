{"url": "https://api.github.com/repos/datalad/datalad/issues/5832", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/5832/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/5832/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/5832/events", "html_url": "https://github.com/datalad/datalad/issues/5832", "id": 954575545, "node_id": "MDU6SXNzdWU5NTQ1NzU1NDU=", "number": 5832, "title": "(Re)design of `drop`", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778592, "node_id": "MDU6TGFiZWw2Mzc3ODU5Mg==", "url": "https://api.github.com/repos/datalad/datalad/labels/enhancement", "name": "enhancement", "color": "0052cc", "default": true, "description": ""}, {"id": 2803278490, "node_id": "MDU6TGFiZWwyODAzMjc4NDkw", "url": "https://api.github.com/repos/datalad/datalad/labels/cmd-drop", "name": "cmd-drop", "color": "FEF2C0", "default": false, "description": ""}, {"id": 2803278929, "node_id": "MDU6TGFiZWwyODAzMjc4OTI5", "url": "https://api.github.com/repos/datalad/datalad/labels/cmd-uninstall", "name": "cmd-uninstall", "color": "FEF2C0", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 11, "created_at": "2021-07-28T07:45:11Z", "updated_at": "2021-08-04T06:14:25Z", "closed_at": "2021-08-04T06:14:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Companion of #5842 (to be discussed in conjunction)\r\n\r\nContext: This is about approaching an improved implementation of the `drop` command, not in isolation, but in the context of a reconsideration of the `drop/uninstall/remove` combo, with the partial goal to replace the old `remove` entirely, and with that make progress towards #3368\r\n\r\nThis is an opportunity to reconsider the role of `drop` in the API, and amend it with the missing functionality we have identified (issues are linked below). This draft description is not about making a contrast to what the present `drop` is doing (there are massive overlaps), but about a comprehensible concept of what `drop` does, and does not. The initial design draft is the result of a discussion of @adswa and @mih.\r\n\r\n### Basic concept\r\n\r\n`drop` is the antagonist of `get`. Whatever a `drop` can do, should be undoable by a subsequent `get` (given unchanged remote availability).\r\n\r\nLike `get`, `drop` primarily operates on a mandatory path specification (to discover relevant files and sudatasets to operate on).\r\n\r\n`drop` has `--type` parameter that serves as an extensible \"mode-switch\" to cover all relevant scenarios, like 'drop all file content in the work-tree' (e.g. `--type files`, default, #5858), 'drop all keys from any branch' (i.e. `--type allkeys`, #2328), but also '\"drop\" AKA uninstall entire subdataset hierarchies' (e.g. `--type all`), or drop preferred content (`--type preferred-content`, #3122).\r\n\r\n`drop` prevents data loss by default (#4750). Like `get` it features a `--reckless` \"mode-switch\" to disable some or all potentially slow safety mechnism, i.e. 'key available in sufficient number of other remotes', 'main or all branches pushed to remote(s)' (#1142), 'only check availability of keys associated with the worktree, but not other branches'. \"Reckless operation\" can be automatic, when following a reckless `get` (#4744).\r\n\r\n`drop` properly manages annex lifetime information, e.g. by announcing an annex as `dead` on removal of a repository (#3887).\r\n\r\nLike `get`, drop supports parallization #1953 \r\n\r\n`datalad drop` is not intended to be a comprehensive frontend to `git annex drop` (e.g. limited support for e.g. #1482 outside standard use cases like #2328).\r\n\r\nNote: It is understood that the current `uninstall` command is largely or completely made obsolete by this `drop` concept.\r\n\r\nGiven the development in #5842  towards the complete obsolescence of `remove` it becomes necessary to import one of its proposed features:\r\n\r\n`drop` should be able to recognize a botched attempt to delete a dataset with a plain rm -rf, and act on it in a meaningful way, even if it is just hinting at chmod + rm -rf.\r\n\r\n\r\n\r\n### Use cases\r\n\r\nThe following use cases operate in the dataset hierarchy depicted below.\r\n\r\n```\r\nsuper\r\n\u251c\u2500\u2500 dir\r\n\u2502   \u251c\u2500\u2500 fileD1\r\n\u2502   \u2514\u2500\u2500 fileD2\r\n\u251c\u2500\u2500 fileS1\r\n\u251c\u2500\u2500 fileS2\r\n\u251c\u2500\u2500 subA\r\n\u2502   \u251c\u2500\u2500 fileA\r\n\u2502   \u251c\u2500\u2500 subsubC\r\n\u2502   \u2502   \u251c\u2500\u2500 fileC\r\n\u2502   \u2514\u2500\u2500 subsubD\r\n\u2514\u2500\u2500 subB\r\n    \u2514\u2500\u2500 fileB\r\n```\r\n\r\nUnless explicitly stated, all command are assumed to be executed in the root of `super`.\r\n\r\n- `datalad drop fileS1`\r\n   Drops the file content of `file1` (as currently done by `drop`)\r\n- `datalad drop dir`\r\n   Drop all file content in the directory (``fileD{1,2}``; as currently done by `drop`\r\n- `datalad drop subB`\r\n   Drop all file content from the entire `subB` (`fileB`)\r\n- `datalad drop subB --type all`\r\n   Same as above (default `--type files`), because it is not operating in the context of a superdataset (no automatic upward lookups). Possibly hint at next usage pattern).\r\n- `datalad drop -d . subB --type all`\r\n  Drop all from the superdataset under this path. I.e. drop all from the subdataset and drop the subdataset itself (AKA uninstall)\r\n- `datalad drop subA --type all`\r\n  Error: \"``subA`` contains subdatasets, forgot --recursive?\"\r\n- `datalad drop -d . subA -r --type all`\r\n  Drop all content from the subdataset (``fileA``) and its subdatasets (``fileC``), uninstall the subdataset (``subA``) and its subdatasets (``subsubC``, ``subsubD``)\r\n- `datalad drop subA -r --type all`\r\n  Same as above, but keep ``subA`` installed\r\n- `datalad drop sub-A -r`\r\n   Drop all content from the subdataset and its subdatasets (``fileA``, ``fileC``)\r\n- `datalad drop . -r --type all`\r\n  Drops all file content and subdatasets, but leaves the superdataset repository behind\r\n- `datalad drop -d . subB`\r\n  Does nothing and hints at alternative usage, see https://github.com/datalad/datalad/issues/5832#issuecomment-889656335\r\n- `cd .. && datalad drop super/dir` \r\n  Like `get`, errors because the execution is not associated with a dataset. This avoids complexities, when the given `path`'s point to multiple (disjoint) datasets. It is understood that it could be done, but it is intentionally not done. `datalad -C super drop dir` or `datalad drop -d super super/dir` would work.", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/5832/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/5832/timeline", "performed_via_github_app": null}