{"url": "https://api.github.com/repos/datalad/datalad/issues/478", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/478/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/478/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/478/events", "html_url": "https://github.com/datalad/datalad/issues/478", "id": 156742304, "node_id": "MDU6SXNzdWUxNTY3NDIzMDQ=", "number": 478, "title": "RFC: how to organize our UI/logging ", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778592, "node_id": "MDU6TGFiZWw2Mzc3ODU5Mg==", "url": "https://api.github.com/repos/datalad/datalad/labels/enhancement", "name": "enhancement", "color": "0052cc", "default": true, "description": ""}, {"id": 63778594, "node_id": "MDU6TGFiZWw2Mzc3ODU5NA==", "url": "https://api.github.com/repos/datalad/datalad/labels/question", "name": "question", "color": "fbca04", "default": true, "description": "Issue asks a question rather than reporting a problem"}, {"id": 135267875, "node_id": "MDU6TGFiZWwxMzUyNjc4NzU=", "url": "https://api.github.com/repos/datalad/datalad/labels/do-in-datalad", "name": "do-in-datalad", "color": "ffda63", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 5, "created_at": "2016-05-25T12:49:16Z", "updated_at": "2017-04-28T15:59:24Z", "closed_at": "2017-04-28T15:59:24Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "ATM our UI, in particular any \"real-time\" feedback from downloads, is pretty much non-existent. `download-url` reports nicely with a progress bar but generally that functionality is not used because of all the sandwiching of calls from datalad into git-annex , which  in turn might call to wget/quvi/... to download its content, or git-annex-remote-datalad\\* remotes, which in turn might call git-annex again to fetch e.g. the \"mother\" tarball, which in turn might also go to wget OR back to git-annex-remote-datalad*...  Few points:\n1. I think we can't allow for all output from git-annex (and its calls to wget/...) to simply be dumped on the screen, and in some cases, there is no output if we use annex in batched mode\n2. At least for all use-cases we care about we could make annex use our git-annex-remote-datalad to download content from `http://` (we do already for all `s3://`)\n\nSo I am wondering, if our UI, which probably should also handle logging output (currently \"independently dumped\"), should be a little parallel process within datalad which would then communicate via some socket, we define some `DATALAD_UI_SOCKET` env variable so that any child process which would be started directly by us, or by annex, could reach out to the master UI process and report its logs/progress in downloads, or request some info interactively (so such commands should be atomic, so that UI is pretty much 'stateless' but deals with e.g. UI object IDs... more on that later if overall idea would be sound)\n\nI foresee cmdline UI (in TTY mode where we have better control allowing rewrite previous lines, etc) then which would be comprised from \n1. (on top) log msgs if any at current level\n2. and what is handled by UI ATM:\n- active \"updatable\" progress indicators, e.g. progress bars for the processes which are currently running:\n  \n  ```\n   - Downloaded (...%) X out of Y files (... failed), (...%) ...MB out of ...MB  (in words or as a progressbar)\n   - ongoing per file downloads (progress bars)\n  ```\n- high level messages  (may be should be melded into logging at INFO or even some higher (INFO + 5) level?)\n- Interactive UI element (e.g. requests for user/passw information, which might come from deep inside the guts of the sandwich), which then would disappear (only some log line might refect in 1 that it happened) after it is \"done\".\n\nIn non-interactive mode interactive UI wouldn't be allowed, and downloads progress indicators could also be gone just relying on the log msgs.  Standardizing such an interface might later allow for easy custom other views: we might want to provide some custom mode for \"within Python or IPython\" operation, or in web ui happen we get there some time.\n\nRelated references for git-annex discussion:  annex does support concurrent output now https://git-annex.branchable.com/todo/parallel_get/\n@joeyh - do you think it would be possible to somehow make annex calls report progress on downloads back to parent process somehow, now that you are tracking/reporting progress yourself while in -J mode? (note that even -J1 makes annex report progress on its own shushing wget )\nEven though we do report back from our custom downloaders back to annex about progress, I am afraid it wouldn't be sufficient due to \n- possible necessity for interactive UI (although the easiest could still be just crash and demand specifying credentials prior, but that ruins interactivity since credentials might be entered incorrectly)\n- annex not reporting progress during batch mode of addurl\n- probably our desire for somewhat customized display, to e.g. hide per item downloads progress indicators/reports after those downloads are complete, aiming for leaner reporting that annex does.\n", "closed_by": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/478/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/478/timeline", "performed_via_github_app": null}