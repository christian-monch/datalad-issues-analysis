{"url": "https://api.github.com/repos/datalad/datalad/issues/3229", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/3229/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/3229/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/3229/events", "html_url": "https://github.com/datalad/datalad/issues/3229", "id": 421649195, "node_id": "MDU6SXNzdWU0MjE2NDkxOTU=", "number": 3229, "title": "DOC+TST: Use-cases driven/inspired documentation/testing/development", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 519289523, "node_id": "MDU6TGFiZWw1MTkyODk1MjM=", "url": "https://api.github.com/repos/datalad/datalad/labels/on%20hold%20-%20input%20required", "name": "on hold - input required", "color": "fbca04", "default": false, "description": "Work on this issue cannot proceed until critical feedback was given"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-03-15T18:23:04Z", "updated_at": "2020-02-25T15:03:08Z", "closed_at": "2020-02-25T15:03:07Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Echoing our \"development oriented\" discussion today (thanks @mih and @kyleam) on how possibly we could/should make the development workflow better (via e.g. code restructuring #3192 etc), I have decided to bring up discussion on how we could possibly make it easier to learn to use DataLad, discover what it offers, and potentially reduce pains when API goes through changes.  High level goal is to be able to have answers to common questions on \"How to do X\" at different levels (multi-command workflows  and single command invocations), while also providing some assurance that the answers are correct and somewhat optimal.\r\n\r\nThis issue is to discuss possible ways on how we could harmonize presentation and assurance (testing) of fulfilling a set of specific use cases.  So it goes well inline with solidifying our \"core\" in terms of functionality, not necessarily in rigidness of API. I am quite often asked as question on \"how to do this with datalad\" answer to which requires either a single or a few commands, and then even for a single command (e.g. `create-sibling-github`) I end up pointing to a screencast from [DataLad Features](https://www.datalad.org/features), which typically does more and/or not exactly what is asked for, or simply no longer works that way.\r\n\r\nSo how could we improve this situation?\r\n\r\n# \"Status Quo\" \r\n\r\n## Absent harmony in documentation/presentation of use-cases\r\n\r\n### High-level elaborate use cases\r\n\r\nWe present in a variety of places:\r\n- [Data Management use cases](http://docs.datalad.org/en/latest/usecases/index.html) in the docs\r\n  - Basic provenance tracking - rendered from a `docs/casts/simple_provenance_tracking.sh`\r\n  - A typical collaborative data management workflow - seems to come from `docs/examples/3rdparty_analysis_workflow.sh` (related - #2266, pointing that it is likely an outdated one) .\r\n- [DataLad Features](https://www.datalad.org/features) on the main website.  Largely (if not completely) coming from `docs/casts/`.\r\n\r\n#### Testing\r\n\r\n`docs/examples/3rdparty_analysis_workflow.sh` is though an outdated one, probably is the only one which is automatically tested in every matrix run of travis (takes about 20 sec).  AFAIK we do not test cast scripts, so those go stale and website does not reflect currently optimal or even valid way to do things (see e.g. https://github.com/datalad/datalad.org/issues/46, https://github.com/datalad/datalad.org/issues/45).\r\n\r\n\r\n## One-command invocation use cases\r\n\r\nWe simply do not have them documented or itemized. It is assumed that `--help` (often providing a mouthful of well documented options), is sufficient to figure out how to do things.  But as could be discovered from aforementioned high level use case examples, in many real use cases correct command line specification is not trivial.   \r\nThe closest to a documentation of how to do X with a command Y was AFAIK elaborated for `get`/`install` unification and set in digital tomb of a [google spreadsheet](https://docs.google.com/spreadsheets/d/1bi3AQK5yMKwTA_6FN1oCPnIGASy9VmN8LbARr15XMKE/edit?usp=sharing), and thus probably does no longer reflect reality.\r\n\r\n### Testing\r\n\r\nMany of those use cases are tested by the \"unit\" (or some which are tagged as \"integration\") tests, but it is not necessarily clear which use case any given unittest is testing.  At best we are pointing to a github issue which inspired a fix we needed to fulfill a specific use case.  I hoped to find some mentioning of `UC` we had elaborated for `install/get` but it seems that we didn't really care to reference them.\r\n\r\n## Exercises/Tutorials\r\n\r\nAlthough could be considered \"orthogonal\", might be implemented as related.  Relevant idea was voiced awhile back in https://github.com/datalad/datalad.org/issues/45 . ATM the best exercises are the ones prepared for the ReproNim training workshops, e.g.\r\n- [very basic DataLad install/explore](http://www.repronim.org/sfn2018-training/02-02-distros/#datalad)\r\n- [ReproIn using datalad-containers](http://www.repronim.org/sfn2018-training/04-02-reproin/)\r\n- [GLM using run/datalad-containers/rerun](http://www.repronim.org/sfn2018-training/04-03-reproin_glm/)\r\n\r\n### Testing\r\n\r\nThose are ReproNim ones are well tested right before the workshop, but even then it often becomes not so clear on details of how needed computational environments came about etc (see e.g. https://github.com/ReproNim/sfn2018-training/issues/24)\r\n\r\n\r\n# Proposal: Use-cases \"library\"\r\n\r\nA data structure which would either list the precise code/invocation snippets and/or point to external scripts, so that each use case could be smoke-tested automagically but also could just come accompanied with a more extended unittest, or just mentioned (tag?) in the test. E.g. based on that `install/get` spreadsheet we could have (took identifier as is for UC1 and random one for the elaborate one - we can come up with more meaningful scheme)\r\n\r\n```yaml\r\nUC1:\r\n - purpose: Install a dataset from a URL without installing any subdatasets\r\n - cmdline:\r\n   - commands:\r\n     - datalad install -s URL\r\n     - datalad install URL\r\n   - returns: # prints in cmdline\r\n     - status record if `install` actually installed a dataset.  \r\n     - nothing if the dataset at the target path already exists (apparently). \r\n   - errors:\r\n     - if target path contains a dataset from another URL\r\n - python:\r\n   - install(source=URL)\r\n```\r\nyet not sure if listing of returns is valuable since they are common across many use-cases, but here we might even take shortcuts of yaml and describe them, but anyhow wouldn't be able to validate their correctness.\r\n\r\n```yaml\r\nUC55:\r\n - purpose: Create a new dataset in a given directory, with git-annex instructed to commit text files directly to git\r\n - cmdline:\r\n   - commands:\r\n     - datalad create --text-no-annex PATH\r\n     - datalad create -d PATH --text-no-annex\r\n     - datalad --proc-post cfg_text2git --cmd rev-create -d PATH\r\n ...\r\n```\r\n\r\nFor the above one I even thought to add a section like\r\n```yaml\r\n- cmdline:\r\n  - incorrect_commands:\r\n    - command: datalad --proc-post cfg_text2git --cmd rev-create PATH\r\n      rationale: Procedures need to know the dataset ahead of time. See https://github.com/datalad/datalad/issues/2732 for more info\r\n```\r\nwhich could be tested to be the expected \"by design\" failure.\r\n\r\nand even just point to casts:\r\n```yaml\r\nUC999:\r\n - cast: docs/casts/basic_search.sh\r\n```\r\nwhere `purpose` could be picked up from the `full_title` of the cast or just duplicated here.\r\n\r\nReplacing placeholders such as URL and PATH in aforementioned examples would provide ready to be used invocations for smoke testing in case of cmdline and python.  For cast scripts there might be more to be done, especially for those which would need messing around with external resources such as GitHub to make them runnable, but IMHO there is nothing to be not possible.  Any use case could be accompanied with a more elaborate `test_UCXXX_1` etc to unittest its functioning further.  Could even be a `@usecase('UCXXX')` decorator which would pass the output of running that python code as an argument to the test function for further interrogation after smoke testing is \"finished\".  It would sweep through multiple invocations if multiple choices to do the same thing were specified.\r\n\r\nAdding some tags or grouping use cases by purpose (often luckily corresponding to the command) would allow to present them in a single (or multiple, e.g. tagged as `web` to be picked up for the main website) location... There could even be \"datalad helpme\" which would do a simple search (we have whoosh as a dependency after all already) on purposes/descriptions possibly finding the answer -- example -- for their question.\r\n\r\nBut the main goal here is to provide a human and machine readable listing of obviously **not for all, but the \"core\"** most commonly used use cases which we want to address, and keep \"stable\" or somehow annotated (e.g. be able to point per command up to which, or from which version it is a legit invocation or output)\r\n\r\nPlease chime in.  May be it would not scale, or would not be as valuable as I think it would.", "closed_by": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/3229/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/3229/timeline", "performed_via_github_app": null}