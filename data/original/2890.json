{"url": "https://api.github.com/repos/datalad/datalad/issues/2890", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/2890/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/2890/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/2890/events", "html_url": "https://github.com/datalad/datalad/issues/2890", "id": 366035012, "node_id": "MDU6SXNzdWUzNjYwMzUwMTI=", "number": 2890, "title": "\"edit\" or even \"open\" construct", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778592, "node_id": "MDU6TGFiZWw2Mzc3ODU5Mg==", "url": "https://api.github.com/repos/datalad/datalad/labels/enhancement", "name": "enhancement", "color": "0052cc", "default": true, "description": ""}, {"id": 390153891, "node_id": "MDU6TGFiZWwzOTAxNTM4OTE=", "url": "https://api.github.com/repos/datalad/datalad/labels/UX", "name": "UX", "color": "0052cc", "default": false, "description": "user experience"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2018-10-02T18:58:33Z", "updated_at": "2018-10-03T10:09:23Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "This discussion would not be new, previous ones:\r\n- #378 (Brainstorming for \"git annex unlock\" use) - boiled down to use unlock/lock pair\r\n- #453 (initial title is irrelevant) - has [joey's comment](https://github.com/datalad/datalad/issues/453#issuecomment-220850060) on `git annex adjust --unlock`\r\n\r\nI still think that in particular with Python API it would be a big convenience to the users to be able to manipulate file content in basic operations without doing all the manual get/unlock/lock/... combination.  E.g.  something like\r\n\r\n## 'w' mode:\r\n\r\n```python\r\nwith ds.open(\"filename\", \"w\") as f:\r\n   f.write(\"new content replacing the old one even if it was not present\")\r\n```\r\nwhich would do \r\n- `rm filename`\r\n- `open(\"filename\", \"w\")`\r\n- ... (context) \r\n- `git annex add \"filename\"`\r\n\r\n## \"a\" (`b` or not)\r\n\r\nit would \r\n- `get`\r\n- `unlock`\r\n- `open(\"filename\", \"a\")`;\r\n- ...\r\n- `git annex add ...`\r\n\r\n## 'r'\r\n\r\n- `get`\r\n- `open`\r\n\r\nin `w` and `a` mode if possible/needing hiding any v5 vs v6 peculiarities (i.e. locking it back so real symlink is committed and not git reference file).\r\n\r\nedit 1:  for files under git, should be regular `open; git add`\r\n\r\nWhat do you think?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/2890/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/2890/timeline", "performed_via_github_app": null}