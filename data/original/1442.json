{"url": "https://api.github.com/repos/datalad/datalad/issues/1442", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/1442/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/1442/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/1442/events", "html_url": "https://github.com/datalad/datalad/issues/1442", "id": 217039504, "node_id": "MDU6SXNzdWUyMTcwMzk1MDQ=", "number": 1442, "title": "Observations on git annex metadata behavior (e.g. git-annex will not error when setting metadata of a non-annexed file or non-existing path)", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 385404347, "node_id": "MDU6TGFiZWwzODU0MDQzNDc=", "url": "https://api.github.com/repos/datalad/datalad/labels/for%20our%20information", "name": "for our information", "color": "fbca04", "default": false, "description": "Announcement-type issues (possibly inconsequential)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2017-03-26T09:29:48Z", "updated_at": "2017-06-26T05:36:35Z", "closed_at": "2017-06-26T05:36:35Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Not sure yet if this is a feature or a bug. For now just collecting observations:\r\n\r\nTest case: a repo with one file in git and one (later two and three) in annex:\r\n\r\n````\r\n% git init && git annex init\r\nInitialized empty Git repository in /tmp/meta/.git/\r\ninit  ok\r\n(recording state in git...)\r\n% echo \"123\" > in_git && git add in_git && git commit -m 'ingit'\r\n[master (root-commit) 44725bd] ingit\r\n 1 file changed, 1 insertion(+)\r\n create mode 100644 in_git\r\n% echo \"456\" > in_annex && git annex add in_annex && git commit -m 'inannex'   \r\nadd in_annex ok\r\n(recording state in git...)\r\n[master 9496a29] inannex\r\n 1 file changed, 1 insertion(+)\r\n create mode 120000 in_annex\r\n````\r\n\r\nNo error code for read access, just output different:\r\n\r\n````\r\n% git annex metadata --json in_git\r\n% git annex metadata --json in_annex\r\n{\"command\":\"metadata\",\"note\":\"\",\"success\":true,\"key\":\"SHA256E-s4--cdfba543ee8ef7fdb3d8b587648cc22dd792bbd6272cc5447307c7c106c2374c\",\"file\":\"in_annex\",\"fields\":{}}\r\n````\r\n\r\nDirectory as path argument refers to all content\r\n\r\n````\r\ngit annex metadata --json .\r\n{\"command\":\"metadata\",\"note\":\"\",\"success\":true,\"key\":\"SHA256E-s4--cdfba543ee8ef7fdb3d8b587648cc22dd792bbd6272cc5447307c7c106c2374c\",\"file\":\"in_annex\",\"fields\":{}}\r\n````\r\n\r\nSilently ignores metadata `set` for files in Git (I guess that makes it easier to recursively set metadata in mixed repos):\r\n\r\n````\r\n% git annex metadata in_git -s some=value\r\n% git annex metadata --json in_annex -s some=value\r\n{\"command\":\"metadata\",\"note\":\"lastchanged=2017-03-26@09-10-41\\nsome=value\\nsome-lastchanged=2017-03-26@09-10-41\\n\",\"success\":true,\"key\":\"SHA256E-s4--cdfba543ee8ef7fdb3d8b587648cc22dd792bbd6272cc5447307c7c106c2374c\",\"file\":\"in_annex\",\"fields\":{\"some\":[\"value\"],\"lastchanged\":[\"2017-03-26@09-10-41\"],\"some-lastchanged\":[\"2017-03-26@09-10-41\"]}}\r\n````\r\n\r\nRequired switch for recursive `metadata set`, but with `--force` ignored file in Git without error.\r\n\r\n````\r\n% echo \"789\" > in_annex2 && git annex add in_annex2 && git commit -m 'inannex'\r\n% git annex metadata --json . -s someother=value2\r\ngit-annex: Not recursively setting metadata. Use --force to do that.\r\n1 % git annex metadata --force --json . -s someother=value2\r\n{\"command\":\"metadata\",\"note\":\"lastchanged=2017-03-26@09-14-03\\nsome=value\\nsome-lastchanged=2017-03-26@09-10-41\\nsomeother=value2\\nsomeother-lastchanged=2017-03-26@09-14-03\\n\",\"success\":true,\"key\":\"SHA256E-s4--cdfba543ee8ef7fdb3d8b587648cc22dd792bbd6272cc5447307c7c106c2374c\",\"file\":\"in_annex\",\"fields\":{\"some\":[\"value\"],\"someother-lastchanged\":[\"2017-03-26@09-14-03\"],\"someother\":[\"value2\"],\"lastchanged\":[\"2017-03-26@09-14-03\"],\"some-lastchanged\":[\"2017-03-26@09-10-41\"]}}\r\n{\"command\":\"metadata\",\"note\":\"lastchanged=2017-03-26@09-14-03\\nsomeother=value2\\nsomeother-lastchanged=2017-03-26@09-14-03\\n\",\"success\":true,\"key\":\"SHA256E-s4--d928266e89b1da2263838e86df3a430548ca1768bedbc9d4b20f9e370d5518df\",\"file\":\"in_annex2\",\"fields\":{\"someother-lastchanged\":[\"2017-03-26@09-14-03\"],\"someother\":[\"value2\"],\"lastchanged\":[\"2017-03-26@09-14-03\"]}}\r\n````\r\n\r\n`--json` has no effect when used together with `--get-field`:\r\n\r\n````\r\n% git annex metadata --json -g someother\r\nvalue2\r\nvalue2\r\n````\r\n\r\nMetadata is `set` per annex key, not per file, even if a file argument is given:\r\n\r\n````\r\n% git annex lookupkey in_annex in_annex_samekey \r\nSHA256E-s4--cdfba543ee8ef7fdb3d8b587648cc22dd792bbd6272cc5447307c7c106c2374c\r\nSHA256E-s4--cdfba543ee8ef7fdb3d8b587648cc22dd792bbd6272cc5447307c7c106c2374c\r\n% git annex metadata in_annex -s unique=yes\r\nmetadata in_annex \r\n  lastchanged=2017-03-26@09-22-07\r\n  some=value\r\n  some-lastchanged=2017-03-26@09-10-41\r\n  someother=value2\r\n  someother-lastchanged=2017-03-26@09-14-03\r\n  unique=yes\r\n  unique-lastchanged=2017-03-26@09-22-07\r\nok\r\n(recording state in git...)\r\n% git annex metadata -g unique\r\nyes\r\nyes\r\n````\r\n\r\nWhen an update changes the annex key of a file, no metadata is lost\r\n\r\n````\r\n% git annex unlock in_annex\r\nunlock in_annex (copying...) ok\r\n% echo \"more\" >> in_annex\r\n% git annex add in_annex\r\nadd in_annex ok\r\n(recording state in git...)\r\n% git commit -m update\r\n[master 77f21e1] update\r\n 1 file changed, 1 insertion(+), 1 deletion(-)\r\n% git annex lookupkey in_annex in_annex_samekey\r\nSHA256E-s9--d9375e7eeb21c8856728988bd073c546380cb07bd0b9c4b77f05e7d2799738e0\r\nSHA256E-s4--cdfba543ee8ef7fdb3d8b587648cc22dd792bbd6272cc5447307c7c106c2374c\r\n% git annex metadata in_annex\r\nmetadata in_annex \r\n  lastchanged=2017-03-26@09-22-07\r\n  some=value\r\n  some-lastchanged=2017-03-26@09-10-41\r\n  someother=value2\r\n  someother-lastchanged=2017-03-26@09-14-03\r\n  unique=yes\r\n  unique-lastchanged=2017-03-26@09-22-07\r\nok\r\n% git annex metadata in_annex -s moreunique=yes\r\nmetadata in_annex \r\n  lastchanged=2017-03-26@09-41-26\r\n  moreunique=yes\r\n  moreunique-lastchanged=2017-03-26@09-41-26\r\n  some=value\r\n  some-lastchanged=2017-03-26@09-10-41\r\n  someother=value2\r\n  someother-lastchanged=2017-03-26@09-14-03\r\n  unique=yes\r\n  unique-lastchanged=2017-03-26@09-22-07\r\nok\r\n(recording state in git...)\r\n% git annex metadata -g moreunique\r\nyes\r\n````\r\n\r\nNo error when setting metadata of non-existing paths (but errors on `get`) -- I cannot think of a reason why this is a good thing (TM):\r\n\r\n````\r\n% git annex metadata --json thinair\r\ngit-annex: thinair not found\r\ngit-annex: metadata: 1 failed\r\n1 % git annex metadata --json thinair -s wannabe=here\r\n% git annex metadata --json thinair\r\ngit-annex: thinair not found\r\ngit-annex: metadata: 1 failed\r\n1 \r\n````\r\n\r\n", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/1442/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/1442/timeline", "performed_via_github_app": null}