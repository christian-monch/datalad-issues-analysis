{"url": "https://api.github.com/repos/datalad/datalad/issues/1470", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/1470/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/1470/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/1470/events", "html_url": "https://github.com/datalad/datalad/issues/1470", "id": 223548218, "node_id": "MDU6SXNzdWUyMjM1NDgyMTg=", "number": 1470, "title": "RF `install` for return-values/generator/new-style API", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2017-04-22T07:54:50Z", "updated_at": "2017-05-04T12:43:10Z", "closed_at": "2017-05-04T12:43:10Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "I'll put things in this issue that I want to change in `install` when I touch it in the context of #1468. @yarikoptic please chime in and let me know what you think -- so we can avoid ping-pong during review:\r\n\r\n- [x] Rip out `if_dirty` option.  `install` is one of the last commands to have it (#1175) and we agreed to be able to work with semi-dirty datasets. Current default behavior is to save the entire dataset.\r\n- [x] Turn most exceptions into \"error\" results. `install` calls itself repeatedly when multiple sources are given, and we need to be able to relay failure upstairs while still being able to decide whether to ignore, continue, or stop upon first error.\r\n- [x] Figure out what Python API `install` should return in case a path to a directory in a subdataset is given as install `path` argument. In this case there will be no single result in response, and mixture of success and failure result status is easily possible. Any solution that requires aggregation of multiple results automatically rules out a default generator behavior, and also requires a further extensions of the post-processing API. One solution, compatible with the discussion in #1409 would be to have `install` not return anything about non-datasets by default. However, that seems awkward, unless we merely keep `install`'s ability to pass file/directory path arguments to `get` as a secondary convenience. However, keeping in mind that we planned to support complex source argument values (give me this file from this dataset at that version), we may need a more flexible default setup.\r\n- [ ] Present `install` does not produce results matching the order of input args. Reason is that it sorts list-args into two lists (URLs and paths), and then first installs the URLs and then the paths. This makes processing faster, but yielding individual results can put them out in an order that does not match the input args. Two easy ways out: 1. don't care (this only happens in calls where URLs and local paths are randomly mixed in one call; rather unlikely in any real-world use case), 2. process one-by-one (makes the common case slower, but guarantees the special case). I am leaning towards (1), plus documenting that this will happen in such cases.", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/1470/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/1470/timeline", "performed_via_github_app": null}