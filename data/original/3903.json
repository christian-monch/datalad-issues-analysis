{"url": "https://api.github.com/repos/datalad/datalad/issues/3903", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/3903/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/3903/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/3903/events", "html_url": "https://github.com/datalad/datalad/pull/3903", "id": 534091014, "node_id": "MDExOlB1bGxSZXF1ZXN0MzUwMDU3NDIy", "number": 3903, "title": "NF: Result hooks", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778592, "node_id": "MDU6TGFiZWw2Mzc3ODU5Mg==", "url": "https://api.github.com/repos/datalad/datalad/labels/enhancement", "name": "enhancement", "color": "0052cc", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 13, "created_at": "2019-12-06T15:48:33Z", "updated_at": "2019-12-10T20:25:16Z", "closed_at": "2019-12-10T11:35:18Z", "author_association": "MEMBER", "active_lock_reason": null, "pull_request": {"url": "https://api.github.com/repos/datalad/datalad/pulls/3903", "html_url": "https://github.com/datalad/datalad/pull/3903", "diff_url": "https://github.com/datalad/datalad/pull/3903.diff", "patch_url": "https://github.com/datalad/datalad/pull/3903.patch"}, "body": "This is aims to be a more flexible alternative to --proc-pre/post and its proposed successor of command hooks (#3264).\r\n\r\nThe key idea is that we have DataLad's results that all pass through the main event loop, and we can define ad-hoc hooks that run custom actions whenever a matching result is observed.\r\n\r\nKey differences to what we already have:\r\n\r\n- can act more than once per command execution\r\n- no \"pre\" action anymore\r\n- informed by the actual result itself\r\n- runs dataset procedures, but also any proper datalad command\r\n\r\nTo define a hook, two config variables need to be set:\r\n\r\n- `datalad.result-hook.<name>.match`\r\n- `datalad.result-hook.<name>.proc`\r\n\r\nwhere `<name>` is any Git config compatible identifier.\r\n\r\n`match` contains a JSON-encoded dict that is used to match a result against in order to test whether the respective hook should run. It can contain any number of keys. For each key it is tested, if the value matches the one in the result, if all match the hook is executed. In addition to `==` tests, `in`, `not in`, and `!=` tests are supported. The operation can be given by wrapping the test value into a list, the first item is the operation label 'eq', 'neq', 'in', 'nin' -- the second value is the test value (set). Example:\r\n\r\n```\r\n{\"type\": [\"in\", [\"file\", \"directory\"]], \"action\": \"get\", \"status\": \"notneeded\"}\r\n```\r\n\r\n`proc` is the specification of what the hook execution comprises. Any datalad command is suitable (which includes `run_procedure`). The value is a string, where the first word is the name of the datalad command to run (in Python notation). The remainder of the string is a JSON-encoded dict with keyword arguments for the command execution. Unlike `match` string substitution is supported. Any key from a matching result can be used to trigger a substitution with the respective value in the result dict. In addition a `dsarg` key is supported that is expanded with the `dataset` argument that was giving to the command that the `eval_func` decorator belongs to and is processing the results.\r\nBecause of the string substitution using Python's `format()`, curly braces have to be protected. Hence an example setting could look like:\r\n\r\n```\r\nunlock {{\"dataset\": \"{dsarg}\", \"path\": \"{path}\"}}\r\n```\r\n\r\nor\r\n\r\n```\r\nrun {{\"cmd\": \"touch {path}_annoyed\", \"dataset\": \"{dsarg}\", \"explicit\": true}}\r\n```\r\n\r\nHook evaluation obviously slows processing, especially given the location in the code path (`eval_func`). The code is trying to minimize this impact. However, the lookup of potential hooks in the config represents an unconditional additional cost.\r\n\r\nHowever, I consider this an extremely powerful mechanism that can be used to achieve custom setups without having to add features to the implementation of particular commands. So in summary I think this is worth the cost. \r\n\r\nFor more info, please see the test inside.\r\n\r\n### Benchmarks:\r\n\r\nOur standard benchmarks show no impact (not a surprise, not much happening in them). So I ran tests that generate a lot of results (saving a dataset with 10k tiny files):\r\n\r\n```\r\n# setup\r\nfor i in $(seq 10000); do s=$(uuid | tr '-' '/'); mkdir -p ${s:5:19} && echo $s > ${s:5}; done;\r\n\r\n# no hooks defined, this PR\r\ndatalad save  27.97s user 11.27s system 101% cpu 38.800 total\r\n\r\n# no hooks defined, master 6031944e8a7770ec59389b6d7ec02d122cfbcbc3\r\ndatalad save  28.72s user 11.56s system 84% cpu 47.818 total\r\n```\r\n\r\nLooking forward to your feedback @datalad/developers \r\n\r\nTODO:\r\n\r\n- [x] string substitution with windows paths leads to invalid JSON. No idea how to deal with that yet\r\n- [x] investigate and potentially adjust timing of installation success results for datasets. It seems as if further processing is being perform on the dataset (content) after it is yielded (see disabled test inside). Now addressed in https://github.com/datalad/datalad/pull/3906 (merged into this PR too)", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/3903/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/3903/timeline", "performed_via_github_app": null}