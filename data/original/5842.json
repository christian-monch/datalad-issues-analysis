{"url": "https://api.github.com/repos/datalad/datalad/issues/5842", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/5842/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/5842/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/5842/events", "html_url": "https://github.com/datalad/datalad/issues/5842", "id": 955849803, "node_id": "MDU6SXNzdWU5NTU4NDk4MDM=", "number": 5842, "title": "(Re)design of `remove` as `purge`", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778592, "node_id": "MDU6TGFiZWw2Mzc3ODU5Mg==", "url": "https://api.github.com/repos/datalad/datalad/labels/enhancement", "name": "enhancement", "color": "0052cc", "default": true, "description": ""}, {"id": 2803279290, "node_id": "MDU6TGFiZWwyODAzMjc5Mjkw", "url": "https://api.github.com/repos/datalad/datalad/labels/cmd-remove", "name": "cmd-remove", "color": "FEF2C0", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/datalad/datalad/milestones/89", "html_url": "https://github.com/datalad/datalad/milestone/89", "labels_url": "https://api.github.com/repos/datalad/datalad/milestones/89/labels", "id": 7131484, "node_id": "MI_kwDOANZqws4AbNFc", "number": 89, "title": "0.16.0", "description": "", "creator": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "open_issues": 4, "closed_issues": 3, "state": "open", "created_at": "2021-09-07T19:00:51Z", "updated_at": "2021-10-13T06:59:59Z", "due_on": null, "closed_at": null}, "comments": 12, "created_at": "2021-07-29T13:34:02Z", "updated_at": "2021-09-28T12:58:19Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Companion of #5832 (to be discussed in conjunction)\r\n\r\nContext: This is about approaching an improved implementation of the `remove` command, not in isolation, but in the context of a reconsideration of the drop/uninstall/remove combo, with the partial goal to replace the old remove entirely, and with that make progress towards #3368\r\n\r\nThis is an opportunity to reconsider the role of `remove` in the API, and amend it with the missing functionality we have identified (issues are linked below). This draft description is not about making a contrast to what the present `remove` is doing (there are massive overlaps), but about a comprehensible concept of what as companion of a refurbished `drop` (#5832) would need to do, and not do. The initial design draft is the result of a discussion of @adswa and @mih.\r\n\r\n### Basic concept\r\n\r\n`purge` is the companion of `drop` with a focus on \"destructive\" operations. It could be thought of as the antagonist to `clone`. It is used fully wipe out datasets, including top-most superdatasets.\r\n\r\n`purge` is called `purge` not `remove` to indicate the severity of the operation, and set it semantically apart from operations like `git rm`, which are typically reversible. This simplifies user expectations and avoid clunky alternative indicator (#4097).\r\n\r\n`purge` is needed for two things:\r\n1. to delete (sub-)datasets, because repositories and submodules are under special protection by git-annex\r\n2. to trigger a adequate `drop` call (the intention get rig of file content is semantically more clear when calling `drop`, than when saving the deletion of a file. Actual dropping behavior can be tweaked in `purge` (see below), not in `save`)\r\n\r\n`purge` prevents data loss by default. It inherits a number of parameters from `drop`, for which it typically acts as a frontend to benefit from its data security mechanisms (this includes primarily `--reckless`, and `--jobs`). `purge` supports a dedicated `--reckless` mode to immediately wipe out a dataset (hierarchy) with not checks whatsoever (#1282, #2673).\r\n\r\n`purge` should be able to recognize a botched attempt to remove a dataset with a plain `rm -rf`, and act on it in a meaningful way, even if it is just hinting at `chmod + rm -rf`.\r\n\r\n### Use cases\r\n\r\nThe following use cases operate in the dataset hierarchy depicted below.\r\n\r\n```\r\nsuper\r\n\u251c\u2500\u2500 dir\r\n\u2502   \u251c\u2500\u2500 fileD1\r\n\u2502   \u2514\u2500\u2500 fileD2\r\n\u251c\u2500\u2500 fileS1\r\n\u251c\u2500\u2500 fileS2\r\n\u251c\u2500\u2500 subA\r\n\u2502   \u251c\u2500\u2500 fileA\r\n\u2502   \u251c\u2500\u2500 subsubC\r\n\u2502   \u2502   \u251c\u2500\u2500 fileC\r\n\u2502   \u2514\u2500\u2500 subsubD\r\n\u2514\u2500\u2500 subB\r\n    \u2514\u2500\u2500 fileB\r\n```\r\n\r\nUnless explicitly stated, all command are assumed to be executed in the root of `super`.\r\n\r\n- `datalad purge subB`\r\n   Wipe out `subB`, leave `super` dirty (analog to `datalad clone` behavior)\r\n- `datalad purge -d . subB`\r\n   Wipe out `subB`, save removal in `super` (analog to `datalad clone -d .` behavior)\r\n\r\n- `datalad purge fileS2`\r\n   commits deletion, like `rm fileS2 + datalad save`, but with a prior `drop`!\r\n- `datalad purge dir`\r\n   like above, commits deletion of the entire directory and its content, unless subdatasets are found underneath (errors in this case)\r\n\r\n- `datalad purge subA`\r\n   errors because of present subdatasets\r\n- `datalad purge subA -r`\r\n   wipes out subdataset hierarchy, leaves `super` dirty\r\n\r\n- `datalad purge .` (purge in `super`)\r\n  errors, because of subdataset presence\r\n\r\n- `cd .. && datalad purge super -r`\r\n   eradicates super and its subdatasets entirely\r\n\r\nThe following use case are executed in `subB/` (equivalent to a `super` without subdatasets present)\r\n\r\n- `datalad purge .`\r\n  removes all files in the dataset, does *not* purge the dataset\r\n- `datalad purge -d .`\r\n  refuses to wipe out the entire dataset that is in CWD (like `rm -rf` does)\r\n- `cd .. && datalad purge subB`\r\n  wipes out `subB` with all its content and the dataset itself too\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/5842/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/5842/timeline", "performed_via_github_app": null}