{"url": "https://api.github.com/repos/datalad/datalad/issues/5155", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/5155/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/5155/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/5155/events", "html_url": "https://github.com/datalad/datalad/issues/5155", "id": 742018812, "node_id": "MDU6SXNzdWU3NDIwMTg4MTI=", "number": 5155, "title": "ENH: config.patch context manager", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-11-13T00:05:38Z", "updated_at": "2020-11-13T10:45:13Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "CLI has `datalad -c var=val ` which makes `var=val` in effect only for the duration of that `datalad` call.\r\nIn Python API AFAIK we do not have such a convenience, and only `patch_config` helper for tests.\r\n\r\nI think a good design pattern could be to just move that `patch_config` to become a context manager within `Config` itself, so we could do\r\n\r\n```python\r\nfrom datalad import cfg\r\nwith cfg.patch({'var': val, ...}):\r\n    ...\r\n```\r\n\r\nThat would also avoid \"touching\" protected `cfg._merged_store` within `datalad.tests.utils` thus keeping access to protected attributes within Config\r\n\r\nWDYT @datalad/developers ?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/5155/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/5155/timeline", "performed_via_github_app": null}