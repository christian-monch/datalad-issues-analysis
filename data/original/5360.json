{"url": "https://api.github.com/repos/datalad/datalad/issues/5360", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/5360/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/5360/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/5360/events", "html_url": "https://github.com/datalad/datalad/issues/5360", "id": 792079561, "node_id": "MDU6SXNzdWU3OTIwNzk1NjE=", "number": 5360, "title": "`run` <- `save` torpedos working with individually unlocked files", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 2767259861, "node_id": "MDU6TGFiZWwyNzY3MjU5ODYx", "url": "https://api.github.com/repos/datalad/datalad/labels/cmd-run/rerun", "name": "cmd-run/rerun", "color": "FEF2C0", "default": false, "description": "Issues about the favorite command of ReproPeople"}, {"id": 2767271225, "node_id": "MDU6TGFiZWwyNzY3MjcxMjI1", "url": "https://api.github.com/repos/datalad/datalad/labels/cmd-save", "name": "cmd-save", "color": "FEF2C0", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-01-22T15:08:46Z", "updated_at": "2021-03-04T06:54:01Z", "closed_at": "2021-03-04T06:54:01Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Scenario: I have a tool that relies on database files to operate (Berkeley DB). These files are opened `rw`, even for query operations. These DB files are essential for operation (cannot be ignored or regenerated). I want to capture the output of this tool with `datalad run`, hence `datalad save` will be used internally.\r\n\r\nProblem: The DB files are big enough, and change frequently enough to warrant annexing. But when files are locked, I would need to go through a `datalad run` for any command execution (to get the DB files to open `rw`), even for trivial reporting. This makes things inconvenient and slow.\r\n\r\nPotential solution 1: Send the dataset into adjusted-unlocked mode, and require it to be used in this way. However, that seems heavy handed, as there are just a handful of these files in a single directory that needs special handling, not the entire repo.\r\n\r\nPotential solution 2: Commit the unlocked state of these individual files.\r\n\r\nThis second solution is directly supported by git-annex (and works fine, as far as I can tell):\r\n\r\n> `# git annex unlock my_cool_big_file`\r\n> That changes what's stored in git between a git-annex symlink (locked) and a git-annex pointer file (unlocked). You can commit the change, if you want that file to be unlocked in other clones of the repository.\r\n\r\nBut it does not work with `datalad`, because `datalad save` will forcibly revert the state of an annexed file to \"locked\" with seemingly no way to prevent it.\r\n\r\n```sh\r\n# produce a dataset with a single locked file\r\n% datalad create demo\r\n% echo 123 > testfile\r\n% datalad save\r\n\r\n# unlock file \"permanently\"\r\n% git annex unlock testfile\r\nunlock testfile ok\r\n(recording state in git...)\r\n% git status\r\nOn branch master\r\nChanges to be committed:\r\n  (use \"git restore --staged <file>...\" to unstage)\r\n        typechange: testfile\r\n% git commit -m \"keep unlocked\"\r\n[master 3450867] keep unlocked\r\n 1 file changed, 1 insertion(+), 1 deletion(-)\r\n rewrite testfile (100%)\r\n mode change 120000 => 100644\r\n\r\n# modify\r\n% echo 345 >> testfile\r\n# works without additional explicit unlock\r\n% cat testfile\r\n123\r\n345\r\n# and is automatically recorded as an annex key update\r\n% git diff | cat\r\ndiff --git a/testfile b/testfile\r\nindex 5b353e4..31f9f36 100644\r\n--- a/testfile\r\n+++ b/testfile\r\n@@ -1 +1 @@\r\n-/annex/objects/MD5E-s4--ba1f2511fc30423bdbb183fe33f3dd0f\r\n+/annex/objects/MD5E-s8--bf4d9751c6249d31a5ab1983661ddfa6\r\n# proper \"save\" works like this\r\n% git add testfile && git commit -m update\r\n\r\n# further modification possible at any time\r\n% echo 789 >> testfile\r\n\r\n# but a dataset save ruins it\r\n% datalad save\r\n% echo \"boom\" >> testfile\r\nzsh: permission denied: testfile\r\n```\r\n\r\nSummary:\r\n\r\n- I want to use `run`\r\n- These DB (must-be-unlocked) files need saving when something actually changes, but I do not want to pay the unlock penalty on each query-style call (each script using the original tool read-only would need to be adjusted to use it through a properly parametrized `datalad run` call.\r\n- But each use of `datalad run` resets the necessary state of the DB files (re-locks them), and needs to be followed with a dedicated fix-up intervention\r\n", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/5360/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/5360/timeline", "performed_via_github_app": null}