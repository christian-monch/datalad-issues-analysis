{"url": "https://api.github.com/repos/datalad/datalad/issues/437", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/437/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/437/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/437/events", "html_url": "https://github.com/datalad/datalad/issues/437", "id": 155349301, "node_id": "MDU6SXNzdWUxNTUzNDkzMDE=", "number": 437, "title": "Should we harmonize our (perspective) config with git or with Python?", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778594, "node_id": "MDU6TGFiZWw2Mzc3ODU5NA==", "url": "https://api.github.com/repos/datalad/datalad/labels/question", "name": "question", "color": "fbca04", "default": true, "description": "Issue asks a question rather than reporting a problem"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 14, "created_at": "2016-05-17T20:06:22Z", "updated_at": "2016-09-06T14:35:04Z", "closed_at": "2016-09-06T14:35:04Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "So far I have plugged SafeConfigParserWithIncludes which is based on stock Python's ConfigParser and originally hacked (by me) for fail2ban a decade ago to allow explicitly including other files using `[INCLUDES]` section.  I have also started to use ':' in section names to define some kind of hierarchical (atm just `section:subsection`) relation to group some sections together.  We also allow for option keys within those sections to have spaces in them.  As such, although visually very similar, it is different from ad-hoc git's config which I think doesn't bother allowing spaces in the option key names, and allows for subsections specification via `[section \"subsection\"]`.  That is how we get usually used `[branch \"master\"]` or `[remote \"origin\"]` (sub)sections.  Python's parser can't handle such section names with spaces btw.\n\nQ1:  So I wondered -- should we go Python + ad-hoc or Git ad-hoc way?  If git way -- we could use I guess GitPython for reading (and may be even for writing):\n\n``` ipython\nIn [1]: from git.config import GitConfigParser\nIn [3]: config = GitConfigParser('.git/config')\nIn [4]: config.read()\nIn [6]: config.get_value('branch \"master\"', 'remote')\nOut[6]: u'origin'\n*In [7]: config.get_value('branch', 'remote')\n---------------------------------------------------------------------------\nNoSectionError \n```\n\nQ2: I don't think git does it that way, but I think we should (as we already do) enable overrides for those variables defined in config files, via environment variables.  ATM, since there were no notion of 'subsection', we just split out section name right after leading `DATALAD_`, and use the rest for the key (also we magically assume section GENERAL if there is no other `_` in the suffix).  So depending on the choice of the config format, how could we uniformly point to subsections assuming that some sections?\nIn case of git format, it might be actually simple -- since it seems to not allow having `_` as well anywhere in the names.  So we could easily judge by number of underscores, having syntax like `DATALAD_[<SECTION>[_<SUBSECTION>]]_KEY`.\n\nQ3: eventually I guess the ConfigManager should also be interfaced into 'cmdline interface' so we could, similar to git/annex specify those arbitrary options in the command line (e.g. -c datalad.section.subsection=value) while even possibly allowing for passing 'annex.' and 'git.' options into Git/AnnexRepo classes set of default options.  Or...?\n\nWhat do you think @datalad/developers ? ;)\n", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/437/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/437/timeline", "performed_via_github_app": null}