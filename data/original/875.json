{"url": "https://api.github.com/repos/datalad/datalad/issues/875", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/875/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/875/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/875/events", "html_url": "https://github.com/datalad/datalad/issues/875", "id": 178347079, "node_id": "MDU6SXNzdWUxNzgzNDcwNzk=", "number": 875, "title": "install --existing to provide \"distribution guarantees\" ;)", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778592, "node_id": "MDU6TGFiZWw2Mzc3ODU5Mg==", "url": "https://api.github.com/repos/datalad/datalad/labels/enhancement", "name": "enhancement", "color": "0052cc", "default": true, "description": ""}, {"id": 440544386, "node_id": "MDU6TGFiZWw0NDA1NDQzODY=", "url": "https://api.github.com/repos/datalad/datalad/labels/fix-implemented", "name": "fix-implemented", "color": "0e8a16", "default": false, "description": "A fix is available, but has not been merged or released, yet."}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/datalad/datalad/milestones/38", "html_url": "https://github.com/datalad/datalad/milestone/38", "labels_url": "https://api.github.com/repos/datalad/datalad/milestones/38/labels", "id": 2396155, "node_id": "MDk6TWlsZXN0b25lMjM5NjE1NQ==", "number": 38, "title": "Release 0.5.1", "description": "", "creator": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 6, "state": "closed", "created_at": "2017-03-19T15:59:19Z", "updated_at": "2017-07-31T01:54:38Z", "due_on": null, "closed_at": "2017-07-31T01:54:38Z"}, "comments": 15, "created_at": "2016-09-21T13:29:34Z", "updated_at": "2017-05-07T11:43:12Z", "closed_at": "2017-05-07T11:43:12Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Originally discussed in https://github.com/datalad/datalad/issues/871#issuecomment-248607035\n\nFew points of support in having a way to run the same `install` consecutively without failing and incurring any major cost (like `--force` would do)\n1. (lame one) that is how it works now in released version\n2. datalad walks the line between VCS and \"distributions\".  With VCS (e.g. git) you expect to fail if you try to clone in the same location twice.  With a \"distribution\" you expect for \"install\" to provide a guarantee that whatever you asked it to get installed, it is installed (e.g. run \"apt-get install package\" twice).  So, at a high level, I would us to prefer to provide \"distribution\" semantic -- that if someone is asked to be installed, and it was already installed -- we just say \"ok\".\n3. such situation would keep coming more often in Python code where we want people just to have `ds = install(\"dataset\")` and then jump to analyzing that data, instead of doing all the shebang in removing/reinstalling it every time they run the script, or asking to guard it with `if exists`\n\nSituation with distribution semantic becomes more interesting whenever we make command a bit more \"specific\". E.g. if I ask to \"install package=version\" and that is not the version already installed -- it should install requested version, and if it can't -- then fail.  Again -- it just a matter of \"fulfilling the promise\".\n\nBack to your argument -- `We can detect, that there is not only \"something\" but a repo and spit this out, but we cannot tell, whether or not that is the thing you just requested`.  Not quite.  We can test if something is what we are asking to be installed  (by taking a URL from the default remote which we use now -- the `origin`, and comparing to the url we are trying to clone from while allowing for optional .git/ and may be difference in protocols... so operating on RIs.hostname and .path would help).  Since we are not asking for a particular version (yet), we would check and fulfill the promise.\nEventually, I would like us to extend syntax of supported URLs so we could somehow state the version to be installed (e.g. `http://example.com/somerepo@some-tag-or-treeish` or better `http://example.com/somerepo#version=some-tag-or-treeish`). Then, besides checking the URL to correspond we would need to check if we are the requested version position and possibly \"upgrade\".  The same situation is kinda now, if it exists already, but outdated, we might want it to be upgraded.\n\n(Situation would be a bit more evolved also due to -g, and -r flags to provide complete \"assurance\", but imho doable)\n\nSo, altogether, I think we will need to add an option `--existing` which could take following values\n- **skip**  just would do nothing and report success (current release behavior I believe)\n- **warn** what will become behavior in 0.3 (succeed but with a warning)\n- **upgrade** which would do operations which would make currently installed version close if not identical to the one you would have got if installed anew (to become default when implemented)\n- **replace** which would be what you are suggesting with `--force`\n- **error** fail with an exception/error\n\nThis would also be somewhat inline with `create-sibling --existing=(skip,replace,error,reconfigure)`\n\nBut in the short run, I would prefer us to maintain \"skip\"\n", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/875/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/875/timeline", "performed_via_github_app": null}