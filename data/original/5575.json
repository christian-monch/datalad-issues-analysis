{"url": "https://api.github.com/repos/datalad/datalad/issues/5575", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/5575/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/5575/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/5575/events", "html_url": "https://github.com/datalad/datalad/pull/5575", "id": 859205423, "node_id": "MDExOlB1bGxSZXF1ZXN0NjE2MzI0Njc4", "number": 5575, "title": "RF: centralize logic on either @eval_results used, remove need for _OLDSTYLE_COMMANDS", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778592, "node_id": "MDU6TGFiZWw2Mzc3ODU5Mg==", "url": "https://api.github.com/repos/datalad/datalad/labels/enhancement", "name": "enhancement", "color": "0052cc", "default": true, "description": ""}, {"id": 526935563, "node_id": "MDU6TGFiZWw1MjY5MzU1NjM=", "url": "https://api.github.com/repos/datalad/datalad/labels/feedback-desired", "name": "feedback-desired", "color": "fbca04", "default": false, "description": ""}, {"id": 545918236, "node_id": "MDU6TGFiZWw1NDU5MTgyMzY=", "url": "https://api.github.com/repos/datalad/datalad/labels/DX", "name": "DX", "color": "0052cc", "default": false, "description": "developer experience"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 7, "created_at": "2021-04-15T19:59:03Z", "updated_at": "2021-04-29T21:58:42Z", "closed_at": "2021-04-28T12:46:15Z", "author_association": "MEMBER", "active_lock_reason": null, "pull_request": {"url": "https://api.github.com/repos/datalad/datalad/pulls/5575", "html_url": "https://github.com/datalad/datalad/pull/5575", "diff_url": "https://github.com/datalad/datalad/pull/5575.diff", "patch_url": "https://github.com/datalad/datalad/pull/5575.patch"}, "body": "ATM it is needed to define _no_eval_results attribute to signal docbuilder to\r\nnot populate docs for all the additional kwargs provided by @eval_results.\r\nSome commands even acquired @eval_results (e.g. create_sibling) but still had\r\nthat attribute still set to True for unknown reason (probably just an effect of\r\nthe decentralized logic during RFing).  The effect of this was not\r\nmentioned probably because outside users/developers  do not care to look up for\r\nthose possible additional kwargs, and \"core\" developers simply know about them.\r\n\r\nI believe a similar situation was with common options defined at top level for\r\ndatalad (--on-error, etc) -- since old interfaces did not care to return/yield\r\nstructured records, they could (and still can) be provided but have no real\r\neffect on anything.  So even though I had to tune up some tests in\r\ninterfaces/tests/test_base.py I expect them to be of no negative effect.\r\n\r\nThis change ENHs @eval_results to add _eval_results attriute to the wrapper, so\r\noutside logic could consistently decide to either add docstrings AND to handle\r\nall those additional kwargs.  Even though we would still have some common\r\noptions which are not applicable to interfaces which have no @eval_results, I\r\nexpect situation to not differ pragmatically in that regard.\r\n\r\nAs a result it should no longer require listing of OLDSTYLE commands.\r\n\r\nI can see how some developers might take it as undesired effect since now there\r\nwould be no hardcoded listing of commands to RF or get rid of.  Since we\r\ndefine a single Interface per file, analogous check could be done e.g.  via\r\n\r\n\t$> git grep -l 'class.*(Interface)' | xargs grep -L @eval_results | grep -v -e '/test_'\r\n\tdatalad/distribution/create_sibling_github.py\r\n\tdatalad/distribution/create_test_dataset.py\r\n\tdatalad/interface/add_archive_content.py\r\n\tdatalad/interface/ls.py\r\n\tdatalad/interface/test.py\r\n\tdatalad/support/sshrun.py\r\n\r\nin the core codebase (so we would indeed loose some hits from extensions).\r\n\r\nBut to me, and with shell-completion\r\n(https://github.com/datalad/datalad/pull/5544) and sshrun helpers as use cases,\r\nit seems more of a matter of the fact that not all Interfaces should provide\r\nfancy results handling: they might be leaf interfaces not intended for nesting\r\nin a larger logic, not operate on datasets or be generators, have no associated\r\nwith their action paths, etc.  I really see no reason to complicate their code\r\nwith more code to accomplish the same mission and possibly only to complicate\r\ndebugging.  I think we should allow for those to co-exist in peace with\r\nfancy @eval_result'ed interfaces.\r\n\r\nIf we decide to allow for \"simple\" interfaces (for such helpers as above), we\r\nmight want to RF further to derive an InterfaceWithResults to avoid ad-hoc\r\n_has_eval_results_call, which this PR introduces, and/or to avoid explicit\r\naddition of the @eval_results for every __call__ of every InterfaceWithResults.\r\nThe above witch hunt also could be carried through a simple grep\r\n'class.*(Interface)'.\r\n\r\nTODOs\r\n- [x] see if any functionality broken (didn't do a full sweep of tests) - seems all as kosher as could be\r\n- [x] discussion on desire/feasibility\r\n- [ ] decide on either to introduce `InterfaceWithResults` here", "closed_by": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/5575/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/5575/timeline", "performed_via_github_app": null}