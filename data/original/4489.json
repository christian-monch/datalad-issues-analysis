{"url": "https://api.github.com/repos/datalad/datalad/issues/4489", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/4489/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/4489/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/4489/events", "html_url": "https://github.com/datalad/datalad/issues/4489", "id": 613635924, "node_id": "MDU6SXNzdWU2MTM2MzU5MjQ=", "number": 4489, "title": "git-annex's \"gcrypt::\" prefix in special remote url value causes datalad to \"fail\"", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2020-05-06T21:51:47Z", "updated_at": "2021-03-12T10:50:57Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "... since we treat that URL as an ssh url, and try to establish our socket to that host.\r\n\r\nBackground story: I tried `gcrypt::` prefix since I want to have data compressed on the special remote, and the only way to achieve it ATM AFAIK is simply to enable encryption which would compress keys as a \"side effect\". But git-annex (I am using 8.20200309+git133-gc29943f40-1~ndall+1 ATM) decides to be overprotective and says\r\n\r\n```shell\r\n> git annex initremote github-lfs type=git-lfs url=https://github.com/yarikoptic/test-github-lfs encryption=shared\r\ninitremote github-lfs (encryption setup) (encryption key stored in git repository) \r\ngit-annex: Encryption is enabled for this remote, but only the files that git-annex stores on it would be encrypted;  anything that git push sends to it would not be encrypted. Recommend prefixing the url with \"gcrypt::\" to also encrypt git pushes. (Use --force if you want to use this likely insecure configuration.)\r\n```\r\n\r\nif I just use `--force` -- `autoenable` in effect is not working since it does the same check at the later `init` point in the clone... so I decided to try `gcrypt::` prefix.\r\n\r\n<details>\r\n<summary>Here is a full script I was cooking up to establish heudiconv-testdata with some comments of exploration</summary> \r\n\r\n```shell\r\n#!/bin/bash\r\n  \r\n# Prepare a datalad dataset for heudiconv testdata, with data from\r\n# \r\n\r\ndatalad --version\r\ngit annex version\r\n\r\nexport PS4='> '\r\nset -x\r\nset -eu\r\n\r\nn=heudiconv-testdata\r\nd=heudiconv-dcm_physio\r\n\r\n[ ! -e \"$n\" ]\r\n\r\n# let's fetch the repo with data\r\n\r\n[ -e \"$d\" ] || git clone -b dcm_physio https://github.com/cbinyu/heudiconv.git \"$d\"\r\n\r\ndatalad create -c text2git \"$n\"\r\n(\r\ncd \"$n\"\r\ndatalad create-sibling-github --name origin \"$n\"\r\n\r\n# Initial push setting master to be pushed there by default\r\ngit push -u origin master\r\n\r\n# Configure git-annex LFS special remote which should be autoenabled\r\n#\r\n# --force to avoid, since we do not really care about encrypting git itself here\r\n# > git annex initremote github-lfs type=git-lfs url=https://github.com/yarikoptic/test-github-lfs encryption=shared\r\n# initremote github-lfs (encryption setup) (encryption key stored in git repository) \r\n# git-annex: Encryption is enabled for this remote, but only the files that git-annex stores on it would be encrypted;  anything that git push sends to it would not be encrypted. Recommend prefixing the url with \"gcrypt::\" to also encrypt git pushes. (Use --force if you want to use this likely insecure configuration.)\r\n# \r\n# git annex initremote --force github-lfs type=git-lfs url=https://github.com/yarikoptic/\"$n\" encryption=shared autoenable=true\r\n#\r\n# but if we --force it here, then it would still fight us back on autoenable - causing the whole process to crash\r\n# so we will try to follow recommendatation and do gcrypt:: thing\r\ngit annex initremote github-lfs type=git-lfs url=gcrypt::https://github.com/yarikoptic/\"$n\" encryption=shared autoenable=true\r\n\r\n# Tell that LFS should contain all data, unless we explicitly mark it with some\r\n# distribution-restrictions metadata\r\ngit annex wanted github-lfs \"not metadata=distribution-restrictions=*\"\r\n\r\n# Configure locally that publishing to origin should also first copy\r\n# the data\r\ngit config --add remote.origin.datalad-publish-depends github-lfs\r\n\r\n# Copy and save the data\r\n# Let's create some structure\r\nmkdir -p physio\r\ndatalad run -m \"Injesting original data from @cbinyu\" cp -r ../$d/heudiconv/tests/data/samplePhysio physio/sample1\r\n\r\n# Publish -- since we setup everything, nothing else to be said ;)\r\ndatalad publish\r\n)\r\n```\r\n</details>\r\n\r\nwhich at the end stalls for a while and eventually times out with:\r\n\r\n```\r\n[INFO   ] Publishing to configured dependency: 'github-lfs' \r\n[INFO   ] Publishing <Dataset path=/home/yoh/picts/mris/heudiconv-testdata> data to github-lfs \r\n[INFO   ] Publishing <Dataset path=/home/yoh/picts/mris/heudiconv-testdata> to github-lfs \r\n[WARNING] Remote github-lfs has no configured refspec \r\n\r\n\r\nssh: connect to host gcrypt port 22: Connection timed out\r\nConnectionOpenFailedError: command '['ssh', '-fN', '-o', 'ControlMaster=auto', '-o', 'ControlPersist=15m', '-o', 'ControlPath=/home/yoh/.cache/datalad/sockets/e4ebca10', 'gcrypt']' failed with exitcode 255\r\nFailed to open SSH connection (could not start ControlMaster process)\r\nbash prep-heudiconv-testdata  7.60s user 2.54s system 20% cpu 50.585 total\r\n```\r\n\r\nand when I looked into `ps` hierarchy I saw:\r\n```\r\nyoh      3630715  0.0  0.0   6728  2460 pts/46   S+   17:20   0:00  |   |       \\_ bash prep-heudiconv-testdata\r\nyoh      3631627  1.1  0.1 111064 33072 pts/46   S+   17:20   0:00  |   |           \\_ /home/yoh/proj/datalad/datalad-maint/venvs/dev3.8/bin/python /home/yoh/proj/datalad/datalad-maint/venvs/dev3.8/bin/datalad publish\r\nyoh      3632278  0.0  0.0  11328  6056 pts/46   S+   17:20   0:00  |   |               \\_ ssh -fN -o ControlMaster=auto -o ControlPersist=15m -o ControlPath=/home/yoh/.cache/datalad/sockets/e4ebca10 gcrypt\r\n```\r\nwhich explained why it was \"waiting\".\r\nClearly our RI is not aware of such \"url\" form:\r\n```\r\n$> python -c 'from datalad.support.network import RI; print(repr(RI(\"gcrypt::https://github.com/yarikoptic/heudiconv-testdata\")))'\r\nSSHRI(hostname='gcrypt', path=':https://github.com/yarikoptic/heudiconv-testdata')\r\n```\r\nalthough standard `urlparse` is ok with it placing everything after first `:` into path component:\r\n\r\n```shell\r\n$> python -c 'from urllib.parse import urlparse; print(repr(urlparse(\"gcrypt::https://github.com/yarikoptic/heudiconv-testdata\")))'\r\nParseResult(scheme='gcrypt', netloc='', path=':https://github.com/yarikoptic/heudiconv-testdata', params='', query='', fragment='')\r\n```\r\n\r\nLooking at https://en.wikipedia.org/wiki/URL I think it might be all legit (didn't check full grammar).  Not sure why joey didn't just go for `+` composition (like we now with `ria+URL`) so `scheme` remains \"legit\" without this confusing path with `:` etc.  Moreover,  IIRC `::` is also used by rsync to signal using rsync protocol, e.g.\r\n```\r\n$> rsync neuro.debian.net::neurodebian\r\ndrwxr-sr-x             78 2014/02/03 21:59:37 .\r\n-rw-r--r--             11 2020/05/06 17:10:01 .timestamp\r\n...\r\n```\r\nso if we were to auto-detect that one -- we would have had even more fun.\r\n\r\nSince overall it seems to be a \"legitish\" URL, I am afraid we would need to do something about it on datalad side, but I am not yet sure what should be the most sensible generic way (we might need a new type of an RI, like AnnexRI which would carry this prefix + original URL in `.url`).  I just wish (didn't file any issue yet for @joeyh) that git-annex was not pretty much twisting my arm to use this `gcrypt::` prefix which I do not really care about, or had it as a special remote option instead of wrapping it into a url.  ", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/4489/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/4489/timeline", "performed_via_github_app": null}