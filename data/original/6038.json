{"url": "https://api.github.com/repos/datalad/datalad/issues/6038", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/6038/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/6038/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/6038/events", "html_url": "https://github.com/datalad/datalad/issues/6038", "id": 1017547213, "node_id": "I_kwDOANZqws48ponN", "number": 6038, "title": "Describe result_renderer kwarg semantics", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 227904225, "node_id": "MDU6TGFiZWwyMjc5MDQyMjU=", "url": "https://api.github.com/repos/datalad/datalad/labels/documentation", "name": "documentation", "color": "cfd3d7", "default": true, "description": "Changes only affect the documentation"}, {"id": 390153891, "node_id": "MDU6TGFiZWwzOTAxNTM4OTE=", "url": "https://api.github.com/repos/datalad/datalad/labels/UX", "name": "UX", "color": "0052cc", "default": false, "description": "user experience"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2021-10-06T06:02:36Z", "updated_at": "2021-10-06T06:38:58Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Presently the (Python API) docs say\r\n\r\n```\r\nresult_renderer : {'default', 'json', 'json_pp', 'tailored'} or None, optional\r\n  format of return value rendering on stdout. [Default: None]\r\n```\r\n\r\nThis has issues:\r\n\r\n1. It does not mention the `'disabled'` value, which turns result rendering off\r\n2. It does not mention that `None` is NOT turning result rendering off, but will trigger a query of `datalad.api.result-renderer` to determine a result renderer\r\n\r\nThis is not at all obvious, especially given the fact that `datalad.api.result-renderer` itself is not documented.\r\n\r\nI have the suspicion that we will find `result_renderer=None` in the code base, where it should say `result_renderer='disabled'`.\r\n\r\nIt could be argued that the `datalad.api.result-renderer` config setting should be removed, because we already have enough ambiguity with the `default` result renderer not necessarily being the \"default\" (because `tailored` might be), and a config setting `datalad.api.result-renderer` configuring another default, which is neither \"default\", not `default`, but only get's its turn when yet another condition is reached. I am not aware of any use case for this setting either.\r\n\r\nIt should also be mentioned somewhere that there seems to be support for an `Interface` attribute `result_renderer_cmdline`, which may alter the behavior in ways that I do not understand yet.\r\n\r\nLooking further, I see this code in `datalad/cmdline/main.py`:\r\n\r\n```py\r\n        if hasattr(cmdlineargs, 'result_renderer'):\r\n            cmdlineargs.result_renderer(ret, cmdlineargs)\r\n```\r\n\r\nwhich will try render results whenever an interface ends up having a `result_renderer` attribute. This seems weird, as a result renderer can only handle a single result, but there might be multiple.\r\n\r\nThe effective result renderer *on the command line* is determined by this logic:\r\n\r\n```py\r\n            # allow commands to override the default, unless something other than\r\n            # default is requested\r\n            kwargs['result_renderer'] = \\\r\n                args.common_output_format if args.common_output_format != 'tailored' \\\r\n                else getattr(cls, 'result_renderer', 'default')\r\n            if '{' in args.common_output_format:\r\n                # stupid hack, could and should become more powerful\r\n                kwargs['result_renderer'] = DefaultOutputRenderer(args.common_output_format)\r\n```\r\n\r\nFirst, at this point it will not be a surprise that `DefaultOutputRenderer` has nothing to do with `default_result_renderer`, and is in no way a default.\r\n\r\nSecond, the interface attribute `result_renderer` cannot `None` from the cmdline (rendering `datalad.api.result-renderer` useless, except for internal calls), but it can become any other str value, hence not necessarily a callable. However, there is code in `datalad/interface/utils.py` that will eventually raise a `ValueError('unknown result renderer \"{}\"'.format(result_renderer))` for any unsopported value.\r\n\r\nUfff...", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/6038/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/6038/timeline", "performed_via_github_app": null}