{"url": "https://api.github.com/repos/datalad/datalad/issues/2755", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/2755/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/2755/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/2755/events", "html_url": "https://github.com/datalad/datalad/issues/2755", "id": 349141682, "node_id": "MDU6SXNzdWUzNDkxNDE2ODI=", "number": 2755, "title": "Convention for generator methods in *Repo classes", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 6, "created_at": "2018-08-09T14:02:23Z", "updated_at": "2018-11-04T17:34:00Z", "closed_at": "2018-11-04T17:34:00Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "The `*Repo` classes are not really intended to be the user-facing interface, but historically they offer some convenience functionality (e.g. path normalization and type conversion). Some if this turned into more of a problem than an aid. For example, when results are forcibly gathered into a list, thereby preventing any benefits of implementing top-level commands as generator.\r\n\r\nIn #2749 I started working on rectifying this, but rewriting the low-level methods to work as generators. I have added `add_()` as the generator for `add()`, while keeping the old one around. The motivation for the latter was to keep the tests/old code working.\r\n\r\nHowever, the Q is, whether we should use this as a common convention to ease use even for methods that are only available as generators now (e.g. `set_metadata()`).\r\n\r\nPlease tell me what you think.", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/2755/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/2755/timeline", "performed_via_github_app": null}