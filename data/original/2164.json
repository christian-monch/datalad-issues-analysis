{"url": "https://api.github.com/repos/datalad/datalad/issues/2164", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/2164/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/2164/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/2164/events", "html_url": "https://github.com/datalad/datalad/issues/2164", "id": 296899342, "node_id": "MDU6SXNzdWUyOTY4OTkzNDI=", "number": 2164, "title": "aggregate-metadata --incremental? (AKA --inner-since)", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 700886055, "node_id": "MDU6TGFiZWw3MDA4ODYwNTU=", "url": "https://api.github.com/repos/datalad/datalad/labels/metadata", "name": "metadata", "color": "0052cc", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2018-02-13T21:55:09Z", "updated_at": "2018-03-20T07:34:18Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "#### What is the problem?\r\n\r\nRelevant:\r\n- #850 `--since` which is largely to figure out which datasets to perform metadata-aggregation on since they have changed\r\n- #1902 `--skip-aggregated` is in the same vain again at the level of datasets\r\n\r\nWe talked about it before (and in the recent proposal) but I think we there is no dedicated issue for the discussion.\r\nNow that I am fetching a few TBs of data for datasets for which I have dropped that data content since we cannot actually keep all of it locally all the time (wouldn't scale), I saw the need for metadata aggregation to become \"incremental\" in default mode of aggregation.  Not only that with `--since` we could skip reaggregation of datasets which didn't change since the last aggregation, but similar analysis should be done on per-file level considering the `diff` between the revisions.  In general it could end up being a part of the `--since` operation within the dataset (hence `--inner-since` in the title ;-)), but I wanted to summarize it in a different issue since its implementation is trickier.\r\n\r\nSo it would be nice if extractors could be aware of the need to reaggregate all of the data (extractor-specific version within the extracted metadata file? ;-) ), and skip those files which were already aggregated and for which content might no longer be locally available.  We could add a config or an options to  get the content needed to get metadata extracted/updated (most likely that one would be locally available since re-aggregation would be happening shortly after new content added)\r\n- force reaggregation.  \r\n\r\nSupport for incremental operation would be trivial for some extractors (all the file-based nifti1 etc) and not as trivial for the ones considering the files layout to be a part of the metadata (bids). \r\n\r\nThat potentially could make (re)aggregation to become feasible with each commit\r\n\r\n# Additional points which came to mind:\r\n- [ ] git-annex metadata lives in separate `git-annex` branch which would be constantly changing while data is get/drop'ed. We need to record the state (hexsha) of git-annex branch when metadata is aggregated for later  analysis of metadata differences from the last aggregation point (i think this is not yet done)\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/2164/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/2164/timeline", "performed_via_github_app": null}