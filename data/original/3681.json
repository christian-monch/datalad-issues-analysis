{"url": "https://api.github.com/repos/datalad/datalad/issues/3681", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/3681/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/3681/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/3681/events", "html_url": "https://github.com/datalad/datalad/issues/3681", "id": 494068455, "node_id": "MDU6SXNzdWU0OTQwNjg0NTU=", "number": 3681, "title": "[wishlist] copy/move command to support copying annex availability/metadata across repos", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778592, "node_id": "MDU6TGFiZWw2Mzc3ODU5Mg==", "url": "https://api.github.com/repos/datalad/datalad/labels/enhancement", "name": "enhancement", "color": "0052cc", "default": true, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2019-09-16T13:59:20Z", "updated_at": "2020-05-02T15:57:00Z", "closed_at": "2020-05-02T15:57:00Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "ATM it is not trivial to copy an annexed file(s) from one dataset to another, while trying to preserve information about its availability via URLs (from web and other remotes).    Use cases are\r\n\r\n- copying a subset of files from a large repo into a smaller / more targetted one\r\n- moving files from one dataset into another (e.g. withing a hierarchy of datasets)\r\n\r\n`move` is just a special case which would entail running `remove` after `copy`, although still desiring that `--no-drop` for remove for the majority of the use cases I see (https://github.com/datalad/datalad/issues/2673)\r\n\r\nFollowing actions should be done when copying files from one repo to another:\r\n\r\n- annex level metadata should be copied as well\r\n- register those urls from the original repository in the target repository for annexed file\r\n- If some URLs are handled via special remotes, we should also init/enable those remotes in the target repo.  If a remote with such a name already exists, we could verify if parameters are the same, and if not -- warning/crash/ignore (config var) and/or inform the parameters to the user\r\n\r\n## Additional use case to address: creating URLs per file\r\n\r\n### http(s)\r\nUsecase from @satra is to get/use a few files from freesurfer repo.  It is not pragmatic to just add that repo as a remote so annex could fetch files from it since that repo's .git/objects is already >600MB.  That usecase is a bit trickier:  files do not have URLs associated with them, but the remote is available via http (https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/repo/freesurfer.git) and the actual load is somewhere there under [annex/objects](https://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/repo/freesurfer.git/annex/objects/) but because it is a bare repo special remote (ref: [annex docs](http://git-annex.branchable.com/internals/hashing/)), annex/objects cache paths use different layout from the one on a clone on a regular clone. \r\n```bash\r\n> git annex examinekey --format='${hashdirlower}' SHA256E-s200057528--a4da07a728f5cfac9c20e600e0c2ca0417ebd4e92f89aca1faddb11793b12c7a.tar.gz\r\n958/132/% \r\n```\r\n<details>\r\n<summary>so `examinekey` could be used to deduce the cache dir and compose the url :</summary> \r\n\r\n```shell\r\n$> wget 'https://surfer.nmr.mgh.harvard.edu//pub/dist/freesurfer/repo/annex.git//annex/objects/958/132/SHA256E-s200057528--a4da07a728f5cfac9c20e600e0c2ca0417ebd4e92f89aca1faddb11793b12c7a.tar.gz/SHA256E-s200057528--a4da07a728f5cfac9c20e600e0c2ca0417ebd4e92f89aca1faddb11793b12c7a.tar.gz'\r\n--2019-09-16 09:45:36--  https://surfer.nmr.mgh.harvard.edu//pub/dist/freesurfer/repo/annex.git//annex/objects/958/132/SHA256E-s200057528--a4da07a728f5cfac9c20e600e0c2ca0417ebd4e92f89aca1faddb11793b12c7a.tar.gz/SHA256E-s200057528--a4da07a728f5cfac9c20e600e0c2ca0417ebd4e92f89aca1faddb11793b12c7a.tar.gz\r\nResolving surfer.nmr.mgh.harvard.edu (surfer.nmr.mgh.harvard.edu)... 132.183.240.105\r\nConnecting to surfer.nmr.mgh.harvard.edu (surfer.nmr.mgh.harvard.edu)|132.183.240.105|:443... connected.\r\nHTTP request sent, awaiting response... 200 OK\r\nLength: 200057528 (191M) [application/x-gzip]\r\nSaving to: \u2018SHA256E-s200057528--a4da07a728f5cfac9c20e600e0c2ca0417ebd4e92f89aca1faddb11793b12c7a.tar.gz\u2019\r\n\r\n    SHA256E-s200057528--a4da07a728f5cfac9   4%[==>   \r\n```\r\n</details>\r\n\r\nmay be there is even more straightforward way to obtain such URLs directly from git-annex? (attn: @joeyh)  i.e. for every file to be `get`'ed to just report the urls from which it could be obtained (possibly including ssh, see below)\r\n\r\n### ssh\r\n\r\nIn some cases (probably primarily for private repos without data being shared publicly), the only remotes carrying data would be clones over ssh. So instead of `http*` urls, `ssh://` urls should be created. git-annex ATM does not natively support them, but there is a TODO: https://git-annex.branchable.com/todo/support_ssh__58____47____47___or_sftp__58____47____47___urls_via___34__built-in__34___ssh_support/  so in principle/future it should be feasible.", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/3681/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/3681/timeline", "performed_via_github_app": null}