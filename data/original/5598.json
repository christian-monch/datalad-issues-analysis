{"url": "https://api.github.com/repos/datalad/datalad/issues/5598", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/5598/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/5598/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/5598/events", "html_url": "https://github.com/datalad/datalad/issues/5598", "id": 865260258, "node_id": "MDU6SXNzdWU4NjUyNjAyNTg=", "number": 5598, "title": "Repo method cache", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2021-04-22T17:54:34Z", "updated_at": "2021-04-23T16:59:21Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "I am planning to implement a replacement for manual caching of `Repo` method result caching. The type of caching I am talking about can be seen in the `copy_file()` code, but is also prevalent elsewhere.\r\n\r\nThe \"cache\" that I am aiming for is a class that:\r\n\r\n- wraps a `Repo` instance\r\n- implements any method call (in a generic fashion)\r\n- keeps a record of any output in a dict with a key that combines (method name, and arguments)\r\n- returns the cached result on a repeated request\r\n\r\nIn essence this creates a static variant of a `Repo` (not really static, because time is only frozen from the time of the first request with a particular parameterization). It needs to be used with care, but it has its use, I think.\r\n\r\nReturned generators will need special handling, such that they can be unrolled multiple times.", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/5598/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/5598/timeline", "performed_via_github_app": null}