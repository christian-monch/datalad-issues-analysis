{"url": "https://api.github.com/repos/datalad/datalad/issues/3135", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/3135/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/3135/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/3135/events", "html_url": "https://github.com/datalad/datalad/issues/3135", "id": 405246682, "node_id": "MDU6SXNzdWU0MDUyNDY2ODI=", "number": 3135, "title": "Switch to whitelist/opt-in unique metadata value capture", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 700886055, "node_id": "MDU6TGFiZWw3MDA4ODYwNTU=", "url": "https://api.github.com/repos/datalad/datalad/labels/metadata", "name": "metadata", "color": "0052cc", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2019-01-31T13:30:56Z", "updated_at": "2019-02-07T11:19:23Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "ATM we are brute-force generating lists of unique content metadata values as part of metadata aggregation. The rational was to be able to improve content discovery without having to compile (an index of) content metadata, but simply locate \"interesting\" datasets for an deeper inspection as a second step.\r\n\r\nWhile it sometimes gives useful results (BIDS participant info is one), in general it accumulates mostly garbage, and only gives meaningful results for a limited subset of structured data, or unstructured basic data types.\r\n\r\nTherefore, I'd like to switch from a \"tell me what metadata fields to ignore\" to a whitelist or opt-in approach. Metadata extractor implementation will have to indicate the unique value harvesting is desired for an explicit subset of fields (likely via key regex). In doing so, authors of extractor can specifically use this feature where it makes sense (or even force it when doesn't make any), but not unusable rubbish pollutes the aggregated metadata. This way, any attractive use case (like BIDS participant info) can be preserved.\r\n\r\nIn detailed metadata sets (like DICOM) the unique value list can make up the majority of the metadata weight, but virtually add no value (e.g. the list of unique slice recording times across an experiment).\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/3135/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/3135/timeline", "performed_via_github_app": null}