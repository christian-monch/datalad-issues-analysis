{"url": "https://api.github.com/repos/datalad/datalad/issues/1447", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/1447/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/1447/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/1447/events", "html_url": "https://github.com/datalad/datalad/issues/1447", "id": 218700141, "node_id": "MDU6SXNzdWUyMTg3MDAxNDE=", "number": 1447, "title": "PR1409(return values): Broken pipe from GitPython", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2017-04-01T14:41:31Z", "updated_at": "2018-04-06T20:11:45Z", "closed_at": "2018-04-06T20:11:45Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "actually not sure if related to 1409 changes but happened to me while I was exploring the goodness.  When I restarted ipython -- it was gone, so suggests some stale stage... I do not think I have reinstalled this particular dataset etc.  But I wonder -- with all the singletons -- if dataset gets uninstalled, and then reinstalled -- would anyhow previous dataset/AnnexRepo/GitPython.Repo instance survive?  anyways -- deided to record the incident\r\n\r\n```ipython\r\nIn [53]: dl.drop('workshops/nipype-2017/ds000114/sub-01/anat/sub-01_T1w.nii.gz')\r\n---------------------------------------------------------------------------\r\nIOError                                   Traceback (most recent call last)\r\n<ipython-input-53-fd3da168b151> in <module>()\r\n----> 1 dl.drop('workshops/nipype-2017/ds000114/sub-01/anat/sub-01_T1w.nii.gz')\r\n\r\n/home/yoh/proj/datalad/datalad/datalad/interface/utils.pyc in eval_func(wrapped, instance, args, kwargs)\r\n   1080                     return results\r\n   1081 \r\n-> 1082             return return_func(generator_func)(*args, **kwargs)\r\n   1083 \r\n   1084     return eval_func(func)\r\n\r\n/home/yoh/proj/datalad/datalad/datalad/interface/utils.pyc in return_func(wrapped_, instance_, args_, kwargs_)\r\n   1068                 results = wrapped_(*args_, **kwargs_)\r\n   1069                 if inspect.isgenerator(results):\r\n-> 1070                     results = list(results)\r\n   1071                 # render summaries\r\n   1072                 if not common_params['result_xfm'] and result_renderer == 'tailored':\r\n\r\n/home/yoh/proj/datalad/datalad/datalad/interface/utils.pyc in generator_func(*_args, **_kwargs)\r\n    999             if not result_renderer:\r\n   1000                 result_renderer = dlcfg.get('datalad.api.result-renderer', None)\r\n-> 1001             for res in results:\r\n   1002                 ## log message\r\n   1003                 # use provided logger is possible, or ours if necessary\r\n\r\n/home/yoh/proj/datalad/datalad/datalad/distribution/drop.pyc in __call__(path, dataset, recursive, recursion_limit, check, if_dirty)\r\n    144         # this should yield what it did\r\n    145         handle_dirty_datasets(\r\n--> 146             content_by_ds.keys(), mode=if_dirty, base=dataset)\r\n    147 \r\n    148         # iterate over all datasets, order doesn't matter\r\n\r\n/home/yoh/proj/datalad/datalad/datalad/interface/utils.pyc in handle_dirty_datasets(dpaths, mode, base, msg)\r\n    141             {d: [d] for d in dpaths},\r\n    142             base=base,\r\n--> 143             message=msg))\r\n    144     elif mode == 'ignore':\r\n    145         return\r\n\r\n/home/yoh/proj/datalad/datalad/datalad/interface/utils.pyc in save_dataset_hierarchy(info, base, message, version_tag)\r\n    311             info[dpath],\r\n    312             message=message,\r\n--> 313             version_tag=version_tag)\r\n    314         if saved_state:\r\n    315             res['status'] = 'ok'\r\n\r\n/home/yoh/proj/datalad/datalad/datalad/interface/utils.pyc in save_dataset(ds, paths, message, version_tag)\r\n    352     # possible to decide when/what to save further down\r\n    353     # and one level up\r\n--> 354     orig_hexsha = ds.repo.get_hexsha()\r\n    355 \r\n    356     # always yields list; empty if None\r\n\r\n/home/yoh/proj/datalad/datalad/datalad/support/gitrepo.pyc in get_hexsha(self, branch)\r\n    946                 #self.repo.active_branch.object.hexsha\r\n    947                 # but HEAD to be able to cope with detached heads\r\n--> 948                 return self.repo.head.object.hexsha\r\n    949             except ValueError as exc:\r\n    950                 if 'does not exist' in str(exc):\r\n\r\n/usr/lib/python2.7/dist-packages/git/refs/symbolic.pyc in _get_object(self)\r\n    167         # have to be dynamic here as we may be a tag which can point to anything\r\n    168         # Our path will be resolved to the hexsha which will be used accordingly\r\n--> 169         return Object.new_from_sha(self.repo, hex_to_bin(self.dereference_recursive(self.repo, self.path)))\r\n    170 \r\n    171     def _get_commit(self):\r\n\r\n/usr/lib/python2.7/dist-packages/git/objects/base.pyc in new_from_sha(cls, repo, sha1)\r\n     62             return get_object_type_by_name(b'commit')(repo, sha1)\r\n     63         # END handle special case\r\n---> 64         oinfo = repo.odb.info(sha1)\r\n     65         inst = get_object_type_by_name(oinfo.type)(repo, oinfo.binsha)\r\n     66         inst.size = oinfo.size\r\n\r\n/usr/lib/python2.7/dist-packages/git/db.pyc in info(self, sha)\r\n     35 \r\n     36     def info(self, sha):\r\n---> 37         hexsha, typename, size = self._git.get_object_header(bin_to_hex(sha))\r\n     38         return OInfo(hex_to_bin(hexsha), typename, size)\r\n     39 \r\n\r\n/usr/lib/python2.7/dist-packages/git/cmd.pyc in get_object_header(self, ref)\r\n    934         :return: (hexsha, type_string, size_as_int)\"\"\"\r\n    935         cmd = self._get_persistent_cmd(\"cat_file_header\", \"cat_file\", batch_check=True)\r\n--> 936         return self.__get_object_header(cmd, ref)\r\n    937 \r\n    938     def get_object_data(self, ref):\r\n\r\n/usr/lib/python2.7/dist-packages/git/cmd.pyc in __get_object_header(self, cmd, ref)\r\n    922     def __get_object_header(self, cmd, ref):\r\n    923         cmd.stdin.write(self._prepare_ref(ref))\r\n--> 924         cmd.stdin.flush()\r\n    925         return self._parse_object_header(cmd.stdout.readline())\r\n    926 \r\n\r\nIOError: [Errno 32] Broken pipe\r\n```\r\n\r\nthis was very repeatable, until I restarted ipython session -- and it dropped just fine then :-/  ", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/1447/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/1447/timeline", "performed_via_github_app": null}