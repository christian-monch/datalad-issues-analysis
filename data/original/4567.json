{"url": "https://api.github.com/repos/datalad/datalad/issues/4567", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/4567/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/4567/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/4567/events", "html_url": "https://github.com/datalad/datalad/issues/4567", "id": 623289456, "node_id": "MDU6SXNzdWU2MjMyODk0NTY=", "number": 4567, "title": "registry of URL protocol handlers for download-url/datalad special remote", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778592, "node_id": "MDU6TGFiZWw2Mzc3ODU5Mg==", "url": "https://api.github.com/repos/datalad/datalad/labels/enhancement", "name": "enhancement", "color": "0052cc", "default": true, "description": ""}, {"id": 655634847, "node_id": "MDU6TGFiZWw2NTU2MzQ4NDc=", "url": "https://api.github.com/repos/datalad/datalad/labels/good-for-hackathon", "name": "good-for-hackathon", "color": "fbca04", "default": false, "description": ""}, {"id": 700886055, "node_id": "MDU6TGFiZWw3MDA4ODYwNTU=", "url": "https://api.github.com/repos/datalad/datalad/labels/metadata", "name": "metadata", "color": "0052cc", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-05-22T15:27:53Z", "updated_at": "2021-03-12T10:45:36Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "NB In the worst traditions of myself: I feel that we already had such an issue but I failed to find it.\r\n\r\nATM we already support custom `s3://` URLs (note that custom `ria+...` urls are supported outside of the datalad downloader purview since are not directly concerned with the download of the content).  I think it would be valuable to provide extendable mechanism for supporting additional \"protocols\" (or schemes) of URLs:\r\n\r\n## `shub://`\r\n\r\n`shub://` urls for the singularity hub (desire was already formulated: https://github.com/datalad/datalad-container/issues/96), so we might want a solution such that datalad extensions extend the list of supported urls, although in this particular case I would not even mind having support for this URL straight in core.\r\n\r\n## `github://`\r\n\r\nThe need came up in a dialog with @satra : ATM annex metadata extractor uses information from `whereis` to provide a list of urls (for web + enabled special remotes).  Some files might reside directly in git, and thus we would be lacking any URLs for them, making extracted metadata albeit sufficient to access them (if we export information about remotes) but not readily available.  In the case where a git remote is a github URL, we can provide download access to the file via github's API. Since API versions and web URL schemas do get eventually deprecated etc, IMHO we should not just spit out ready to use URLs assuming current github API/web UI schema, but rather provide our own URL schema and establish communication to github using its current API. Schema could be `github://<org>/<user>/blob/<gitsha>` e.g. `github://datalad/datalad/blob/755efb86b946e7ea72997c130cfd004369fdd712` to point to current version of the CHANGELOG.md we have.  Implementation is quite straightforward and could fit one lengthy shell line ;-):\r\n\r\n```shell\r\ncurl -s https://api.github.com/repos/datalad/datalad/git/blobs/`cat CHANGELOG.md |git hash-object -w --stdin` | python3 -c \"import json, sys; from base64 import b64decode; j = json.loads(sys.stdin.read()); assert j.get('encoding') == 'base64'; sys.stdout.buffer.write(b64decode(j['content']));\"\r\n```\r\n\r\nAdditional ones we might eventually want to support could be `ipfs://`, `gitlab://`.\r\n\r\nWhat do you think?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/4567/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/4567/timeline", "performed_via_github_app": null}