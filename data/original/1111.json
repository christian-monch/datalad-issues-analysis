{"url": "https://api.github.com/repos/datalad/datalad/issues/1111", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/1111/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/1111/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/1111/events", "html_url": "https://github.com/datalad/datalad/issues/1111", "id": 188729280, "node_id": "MDU6SXNzdWUxODg3MjkyODA=", "number": 1111, "title": "GitPython is a whiny little ...", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 385404347, "node_id": "MDU6TGFiZWwzODU0MDQzNDc=", "url": "https://api.github.com/repos/datalad/datalad/labels/for%20our%20information", "name": "for our information", "color": "fbca04", "default": false, "description": "Announcement-type issues (possibly inconsequential)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2016-11-11T10:24:36Z", "updated_at": "2017-03-10T13:50:04Z", "closed_at": "2017-03-09T16:27:56Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "````\r\n$ git submodule\r\n 9bde30de94b4d787f44ed8be6708320709a0032d src/aligned (heads/master)\r\n 793e0836fc8487e6ecc7eeb274e68ed33f1dbde9 src/raw (heads/master)\r\n 873455903387d735706e9389df49c4bb9fb8f9ac src/templatesntransforms (heads/master)\r\n$ datalad ls -r\r\n.   [annex]  master  - 2016-11-11/11:14:27  OK\r\n````\r\n\r\nwhere are the subdatasets?\r\n\r\n````\r\nIn [1]: from datalad.api import Dataset\r\nd\r\nIn [2]: ds = Dataset('.')\r\n\r\nIn [3]: ds.repo.get_submodules()\r\n---------------------------------------------------------------------------\r\nInvalidGitRepositoryError                 Traceback (most recent call last)\r\n<ipython-input-3-f565efb54e92> in <module>()\r\n----> 1 ds.repo.get_submodules()\r\n\r\n/home/mih/datalad/datalad/support/gitrepo.py in get_submodules(self, sorted_)\r\n   1490         if not self.repo.head.is_valid():\r\n   1491             return []\r\n-> 1492         submodules = self.repo.submodules\r\n   1493         if sorted_:\r\n   1494             submodules = sorted(submodules, key=lambda x: x.path)\r\n\r\n/usr/lib/python2.7/dist-packages/git/repo/base.pyc in submodules(self)\r\n    274         :return: git.IterableList(Submodule, ...) of direct submodules\r\n    275             available from the current head\"\"\"\r\n--> 276         return Submodule.list_items(self)\r\n    277 \r\n    278     def submodule(self, name):\r\n\r\n/usr/lib/python2.7/dist-packages/git/util.pyc in list_items(cls, repo, *args, **kwargs)\r\n    925         :return:list(Item,...) list of item instances\"\"\"\r\n    926         out_list = IterableList(cls._id_attribute_)\r\n--> 927         out_list.extend(cls.iter_items(repo, *args, **kwargs))\r\n    928         return out_list\r\n    929 \r\n\r\n/usr/lib/python2.7/dist-packages/git/objects/submodule/base.pyc in iter_items(cls, repo, parent_commit)\r\n   1184                 except KeyError:\r\n   1185                     raise InvalidGitRepositoryError(\r\n-> 1186                         \"Gitmodule path %r did not exist in revision of parent commit %s\" % (p, parent_commit))\r\n   1187                 # END handle keyerror\r\n   1188             # END handle critical error\r\n\r\nInvalidGitRepositoryError: Gitmodule path u'aligned' did not exist in revision of parent commit HEAD\r\n````\r\n\r\nand indeed there is one listed that got removed before (cannot recall how exactly, but likely this is a result of our own `save`)\r\n\r\n````\r\n$ cat .gitmodules \r\n...\r\n[submodule \"aligned\"]\r\n\tpath = aligned\r\n\turl = ./src/aligned\r\n...\r\n````\r\n\r\nBottom line: I have a growing dislike for how devoted GitPython is to showing users for what reasons it cannot possibly perform -- while Git is perfectly able to. What is wrong with being robust?", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/1111/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/1111/timeline", "performed_via_github_app": null}