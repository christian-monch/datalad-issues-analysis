{"url": "https://api.github.com/repos/datalad/datalad/issues/2882", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/2882/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/2882/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/2882/events", "html_url": "https://github.com/datalad/datalad/pull/2882", "id": 364921544, "node_id": "MDExOlB1bGxSZXF1ZXN0MjE4OTkzMTQ5", "number": 2882, "title": "[WIP] New query tools in *Repo", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 2, "created_at": "2018-09-28T14:47:42Z", "updated_at": "2021-09-24T10:21:36Z", "closed_at": "2018-10-02T14:05:39Z", "author_association": "MEMBER", "active_lock_reason": null, "pull_request": {"url": "https://api.github.com/repos/datalad/datalad/pulls/2882", "html_url": "https://github.com/datalad/datalad/pull/2882", "diff_url": "https://github.com/datalad/datalad/pull/2882.diff", "patch_url": "https://github.com/datalad/datalad/pull/2882.patch"}, "body": "Not worth looking at ATM. But eventually will offer a more convenient way to get info on repository content, without having to invent queries and data structures for each scenario.\r\n\r\n### Problem being addressed\r\n\r\nATM we have low-level helpers that can query individual aspects of dataset content properties (`is_under_annex`, `file_has_content`, ...). Moroever, we never had a general purpose `status()` for Git repositories. Both aspects combined lead to a particular way of processing: We limits the paths that need attention in a particular case to the smallest possible subset through a series of queries, and then act upon them (path annotation approach etc...). Queries tend to be expensive (frequently lead to a dedicated git/annex call per aspect or sometimes even per path). This has the potential to be slow.\r\n\r\n### Core idea\r\n\r\nImplement a minimum number of helpers that can extract a maximum number of information from git/annex with the least number of git calls. The theme being to get as much in one go as possible that has no significant penalties in terms of file system access. It should become possible to get a tailored view on the state of a *single* repository without having to invent approaches and data structures for each use case. In this concept, one would err on the side of getting too much information, rather then too little. This would them allow for RFs of commands where tracking state information across various levels is crucial (i.e. `save`) and the present implementation do a good job of confusing users and authors ;-)\r\n\r\nIn terms of v6 compatibility, emphasis is put on only using Git/annex API calls that work in all scenarios and perform test of filesystem representation only for a few select aspects that generalize well.\r\n\r\n### Major changes\r\n- [x] `GitRepo.get_content_info()` as a frontend for `ls-files/tree` to get type, shasum and path of anything known to git, or detectable by its change-detection mechanism (incl. untracked content)\r\n- [x] `AnnexRepo.get_content_annexinfo()` as a frontend for `find/findref` to get basic annex properties for anything known to annex\r\n- [x] `GitRepo.status()` to report the difference between `HEAD` and the worktree. Possible states can be: 'added', 'untracked', 'clean', 'deleted', 'modified'\r\n- [x] `AnnexRepo.annexstatus()` to amend `GitRepo.status()` with info on local content availability of annex'ed files.\r\n- [x] RF'ed `subdatasets` to remove custom Git call and replace with `GitRepo.get_content_info()`\r\n- [x] RF'ed `diff` to remove custom Git call to detect untracked files and replace with `GitRepo.status()`\r\n\r\n### Open issues\r\n\r\n- [ ] make annex content availability accessible without a call to `status()` for enhanced speed\r\n- [ ] `ls` computes file sizes with dedicated code, but those could be taken from Repo.annexstatus()\r\n- [ ] NFS server tests fail, because it seems files aren't dropped as fast as they should be, e.g. https://travis-ci.org/datalad/datalad/jobs/435532533\r\n```\r\n======================================================================\r\nFAIL: datalad.support.tests.test_fileinfo.test_get_content_info\r\n----------------------------------------------------------------------\r\nTraceback (most recent call last):\r\n  File \"/home/travis/virtualenv/python3.5.6/lib/python3.5/site-packages/nose/case.py\", line 198, in runTest\r\n    self.test(*self.arg)\r\n  File \"/home/travis/virtualenv/python3.5.6/lib/python3.5/site-packages/datalad/tests/utils.py\", line 591, in newfunc\r\n    return t(*(arg + (filename,)), **kw)\r\n  File \"/home/travis/virtualenv/python3.5.6/lib/python3.5/site-packages/datalad/support/tests/test_fileinfo.py\", line 226, in test_get_content_info\r\n    assert_equal(annexstatus[p]['has_content'], 'dropped' not in s)\r\nAssertionError: True != False\r\n\r\nTraceback (most recent call last):\r\n  File \"/opt/python/3.5.6/lib/python3.5/multiprocessing/util.py\", line 262, in _run_finalizers\r\n    finalizer()\r\n  File \"/opt/python/3.5.6/lib/python3.5/multiprocessing/util.py\", line 186, in __call__\r\n    res = self._callback(*self._args, **self._kwargs)\r\n  File \"/home/travis/virtualenv/python3.5.6/lib/python3.5/shutil.py\", line 480, in rmtree\r\n    _rmtree_safe_fd(fd, path, onerror)\r\n  File \"/home/travis/virtualenv/python3.5.6/lib/python3.5/shutil.py\", line 438, in _rmtree_safe_fd\r\n    onerror(os.unlink, fullname, sys.exc_info())\r\n  File \"/home/travis/virtualenv/python3.5.6/lib/python3.5/shutil.py\", line 436, in _rmtree_safe_fd\r\n    os.unlink(name, dir_fd=topfd)\r\nOSError: [Errno 16] Device or resource busy: '.nfs00000000000411f700000001'\r\n```\r\n\r\n### Notes\r\n\r\n- status functions are not called `get_*status()` yet, because there is `AnnexRepo.get_status()` that does one aspect of the proposed functionality in a different way. It should likely be removed, but at present `GitRepo.status()` does not (and does not want to) detect subdataset modification, as it requires dataset traversal and is better done in top-level code IMHO.", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/2882/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/2882/timeline", "performed_via_github_app": null}