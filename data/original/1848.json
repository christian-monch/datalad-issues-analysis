{"url": "https://api.github.com/repos/datalad/datalad/issues/1848", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/1848/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/1848/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/1848/events", "html_url": "https://github.com/datalad/datalad/issues/1848", "id": 259066917, "node_id": "MDU6SXNzdWUyNTkwNjY5MTc=", "number": 1848, "title": "(the use of) ConfigManager needs attention", "user": {"login": "bpoldrack", "id": 10498301, "node_id": "MDQ6VXNlcjEwNDk4MzAx", "avatar_url": "https://avatars.githubusercontent.com/u/10498301?v=4", "gravatar_id": "", "url": "https://api.github.com/users/bpoldrack", "html_url": "https://github.com/bpoldrack", "followers_url": "https://api.github.com/users/bpoldrack/followers", "following_url": "https://api.github.com/users/bpoldrack/following{/other_user}", "gists_url": "https://api.github.com/users/bpoldrack/gists{/gist_id}", "starred_url": "https://api.github.com/users/bpoldrack/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/bpoldrack/subscriptions", "organizations_url": "https://api.github.com/users/bpoldrack/orgs", "repos_url": "https://api.github.com/users/bpoldrack/repos", "events_url": "https://api.github.com/users/bpoldrack/events{/privacy}", "received_events_url": "https://api.github.com/users/bpoldrack/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 385404347, "node_id": "MDU6TGFiZWwzODU0MDQzNDc=", "url": "https://api.github.com/repos/datalad/datalad/labels/for%20our%20information", "name": "for our information", "color": "fbca04", "default": false, "description": "Announcement-type issues (possibly inconsequential)"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 4, "created_at": "2017-09-20T07:33:00Z", "updated_at": "2019-10-05T08:50:12Z", "closed_at": "2019-10-05T08:50:12Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "This is somewhat related to #1842\r\n\r\nFor configuration we have `common_cfg.py` for definitions and `ConfigManager` actual access and interaction. The definitions may include default values, domain constraints and definitions on how to interactively ask for values.\r\nThe only method using `common_cfg` seems to be `ConfigManager.obtain()`. But throughout the code we often use `get()` or similar methods, which don't enforce the constraints (including the conversion to python dtypes) and don't respect the defaults.\r\n\r\nThe issue I'm running into ATM is, that if I use `obtain()` it interactively asks for everything that isn't explicitly defined, even if there is a default value in `common_cfg`. This is especially annoying for config items to be used for testing. Since their desired values are constantly changing it's not exactly convenient to have a stored configuration that needs to be changed for each test run or to always have to define all of them via an env variable.\r\n\r\nSo, the first thing we need is a way to just use the default values from `common_cfg` without interaction for everything that isn't explicitly specified, but nevertheless have the constraints and conversion applied, I think. But I'm not sure how to approach this ATM. It might be desirable only for certain configuration items (like `datalad.tests.whatever`) and therefore an additional switch for `obtain()` might do it. What are your thoughts on this, @mih and @yarikoptic ?\r\n\r\nApart from that, the second thing is to make use of the mechanic provided by `obtain()` more often and systematically, so we can benefit from it's ability to interact and to actually store into a user- or dataset-specific configuration. For a 1.0.0 release this should be well applied throughout the code base, I think.\r\n", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/1848/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/1848/timeline", "performed_via_github_app": null}