{"url": "https://api.github.com/repos/datalad/datalad/issues/5103", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/5103/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/5103/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/5103/events", "html_url": "https://github.com/datalad/datalad/issues/5103", "id": 731489054, "node_id": "MDU6SXNzdWU3MzE0ODkwNTQ=", "number": 5103, "title": "Nesting ProducerConsumers", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 379953235, "node_id": "MDU6TGFiZWwzNzk5NTMyMzU=", "url": "https://api.github.com/repos/datalad/datalad/labels/do-in-parallel", "name": "do-in-parallel", "color": "ffda63", "default": false, "description": ""}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 0, "created_at": "2020-10-28T14:21:35Z", "updated_at": "2020-10-28T14:23:10Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "body": "Possible use cases:\r\n- parallelize subdatasets (which would be used as a producer) - while also parallelizing operation on them (not sure if worth it really, but could be a use case)\r\n- #5102 - parallelize independently operation across multiple paths, while each path handling would also be parallelized\r\n\r\npossible implementation 0 (safe one): disable any nested parallelization.  Define some \"watch\" class level variable, so any nested ProducerConsumer would just fall to `jobs=0` (pure serial) in the nested one.\r\n\r\npossible implementation 1: RF to have `ProducerConsumer` to become/use some central/shared \"engine\", which would be 'multiplexing' all the tasks and feed individual `ProducerConsumer` with results only relevant to it.  But it might become too quickly too tricky to not cause a deadlock.\r\n\r\n", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/5103/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/5103/timeline", "performed_via_github_app": null}