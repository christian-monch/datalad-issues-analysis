{"url": "https://api.github.com/repos/datalad/datalad/issues/1582", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/1582/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/1582/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/1582/events", "html_url": "https://github.com/datalad/datalad/issues/1582", "id": 236150474, "node_id": "MDU6SXNzdWUyMzYxNTA0NzQ=", "number": 1582, "title": "Desired setup for preferred content management", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 63778594, "node_id": "MDU6TGFiZWw2Mzc3ODU5NA==", "url": "https://api.github.com/repos/datalad/datalad/labels/question", "name": "question", "color": "fbca04", "default": true, "description": "Issue asks a question rather than reporting a problem"}, {"id": 526935563, "node_id": "MDU6TGFiZWw1MjY5MzU1NjM=", "url": "https://api.github.com/repos/datalad/datalad/labels/feedback-desired", "name": "feedback-desired", "color": "fbca04", "default": false, "description": ""}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 8, "created_at": "2017-06-15T10:50:47Z", "updated_at": "2018-11-24T09:59:07Z", "closed_at": "2018-11-24T09:59:06Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "### NOTE: top-level comment is summary of discussion below\r\n\r\nAt the moment we have minimal support for preferred content management via git annex. There is expressed demand to expose more of that via the API of common commands (e.g. #1347 or #925). With PR #1579 the `siblings` command can query and set the respective properties for local repos and remotes.\r\n\r\nNow the question is what is our concept of making use of this?\r\n\r\n- What commands need to expose this?\r\n  - `install`\r\n  - `get`\r\n  - `update`\r\n  - `publish`\r\n- When do we act upon it? For example, should an `install` figure out whether the just obtain repo has a `required` preferred content setting and start downloading matching data? If not, when would we make an attempt at fulfilling the promise?\r\n\r\nfrom #1347:\r\n\r\n>  Moreover, if those are specified, but even without -g (explicit get data option) we could then run get --auto to respect provided wanted settings and thus fetch files as needed/specified. I guess then datalad get also could, whenever no custom PATHs specified, and wanted setting is set, call annex get --auto to fetch all the data this particular clone \"desires\" (currently would fail and demand a path)\r\n\r\n### Identified TODOs\r\n\r\n- [ ] `drop` needs a `--force` option to override `required` setting. Likely needs better name to be distinguishable from `--no-checks` that disables redundancy tests\r\n\r\n### Tentative TODOs\r\n\r\n- `install` and `get`, possibly others get a `--content` option (replacing the `get_data` flag). Values would be 'all', 'none', 'wanted', 'required'. Default for `install` could be 'required', for `get` 'wanted'.\r\n- `install` needs to invoke `get` with either `-g` or a `required` preferred content setting\r\n- default setting of `get` should change from \"yes, get data\" to \"get wanted\"", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/1582/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/1582/timeline", "performed_via_github_app": null}