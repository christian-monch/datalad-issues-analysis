{"url": "https://api.github.com/repos/datalad/datalad/issues/4954", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/4954/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/4954/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/4954/events", "html_url": "https://github.com/datalad/datalad/issues/4954", "id": 707692147, "node_id": "MDU6SXNzdWU3MDc2OTIxNDc=", "number": 4954, "title": "FOI: some timings for \"external remote\" interaction + idea for OPT of CHECKPRESENT", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 289240596, "node_id": "MDU6TGFiZWwyODkyNDA1OTY=", "url": "https://api.github.com/repos/datalad/datalad/labels/performance", "name": "performance", "color": "f4b2d8", "default": false, "description": "Improve performance of an existing feature"}], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 1, "created_at": "2020-09-23T21:30:17Z", "updated_at": "2021-03-10T21:36:28Z", "closed_at": "2021-03-10T21:36:28Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "So I was mumbling during last meeting that may be that it is the interaction between annex and external remotes (via stdin/out) is what is slowing down some use cases (no high CPU or IO load neither on datalad nor git-annex process), and that may be git-annex/external remote are spending some time waiting on input etc.\r\n\r\nSo I\r\n\r\n- cloned http://github.com/datalad-datasets/hcp_MNI_T1w which has some notable number of annexed files in the tree (~4k) available via s3\r\n- used `DATALAD_TESTS_PROTOCOLREMOTE=1` feature which produced a bash script for replay of the interactions of our special remote with annex (stored under .git/bin/git-annex-remote-datalad)\r\n- lobotomized it to just always immediately respond with `CHECKPRESENT-SUCCESS`\r\n\r\n<details>\r\n<summary>the script</summary> \r\n\r\n```shell\r\n#!/bin/bash\r\n\r\nset -e\r\n\r\n# Gets a VALUE response and stores it in $RET\r\nreport () {\r\n    # echo \"$@\" >&2\r\n    :\r\n}\r\n\r\nrecv () {\r\n    read resp\r\n    #resp=${resp%\\n}\r\n    target=\"$@\"\r\n    if [ \"$resp\" != \"$target\" ]; then\r\n        report \"! exp $target\"\r\n        report \"  got $resp\"\r\n    else\r\n        report \"+ got $resp\"\r\n    fi\r\n}\r\n\r\nsend () {\r\n    echo \"$@\"\r\n    # report \"sent $@\"\r\n}\r\n\r\nsend VERSION 1\r\nrecv EXTENSIONS INFO ASYNC\r\nsend UNSUPPORTED-REQUEST\r\nrecv PREPARE\r\nsend PREPARE-SUCCESS\r\nsend DEBUG Encodings: filesystem utf-8, default utf-8\r\n\r\n# from now on should be checkpresent sequence\r\n# recv CHECKPRESENT MD5E-s70189716--45f4514f972325f481d5c09434c1c94a.nii.gz\r\nwhile read CMD KEY; do\r\n    if [ $CMD != CHECKPRESENT ]; then\r\n        echo \"Was expecting CHECKPRESENT, got $CMD\"\r\n        exit 1\r\n    fi\r\n    #send GETURLS MD5E-s70189716--45f4514f972325f481d5c09434c1c94a.nii.gz http:\r\n    #recv VALUE \r\n    #send GETURLS MD5E-s70189716--45f4514f972325f481d5c09434c1c94a.nii.gz https:\r\n    #recv VALUE \r\n    #send GETURLS MD5E-s70189716--45f4514f972325f481d5c09434c1c94a.nii.gz s3:\r\n    #recv VALUE s3://hcp-openaccess/HCP_1200/100206/MNINonLinear/T1w_restore.nii.gz?versionId=ToEB4xfw09Ytt.bd8giG8ThSmxzUKM8f\r\n    #recv VALUE \r\n    send CHECKPRESENT-SUCCESS $KEY\r\ndone\r\n\r\n```\r\n</details>\r\n\r\n- lobotomized datalad external remote as well\r\n\r\n<details>\r\n<summary>patch to do the same</summary> \r\n\r\n```shell\r\n(git)lena:~datalad/datalad-maint[temp-time-annex-remote]git-annex\r\n$> git diff\r\ndiff --git a/datalad/customremotes/datalad.py b/datalad/customremotes/datalad.py\r\nindex dc39e5a23..04364c058 100644\r\n--- a/datalad/customremotes/datalad.py\r\n+++ b/datalad/customremotes/datalad.py\r\n@@ -91,6 +91,8 @@ class DataladAnnexCustomRemote(AnnexCustomRemote):\r\n             Indicates that it is not currently possible to verify if the key is\r\n             present in the remote. (Perhaps the remote cannot be contacted.)\r\n         \"\"\"\r\n+        self.send(\"CHECKPRESENT-SUCCESS\", key)\r\n+        return\r\n         lgr.debug(\"VERIFYING key %s\" % key)\r\n         resp = None\r\n         for url in self.get_URLS(key):\r\n```\r\n</details>\r\n\r\nTiming using bash script:\r\n\r\n```shell\r\n$> time PATH=~datalad/trash/speedyannex:$PATH git annex fsck --from datalad --fast >/dev/null\r\nPATH=~datalad/trash/speedyannex:$PATH git annex fsck --from datalad --fast >   3.93s user 0.59s system 180% cpu 2.509 total\r\n```\r\n\r\n```shell\r\n$> time git annex fsck --from datalad --fast >/dev/null\r\ngit annex fsck --from datalad --fast > /dev/null  4.26s user 0.61s system 166% cpu 2.920 total\r\n```\r\n\r\n- given that startup of datalad special remote does take a few hundred ms, I think they are very comparable! so no \"Python is slower than bash\" blame could be issued\r\n- so it is about 4k files, thus 4k send and 4k received messages between annex and external remote. I guess it could be better but I think it is quite Ok.  \r\n\r\nas commented out code in the protocol bash script suggests:\r\n```\r\n    #send GETURLS MD5E-s70189716--45f4514f972325f481d5c09434c1c94a.nii.gz http:\r\n    #recv VALUE \r\n    #send GETURLS MD5E-s70189716--45f4514f972325f481d5c09434c1c94a.nii.gz https:\r\n    #recv VALUE \r\n    #send GETURLS MD5E-s70189716--45f4514f972325f481d5c09434c1c94a.nii.gz s3:\r\n    #recv VALUE s3://hcp-openaccess/HCP_1200/100206/MNINonLinear/T1w_restore.nii.gz?versionId=ToEB4xfw09Ytt.bd8giG8ThSmxzUKM8f\r\n    #recv VALUE \r\n```\r\nfor every check we are issuing a sequence of GETURLS requests, until we hit supported protocol... In case of s3, well we are spending 4 messages in vein each time, and looking at get_URLS -- we always create a full list for all protocols first before we return - sounds like a place for optimization:  \r\n- make get_URLS into a generator or may be even an async generator so we could query annex and meanwhile possibly do the actual check on previously received URL (although not sure if worth it really)\r\n- reorder protocols based on the recent history of successful hits\r\n\r\nThat should speed up any operation which uses CHECKPRESENT (`fsck`, `drop`, ... may be others).", "closed_by": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/4954/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/4954/timeline", "performed_via_github_app": null}