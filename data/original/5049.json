{"url": "https://api.github.com/repos/datalad/datalad/issues/5049", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/5049/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/5049/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/5049/events", "html_url": "https://github.com/datalad/datalad/pull/5049", "id": 723609676, "node_id": "MDExOlB1bGxSZXF1ZXN0NTA1MTY2MzUy", "number": 5049, "title": "save: Fix handling of explicit paths for nested new subdatasets", "user": {"login": "kyleam", "id": 1297788, "node_id": "MDQ6VXNlcjEyOTc3ODg=", "avatar_url": "https://avatars.githubusercontent.com/u/1297788?v=4", "gravatar_id": "", "url": "https://api.github.com/users/kyleam", "html_url": "https://github.com/kyleam", "followers_url": "https://api.github.com/users/kyleam/followers", "following_url": "https://api.github.com/users/kyleam/following{/other_user}", "gists_url": "https://api.github.com/users/kyleam/gists{/gist_id}", "starred_url": "https://api.github.com/users/kyleam/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/kyleam/subscriptions", "organizations_url": "https://api.github.com/users/kyleam/orgs", "repos_url": "https://api.github.com/users/kyleam/repos", "events_url": "https://api.github.com/users/kyleam/events{/privacy}", "received_events_url": "https://api.github.com/users/kyleam/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": {"url": "https://api.github.com/repos/datalad/datalad/milestones/80", "html_url": "https://github.com/datalad/datalad/milestone/80", "labels_url": "https://api.github.com/repos/datalad/datalad/milestones/80/labels", "id": 6095126, "node_id": "MDk6TWlsZXN0b25lNjA5NTEyNg==", "number": 80, "title": "0.13.5", "description": "It is already released but PRs merged were not annotated, makes harder to figure out what was merged into what without looking at CHANGELOG or gitk or git describe", "creator": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "open_issues": 0, "closed_issues": 45, "state": "closed", "created_at": "2020-11-11T15:33:51Z", "updated_at": "2021-01-03T22:29:23Z", "due_on": null, "closed_at": "2021-01-03T22:29:23Z"}, "comments": 9, "created_at": "2020-10-17T01:17:19Z", "updated_at": "2020-12-12T14:23:11Z", "closed_at": "2020-10-19T06:33:02Z", "author_association": "MEMBER", "active_lock_reason": null, "pull_request": {"url": "https://api.github.com/repos/datalad/datalad/pulls/5049", "html_url": "https://github.com/datalad/datalad/pull/5049", "diff_url": "https://github.com/datalad/datalad/pull/5049.diff", "patch_url": "https://github.com/datalad/datalad/pull/5049.patch"}, "body": "After collecting the status information, save() adds a status record\r\nfor any subdatasets between the reference dataset and the target\r\ndataset.  Here's an example that shows when these extra records are\r\nneeded:\r\n\r\n    $ datalad create\r\n    $ datalad create -d. a\r\n    $ datalad create -d. a/b\r\n\r\nDuring the last step, create() calls save() with \"a/b\" as the path.\r\nAfter save() collects the status() information in paths_by_ds, the\r\nvalue looks like this:\r\n\r\n    {'{top}/a': {PosixPath('{top}/a/b'): {'state': 'untracked',\r\n                                          'type': 'directory'}}}\r\n\r\nBefore calling GitRepo.save_(), save() adds another record for \"a\":\r\n\r\n    {'{top}': {PosixPath('{top}/a'): {'state': 'untracked',\r\n                                      'type': 'dataset'}},\r\n     '{top}/a': {PosixPath('{top}/a/b'): {'state': 'untracked',\r\n                                          'type': 'directory'}}}\r\n\r\nIf it didn't tack on the first entry, \"a\" would be left modified in\r\nthe top-level dataset.\r\n\r\nThis handling, however, interferes with explicitly adding new nested\r\nsubdatasets, as in the example from gh-5021:\r\n\r\n    $ datalad create\r\n    $ datalad create a\r\n    $ datalad create a/b\r\n    $ datalad save -d. a a/b\r\n\r\nFor the last step, the status information is originally\r\n\r\n    {'{top}': {PosixPath('{top}/a'): {'state': 'untracked',\r\n                                      'type': 'directory'}},\r\n     '{top}/a': {PosixPath('{top}/a/b'): {'state': 'untracked',\r\n                                          'type': 'directory'}}}\r\n\r\nThe handling described above results in save() effectively switching\r\nthe type of \"a\" to \"dataset\":\r\n\r\n    {'{top}': {PosixPath('{top}/a'): {'state': 'untracked',\r\n                                      'type': 'dataset'}},\r\n     '{top}/a': {PosixPath('{top}/a/b'): {'state': 'untracked',\r\n                                          'type': 'directory'}}}\r\n\r\nWhen GitRepo.save_() receives status information, it doesn't properly\r\nregister the submodule: it feeds the dataset to `git add` rather than\r\nto `git submodule add` because, as far as it can tell, \"a\" is an\r\nexisting submodule.\r\n\r\nTo avoid this issue, stop save() from overriding the status\r\ninformation for records that have a type of \"directory\" and status of\r\n\"untracked\", letting GitRepo.save_() treat these paths in the same way\r\nas other unregistered submodules.\r\n\r\nNote that this fix is only relevant when the intermediate subdatasets\r\nare explicitly passed.  For example, dropping \"a\" from the last\r\ncommand above (i.e. `datalad save -d. a/b`) would still result in the\r\nstate reported in gh-5021.  One way to address that would be to update\r\nGitRepo.save_() to send \"type=dataset state=untracked\" records down\r\nthe same code path as \"type=directory state=untracked\", but hold off\r\non that because in some cases it would cost additional (and\r\nunnecessary) get_content_info() calls.\r\n\r\nFixes #5021.\r\n", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/5049/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/5049/timeline", "performed_via_github_app": null}