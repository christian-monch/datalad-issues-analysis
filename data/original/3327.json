{"url": "https://api.github.com/repos/datalad/datalad/issues/3327", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/3327/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/3327/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/3327/events", "html_url": "https://github.com/datalad/datalad/issues/3327", "id": 432818879, "node_id": "MDU6SXNzdWU0MzI4MTg4Nzk=", "number": 3327, "title": "tarball-base inode-minimizing special remote", "user": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "labels": [], "state": "closed", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 10, "created_at": "2019-04-13T07:31:41Z", "updated_at": "2019-04-17T15:39:17Z", "closed_at": "2019-04-17T15:39:17Z", "author_association": "MEMBER", "active_lock_reason": null, "body": "Use case: HPC-related storage system with inode quotas and the need to stage data on it for HPC/HTC computation (which would talk to the staged data via `git-annex get` requests). For datasets with many small files this quickly becomes prohibitive, even when not using a full repo with an annex, but just a type-directory special remote annex object tree.\r\nIn a concrete case, any file <200MB reduces the useable storage quota disproportionately.\r\n\r\nLimitations: HPC system often run a really old/stable software stack. In my case Git is version 1.8, for example. So the approach should ideally not use any advanced/non-standard technology. The recommendation by the operators is to prepare a SquashFS image for each computation and stage that. However, SquashFS images are read-only filesystems, so this would imply a one time export, and expensive operations after updating a single file. Dataset size typically varies from several GB up to ~1TB -- connectivity to such systems is usually good, but not *that* good.\r\n\r\nIdea: Use an uncompressed tarball on the receiving end as an archive using only a single inode. It seems `tar` is clever enough to not rewrite an archive when adding new content, or deleting references to obsolete content. Essentially, such a tarball would be an ever growing \"file system\" that contains an annex object tree, hence storage of multiple versions of a file is perfectly possible. The storage system in question is SSH-accessible, so a special-remote implementation would use SSH for transfer, and also to remote-execute `tar` command to test for, inject, or extract content.\r\n\r\n@datalad/developers @joeyh Is there already an implementation of such a special-remote that you are aware of? Do you see any show-stoppers?\r\n\r\nThx.\r\n", "closed_by": {"login": "mih", "id": 136479, "node_id": "MDQ6VXNlcjEzNjQ3OQ==", "avatar_url": "https://avatars.githubusercontent.com/u/136479?v=4", "gravatar_id": "", "url": "https://api.github.com/users/mih", "html_url": "https://github.com/mih", "followers_url": "https://api.github.com/users/mih/followers", "following_url": "https://api.github.com/users/mih/following{/other_user}", "gists_url": "https://api.github.com/users/mih/gists{/gist_id}", "starred_url": "https://api.github.com/users/mih/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/mih/subscriptions", "organizations_url": "https://api.github.com/users/mih/orgs", "repos_url": "https://api.github.com/users/mih/repos", "events_url": "https://api.github.com/users/mih/events{/privacy}", "received_events_url": "https://api.github.com/users/mih/received_events", "type": "User", "site_admin": false}, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/3327/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/3327/timeline", "performed_via_github_app": null}