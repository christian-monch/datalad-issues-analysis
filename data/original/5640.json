{"url": "https://api.github.com/repos/datalad/datalad/issues/5640", "repository_url": "https://api.github.com/repos/datalad/datalad", "labels_url": "https://api.github.com/repos/datalad/datalad/issues/5640/labels{/name}", "comments_url": "https://api.github.com/repos/datalad/datalad/issues/5640/comments", "events_url": "https://api.github.com/repos/datalad/datalad/issues/5640/events", "html_url": "https://github.com/datalad/datalad/pull/5640", "id": 876851830, "node_id": "MDExOlB1bGxSZXF1ZXN0NjMwOTE2ODg2", "number": 5640, "title": "ENH: CLI - allow for no value for options with None available but not default", "user": {"login": "yarikoptic", "id": 39889, "node_id": "MDQ6VXNlcjM5ODg5", "avatar_url": "https://avatars.githubusercontent.com/u/39889?v=4", "gravatar_id": "", "url": "https://api.github.com/users/yarikoptic", "html_url": "https://github.com/yarikoptic", "followers_url": "https://api.github.com/users/yarikoptic/followers", "following_url": "https://api.github.com/users/yarikoptic/following{/other_user}", "gists_url": "https://api.github.com/users/yarikoptic/gists{/gist_id}", "starred_url": "https://api.github.com/users/yarikoptic/starred{/owner}{/repo}", "subscriptions_url": "https://api.github.com/users/yarikoptic/subscriptions", "organizations_url": "https://api.github.com/users/yarikoptic/orgs", "repos_url": "https://api.github.com/users/yarikoptic/repos", "events_url": "https://api.github.com/users/yarikoptic/events{/privacy}", "received_events_url": "https://api.github.com/users/yarikoptic/received_events", "type": "User", "site_admin": false}, "labels": [{"id": 390153891, "node_id": "MDU6TGFiZWwzOTAxNTM4OTE=", "url": "https://api.github.com/repos/datalad/datalad/labels/UX", "name": "UX", "color": "0052cc", "default": false, "description": "user experience"}, {"id": 526935563, "node_id": "MDU6TGFiZWw1MjY5MzU1NjM=", "url": "https://api.github.com/repos/datalad/datalad/labels/feedback-desired", "name": "feedback-desired", "color": "fbca04", "default": false, "description": ""}, {"id": 3049454433, "node_id": "MDU6TGFiZWwzMDQ5NDU0NDMz", "url": "https://api.github.com/repos/datalad/datalad/labels/patch", "name": "patch", "color": "870048", "default": false, "description": "Increment the patch version when merged"}], "state": "open", "locked": false, "assignee": null, "assignees": [], "milestone": null, "comments": 3, "created_at": "2021-05-05T21:23:12Z", "updated_at": "2021-09-09T14:52:16Z", "closed_at": null, "author_association": "MEMBER", "active_lock_reason": null, "pull_request": {"url": "https://api.github.com/repos/datalad/datalad/pulls/5640", "html_url": "https://github.com/datalad/datalad/pull/5640", "diff_url": "https://github.com/datalad/datalad/pull/5640.diff", "patch_url": "https://github.com/datalad/datalad/pull/5640.patch"}, "body": "E.g. so we could have `--fulfilled --` (to assign None) for `foreach` (#749) while having it to default to True\r\n\r\nInterestingly comparing the difference between manpages produced without/with this change we already detect a few cases where we have non-None default and `None` is still allowed to be a value:\r\n\r\n```shell\r\n$> diff -Naur build/man build/man-optional-none | grep -e '\\+\\\\fBdatalad ' -e '^\\+\\\\fB-' | sed -e 's,\\(^\\+\\\\fB-\\),  \\1,g'\r\n+\\fBdatalad addurls\\fR [-h] [-d\\~DATASET] [-t\\~TYPE] [-x\\~REGEXP] [-m\\~FORMAT] [--key\\~FORMAT] [--message\\~MESSAGE] [-n] [--fast] [--ifexists\\~{overwrite|skip}] [--missing-value\\~VALUE] [--nosave] [--version-urls] [-c\\~PROC] [-J [NJOBS]] [--drop-after] URL-FILE URL-FORMAT FILENAME-FORMAT\r\n  +\\fB-J\\fR [NJOBS], \\fB--jobs\\fR [NJOBS]\r\n+\\fBdatalad annotate\\-paths\\fR [-h] [-d\\~DATASET] [-r] [-R\\~LEVELS] [--action\\~LABEL] [--unavailable-path-status [LABEL]] [--unavailable-path-msg\\~message] [--nondataset-path-status [LABEL]] [--no-parentds-discovery] [--no-subds-discovery] [--revision-change-discovery] [--no-untracked-discovery] [--modified [MODIFIED]] [PATH ...]\r\n  +\\fB--unavailable-path-status\\fR [LABEL]\r\n  +\\fB--nondataset-path-status\\fR [LABEL]\r\n+\\fBdatalad create\\-sibling\\-ria\\fR [-h] -s NAME [-d\\~DATASET] [--storage-name\\~NAME] [--post-update-hook] [--shared\\~{false|true|umask|group|all|world|everybody|0xxx}] [--group\\~GROUP] [--storage-sibling [MODE]] [--existing [MODE]] [--trust-level TRUST-LEVEL] [-r] [-R\\~LEVELS] [--no-storage-sibling] ria+<ssh|file>://<host>[/path]\r\n  +\\fB--storage-sibling\\fR [MODE]\r\n  +\\fB--existing\\fR [MODE]\r\n+\\fBdatalad get\\fR [-h] [-s\\~LABEL] [-d\\~PATH] [-r] [-R\\~LEVELS] [-n] [-D\\~DESCRIPTION] [--reckless [auto|ephemeral|shared-...]] [-J [NJOBS]] [PATH ...]\r\n  +\\fB-J\\fR [NJOBS], \\fB--jobs\\fR [NJOBS]\r\n+\\fBdatalad install\\fR [-h] [-s\\~SOURCE] [-d\\~DATASET] [-g] [-D\\~DESCRIPTION] [-r] [-R\\~LEVELS] [--reckless [auto|ephemeral|shared-...]] [-J [NJOBS]] [PATH ...]\r\n  +\\fB-J\\fR [NJOBS], \\fB--jobs\\fR [NJOBS]\r\n+\\fBdatalad publish\\fR [-h] [-d\\~DATASET] [--to\\~LABEL] [--since\\~SINCE] [--missing\\~MODE] [-f] [--transfer-data\\~{auto|none|all}] [-r] [-R\\~LEVELS] [--git-opts\\~STRING] [--annex-opts\\~STRING] [--annex-copy-opts\\~STRING] [-J [NJOBS]] [PATH ...]\r\n  +\\fB-J\\fR [NJOBS], \\fB--jobs\\fR [NJOBS]\r\n+\\fBdatalad push\\fR [-h] [-d\\~DATASET] [--to\\~SIBLING] [--since\\~SINCE] [--data {anything|nothing|auto|auto-if-wanted}] [-f\\~{all|gitpush|checkdatapresent}] [-r] [-R\\~LEVELS] [-J [NJOBS]] [PATH ...]\r\n  +\\fB-J\\fR [NJOBS], \\fB--jobs\\fR [NJOBS]\r\n+\\fBdatalad save\\fR [-h] [-m\\~MESSAGE] [-d\\~DATASET] [-t\\~ID] [-r] [-R\\~LEVELS] [-u] [-F\\~MESSAGE_FILE] [--to-git] [-J [NJOBS]] [PATH ...]\r\n  +\\fB-J\\fR [NJOBS], \\fB--jobs\\fR [NJOBS]\r\n```\r\n\r\nI think this would increase consistency between Python and CLI interfaces, and partially (I think there is more to it there) address #4751 at least for the case of `None`.  \r\n\r\nI positioned it against `maint` since in principle it addresses the inconsistency but I would be ok to just go against `master` since its ramifications are not entirely known and it effects only CLI which is IMHO is undertested in direct invocations.\r\n\r\nWDYT?\r\n\r\nTODOs (if decided to proceed):\r\n- [ ] tests\r\n  - Q to @mih and @adswa: datalad-handbook is the primary tester for CLI AFAIK.  Is there a way to add its examples to be ran under CI here?", "closed_by": null, "reactions": {"url": "https://api.github.com/repos/datalad/datalad/issues/5640/reactions", "total_count": 0, "+1": 0, "-1": 0, "laugh": 0, "hooray": 0, "confused": 0, "heart": 0, "rocket": 0, "eyes": 0}, "timeline_url": "https://api.github.com/repos/datalad/datalad/issues/5640/timeline", "performed_via_github_app": null}